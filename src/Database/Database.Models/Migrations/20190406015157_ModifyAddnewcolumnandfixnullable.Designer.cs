// <auto-generated />
using System;
using Database.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Models.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20190406015157_ModifyAddnewcolumnandfixnullable")]
    partial class ModifyAddnewcolumnandfixnullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Models.ACC.BankAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankAccountNo");

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<Guid?>("CompanyID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("GLAccountID");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("isBankTransfer");

                    b.Property<bool>("isDepositAccount");

                    b.Property<bool>("isDirectCredit");

                    b.Property<bool>("isDirectDebit");

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("DistrictID");

                    b.ToTable("BankAccount","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.CalendarLock", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLocked");

                    b.Property<DateTime>("LockDate");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("CalendarLock","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.CalendarLockHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CalendarLockID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CalendarLockID");

                    b.HasIndex("UserID");

                    b.ToTable("CalendarLockHistory","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.GLDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankAccount");

                    b.Property<string>("Category");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal>("DebitCreditAmount")
                        .HasColumnType("Money");

                    b.Property<string>("Detail");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("OperationDate");

                    b.Property<string>("PostBy");

                    b.Property<DateTime?>("PostDate");

                    b.Property<string>("PostID");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("GLDetail","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.GLExport", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BatchID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("ExportBy");

                    b.Property<DateTime?>("ExportDate");

                    b.Property<string>("FileName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("GLExport","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Description");

                    b.Property<string>("DocCode");

                    b.Property<string>("GLAccountID");

                    b.Property<string>("GLType");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("PostGLAccount","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLChartOfAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountName");

                    b.Property<string>("AccountType");

                    b.Property<string>("AccountTypeGroup");

                    b.Property<Guid?>("BankAccountID");

                    b.Property<Guid?>("BankID");

                    b.Property<Guid?>("CompanyID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("GLAccountID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID");

                    b.HasIndex("BankID");

                    b.HasIndex("CompanyID");

                    b.ToTable("PostGLChartOfAccount","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLDepositAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankAccountNo");

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<Guid?>("CompanyID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("GLAccountID");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("isBankTransfer");

                    b.Property<bool>("isDepositAccount");

                    b.Property<bool>("isDirectCredit");

                    b.Property<bool>("isDirectDebit");

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("DistrictID");

                    b.ToTable("PostGLDepositAccount","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLHouseType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("GLAccountID");

                    b.Property<string>("HouseType");

                    b.Property<string>("IncomeAccountName");

                    b.Property<string>("IncomeAccountNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("PostGLHouseType","ACC");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculateOther", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeductDate");

                    b.Property<DateTime?>("EffectiveDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LCUserID");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("Remark");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("LCUserID");

                    b.HasIndex("ProjectID");

                    b.ToTable("CalculateOther","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculatePerMonth", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CommissionForThisMonth")
                        .HasColumnType("Money");

                    b.Property<decimal>("ContractValue")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LCAtProjectID");

                    b.Property<string>("LCC");

                    b.Property<Guid?>("LCClosedDealUserID");

                    b.Property<decimal>("NewLaunchAtProject")
                        .HasColumnType("Money");

                    b.Property<decimal>("NewLaunchClosedDeal")
                        .HasColumnType("Money");

                    b.Property<decimal>("NewLaunchTotalCommission")
                        .HasColumnType("Money");

                    b.Property<decimal>("NewRate");

                    b.Property<decimal>("Rate");

                    b.Property<decimal>("SaleCommissionLCCenter")
                        .HasColumnType("Money");

                    b.Property<decimal>("SigningContractCommission")
                        .HasColumnType("Money");

                    b.Property<decimal>("TransferAtProjectCommission")
                        .HasColumnType("Money");

                    b.Property<decimal>("TransferClosedDealCommission")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("TransferDate");

                    b.Property<decimal>("TransferTotalCommission")
                        .HasColumnType("Money");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("LCAtProjectID");

                    b.HasIndex("LCClosedDealUserID");

                    b.HasIndex("UnitID");

                    b.ToTable("CalculatePerMonth","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculateSale", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AtProjectCommission")
                        .HasColumnType("Money");

                    b.Property<decimal>("ClosedDealCommission")
                        .HasColumnType("Money");

                    b.Property<decimal>("CommissionForThisMonth")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("ContractApprovedDate");

                    b.Property<decimal>("ContractValue")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LCAtProjectID");

                    b.Property<string>("LCCenter");

                    b.Property<Guid?>("LCClosedDealID");

                    b.Property<decimal>("Rate");

                    b.Property<decimal>("SaleCommissionLCCenter")
                        .HasColumnType("Money");

                    b.Property<decimal>("TotalCommission")
                        .HasColumnType("Money");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("LCAtProjectID");

                    b.HasIndex("LCClosedDealID");

                    b.HasIndex("UnitID");

                    b.ToTable("CalculateSale","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculateTransfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ActualContractTransfer")
                        .HasColumnType("Money");

                    b.Property<decimal>("CommissionForThisMonth")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LCCTransferID");

                    b.Property<string>("LCCenterTransfer");

                    b.Property<decimal>("LCCenterTransferCommission")
                        .HasColumnType("Money");

                    b.Property<decimal>("Rate");

                    b.Property<decimal>("TransferCommission")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("TransferDate");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("LCCTransferID");

                    b.HasIndex("UnitID");

                    b.ToTable("CalculateTransfer","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.GeneralSetting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal>("AfterLaunchAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("LCCenterAfterSale");

                    b.Property<decimal>("LCCenterAfterSaleAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("LCCenterAfterTransfer");

                    b.Property<decimal>("LCCenterAfterTransferAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("LCCenterGuaranteeAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("LaunchEndDate");

                    b.Property<DateTime?>("LaunchStartDate");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("GeneralSetting","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.RateOnTop", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal>("Amount");

                    b.Property<string>("AmountUnit");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal>("EndRange")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("StartRange")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("RateOnTop","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingSale", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal>("Amount");

                    b.Property<string>("AmountUnit");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal>("EndRange")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RangeUnit");

                    b.Property<decimal>("StartRange")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("RateSettingSale","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingSaleFix", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal>("Amount");

                    b.Property<string>("AmountUnit");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("RateSettingSaleFix","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingTransfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal>("Amount");

                    b.Property<string>("AmountUnit");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal>("EndRange")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RangeUnit");

                    b.Property<decimal>("StartRange")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("RateSettingTransfer","CMS");
                });

            modelBuilder.Entity("Database.Models.CTM.Contact", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("CitizenExpireDate");

                    b.Property<string>("CitizenIdentityNo");

                    b.Property<string>("CompanyNameEN");

                    b.Property<string>("CompanyNameTH");

                    b.Property<string>("ContactFirstName");

                    b.Property<string>("ContactLastname");

                    b.Property<string>("ContactNo");

                    b.Property<string>("ContactStatus");

                    b.Property<Guid?>("ContactTypeMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("FatherName");

                    b.Property<string>("FatherNational");

                    b.Property<string>("FatherOtherNational");

                    b.Property<string>("FirstNameEN");

                    b.Property<string>("FirstNameTH");

                    b.Property<Guid?>("GenderMasterCenterID");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastNameEN");

                    b.Property<string>("LastNameTH");

                    b.Property<string>("LineID");

                    b.Property<string>("MarriageName");

                    b.Property<string>("MarriageNational");

                    b.Property<string>("MarriageOtherNational");

                    b.Property<string>("MiddleNameEN");

                    b.Property<string>("MiddleNameTH");

                    b.Property<string>("MotherName");

                    b.Property<string>("MotherNational");

                    b.Property<string>("MotherOtherNational");

                    b.Property<Guid?>("NationalMasterCenterID");

                    b.Property<string>("Nickname");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhoneNumberExt");

                    b.Property<string>("TaxID");

                    b.Property<Guid?>("TitleENMasterCenterID");

                    b.Property<string>("TitleExtEN");

                    b.Property<string>("TitleExtTH");

                    b.Property<Guid?>("TitleTHMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Wechat");

                    b.Property<string>("WhatsApp");

                    b.HasKey("ID");

                    b.HasIndex("ContactTypeMasterCenterID");

                    b.HasIndex("GenderMasterCenterID");

                    b.HasIndex("NationalMasterCenterID");

                    b.HasIndex("TitleENMasterCenterID");

                    b.HasIndex("TitleTHMasterCenterID");

                    b.ToTable("Contact","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactAddress", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContactAddressTypeMasterCenterID");

                    b.Property<Guid>("ContactID");

                    b.Property<Guid?>("CountryID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("ForeignDistrict");

                    b.Property<string>("ForeignProvince");

                    b.Property<string>("ForeignSubDistrict");

                    b.Property<string>("HouseNoEN");

                    b.Property<string>("HouseNoTH");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MooEN");

                    b.Property<string>("MooTH");

                    b.Property<string>("PostalCode");

                    b.Property<Guid?>("ProvinceID");

                    b.Property<string>("RoadEN");

                    b.Property<string>("RoadTH");

                    b.Property<string>("SoiEN");

                    b.Property<string>("SoiTH");

                    b.Property<Guid?>("SubDistrictID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("VillageEN");

                    b.Property<string>("VillageTH");

                    b.HasKey("ID");

                    b.HasIndex("ContactAddressTypeMasterCenterID");

                    b.HasIndex("ContactID");

                    b.HasIndex("CountryID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("SubDistrictID");

                    b.ToTable("ContactAddress","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactAddressProject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContactAddressID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ContactAddressID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ContactAddressProject","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactEmail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMain");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.ToTable("ContactEmail","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactPhone", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMain");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhoneNumberExt");

                    b.Property<Guid?>("PhoneTypeMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("PhoneTypeMasterCenterID");

                    b.ToTable("ContactPhone","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.Lead", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Compaign");

                    b.Property<Guid?>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<double?>("LeadScore");

                    b.Property<string>("LeadStatus");

                    b.Property<string>("LeadSuperVisor");

                    b.Property<Guid?>("LeadTypeMasterCenterID");

                    b.Property<decimal?>("Payment")
                        .HasColumnType("Money");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("Remark");

                    b.Property<Guid?>("SocialMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("VisitZone");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("LeadTypeMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("SocialMasterCenterID");

                    b.ToTable("Lead","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadActivity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActivityDate");

                    b.Property<Guid?>("ActivityTypeMasterCenterID");

                    b.Property<DateTime?>("ActualDate");

                    b.Property<DateTime?>("AppointmentDate");

                    b.Property<Guid?>("ConvenientTimeMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("LeadID");

                    b.Property<Guid?>("StatusID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ActivityTypeMasterCenterID");

                    b.HasIndex("ConvenientTimeMasterCenterID");

                    b.HasIndex("LeadID");

                    b.HasIndex("StatusID");

                    b.ToTable("LeadActivity","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadActivityStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LeadStatusType");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("LeadActivityStatus","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.Opportunity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArriveDate");

                    b.Property<Guid>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("EstimateSalesOpportunityMasterCenterID");

                    b.Property<string>("InterestedProduct1");

                    b.Property<string>("InterestedProduct2");

                    b.Property<string>("InterestedProduct3");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LCOwner");

                    b.Property<Guid?>("ProjectID");

                    b.Property<Guid?>("SalesOpportunityMasterCenterID");

                    b.Property<Guid?>("StatusQuestionaireMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("EstimateSalesOpportunityMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("SalesOpportunityMasterCenterID");

                    b.HasIndex("StatusQuestionaireMasterCenterID");

                    b.ToTable("Opportunity","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.OpportunityActivity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActivityDate");

                    b.Property<Guid?>("ActivityTypeMasterCenterID");

                    b.Property<DateTime?>("AppointmentDate");

                    b.Property<Guid?>("ConvenientTimeMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OpportunityID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ActivityTypeMasterCenterID");

                    b.HasIndex("ConvenientTimeMasterCenterID");

                    b.HasIndex("OpportunityID");

                    b.ToTable("OpportunityActivity","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.OpportunityActivityStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("OpportunityActivityStatus","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.OpportunityActivityTrack", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("OpportunityAcitivityID");

                    b.Property<string>("OtherReasons");

                    b.Property<Guid?>("StatusID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("OpportunityAcitivityID");

                    b.HasIndex("StatusID");

                    b.ToTable("OpportunityActivityTrack","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.Visitor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContactID");

                    b.Property<Guid?>("ContactStatusCenterID");

                    b.Property<string>("ContactSupervisor");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Description");

                    b.Property<string>("Filename");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("ReceiveNumber");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("VehicleCenterID");

                    b.Property<DateTime?>("VisitDateIn");

                    b.Property<DateTime?>("VisitDateOut");

                    b.Property<Guid?>("VisitMasterCenterID");

                    b.Property<Guid?>("WalkStatusCenterID");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("ContactStatusCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("VehicleCenterID");

                    b.HasIndex("VisitMasterCenterID");

                    b.HasIndex("WalkStatusCenterID");

                    b.ToTable("Visitor","CTM");
                });

            modelBuilder.Entity("Database.Models.DBO.JobTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("JobTransaction","DMT");
                });

            modelBuilder.Entity("Database.Models.FIN.BillPayment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankID");

                    b.Property<string>("BatchID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("ImportTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("PayDate");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.ToTable("BillPayment","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.BillPaymentTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankRef1");

                    b.Property<string>("BankRef2");

                    b.Property<string>("BankRef3");

                    b.Property<Guid>("BillPaymentID");

                    b.Property<string>("BillPaymentType");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime>("PayDate");

                    b.Property<string>("PayType");

                    b.Property<string>("Status");

                    b.Property<string>("UnitPriceItemKey");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BillPaymentID");

                    b.ToTable("BillPaymentTransaction","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.CustomerWallet", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<Guid>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("ProjectID");

                    b.ToTable("CustomerWallet","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.CustomerWalletTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("CustomerWalletID");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("PaymentTypeItemID");

                    b.Property<decimal>("RemainAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("CustomerWalletID");

                    b.HasIndex("PaymentTypeItemID");

                    b.ToTable("CustomerWalletTransaction","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.Deposit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankAccountID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("DepositDate");

                    b.Property<string>("DepositNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID");

                    b.ToTable("Deposit","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitApprovalForm", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApprovalStatus");

                    b.Property<Guid>("BookingID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("DirectPeriod");

                    b.Property<int>("FormType");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.ToTable("DirectCreditDebitApprovalForm","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitExport", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankID");

                    b.Property<string>("BatchID");

                    b.Property<Guid?>("CompanyID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("DirectFormType");

                    b.Property<DateTime>("DirectPayDate");

                    b.Property<string>("DirectPeriod");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Month");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("CompanyID");

                    b.ToTable("DirectCreditDebitExport","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("DirectCreditDebitUnitPriceItemID");

                    b.Property<DateTime>("DueDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Memo");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime>("PayDate");

                    b.Property<bool>("Result");

                    b.Property<string>("TransactionNo");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("DirectCreditDebitUnitPriceItemID");

                    b.ToTable("DirectCreditDebitTransaction","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitUnitPriceItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("DirectCreditDebitFormID");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("UnitPriceItemKey");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("DirectCreditDebitFormID");

                    b.ToTable("DirectCreditDebitUnitPriceItem","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankID");

                    b.Property<string>("CitizenIdentityNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("CreditCardExpireMonth");

                    b.Property<int>("CreditCardExpireYear");

                    b.Property<string>("CreditCardNo");

                    b.Property<string>("CreditCardOwner");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Memo");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.ToTable("DirectCreditDetail","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectDebitDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Memo");

                    b.Property<Guid?>("ProvinceID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("DirectDebitDetail","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.EDC", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankID");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("EDCType");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("TelNo");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("ProjectID");

                    b.ToTable("EDC","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.EDCFee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardPaymentType");

                    b.Property<string>("CardProvider");

                    b.Property<string>("CardType");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("CustomerCardFrom");

                    b.Property<decimal>("Fee")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("EDCFee","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.Payment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttachFile");

                    b.Property<Guid>("BookingID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Memo");

                    b.Property<DateTime>("ReceiveDate");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.ToTable("Payment","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentBankTransfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankAccountID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<Guid?>("UnknownPaymentID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UnknownPaymentID");

                    b.ToTable("PaymentBankTransfer","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentBillPayment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BillPaymentTransactionID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BillPaymentTransactionID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("PaymentBillPayment","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentCashierCheque", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<DateTime>("ChequeDate");

                    b.Property<string>("ChequeNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("PayToCompanyID");

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("PayToCompanyID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("PaymentCashierCheque","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentCreditCard", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankID");

                    b.Property<string>("CardNo");

                    b.Property<string>("CardPaymentType");

                    b.Property<string>("CardProvider");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("EDCID");

                    b.Property<decimal>("Fee")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsForeignCreditCard");

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("EDCID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("PaymentCreditCard","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentCustomerWallet", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("CustomerWalletTransactionID");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("CustomerWalletTransactionID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("PaymentCustomerWallet","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentDirectCreditDebit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("DirectCreditDebitTransactionID");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("DirectCreditDebitTransactionID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("PaymentDirectCreditDebit","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentForeignBankTransfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal>("Fee")
                        .HasColumnType("Money");

                    b.Property<string>("ForeignBank");

                    b.Property<string>("ForeignTransferType");

                    b.Property<string>("IR");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsNotifyForEdit");

                    b.Property<bool>("IsRequestFET");

                    b.Property<string>("NotifyMemo");

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<string>("SourceCurrency");

                    b.Property<string>("TransferorName");

                    b.Property<Guid?>("UnknownPaymentID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UnknownPaymentID");

                    b.ToTable("PaymentForeignBankTransfer","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("ItemAmout")
                        .HasColumnType("Money");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("Money");

                    b.Property<Guid>("PaymentID");

                    b.Property<decimal>("RemainAmount")
                        .HasColumnType("Money");

                    b.Property<string>("UnitPriceItemKey");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("PaymentID");

                    b.ToTable("PaymentItem","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentMethod", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("DepositID");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("Money");

                    b.Property<Guid>("PaymentID");

                    b.Property<int>("PaymentMethodType");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("DepositID");

                    b.HasIndex("PaymentID");

                    b.ToTable("PaymentMethod","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentMethodToItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("PaymentItemID");

                    b.Property<Guid?>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("PaymentItemID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("PaymentMethodToItem","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentPersonalCheque", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<DateTime>("ChequeDate");

                    b.Property<string>("ChequeNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("PayToCompanyID");

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("PayToCompanyID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("PaymentPersonalCheque","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentQRCode", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankAccountID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("PaymentQRCode","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.Receipt", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyID");

                    b.Property<Guid?>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("PaymentID");

                    b.Property<string>("ReceiptNo");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("ContactID");

                    b.HasIndex("PaymentID");

                    b.ToTable("Receipt","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptSendEmailHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ReceiptID");

                    b.Property<Guid?>("SendToContactID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ReceiptID");

                    b.HasIndex("SendToContactID");

                    b.ToTable("ReceiptSendEmailHistory","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptSendPrintingHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ReceiptID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ReceiptID");

                    b.ToTable("ReceiptSendPrintingHistory","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptTemp", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyID");

                    b.Property<Guid?>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("PaymentID");

                    b.Property<string>("ReceiptTempNo");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("ContactID");

                    b.HasIndex("PaymentID");

                    b.ToTable("ReceiptTemp","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.UnknownPayment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<string>("AttachFile");

                    b.Property<Guid?>("AttachFileFromBankID");

                    b.Property<Guid?>("BankAccountID");

                    b.Property<string>("BankDepositNo");

                    b.Property<string>("CancelMemo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ReceiveDate");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TransferDate");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("AttachFileFromBankID");

                    b.HasIndex("BankAccountID");

                    b.ToTable("UnknownPayment","FIN");
                });

            modelBuilder.Entity("Database.Models.LET.DownPaymentLetter", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgreementID");

                    b.Property<string>("AgreementNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LetterStatus");

                    b.Property<string>("LetterType");

                    b.Property<string>("Memo");

                    b.Property<string>("PostTrackingNo");

                    b.Property<int>("RemainDownPeriod");

                    b.Property<int>("RemainDownPeriodCount");

                    b.Property<DateTime?>("ResponseDate");

                    b.Property<decimal>("TotalRemainAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("AgreementID");

                    b.ToTable("DownPaymentLetter","LET");
                });

            modelBuilder.Entity("Database.Models.LET.TransferLetter", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgreementID");

                    b.Property<string>("AgreementNo");

                    b.Property<DateTime?>("AppointmentTransferDate");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LetterTransferDate");

                    b.Property<string>("LetterType");

                    b.Property<string>("PostTrackingNo");

                    b.Property<string>("TransferStatus");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("AgreementID");

                    b.ToTable("TransferLetter","LET");
                });

            modelBuilder.Entity("Database.Models.MST.BG", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BGNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("SBUID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("SBUID");

                    b.ToTable("BG","MST");
                });

            modelBuilder.Entity("Database.Models.MST.BOConfiguration", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AdjustAccount");

                    b.Property<double>("BOIAmount");

                    b.Property<double>("BusinessTaxPercent");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<double>("DepreciationYear");

                    b.Property<double>("IncomeTaxPercent");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("LocalTaxPercent");

                    b.Property<double>("TaxAccount");

                    b.Property<double>("UnitTransferFee");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<double>("Vat");

                    b.Property<double>("VoidRefund");

                    b.HasKey("ID");

                    b.ToTable("BOConfiguration","MST");
                });

            modelBuilder.Entity("Database.Models.MST.Bank", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("BankNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsCoorperative");

                    b.Property<bool>("IsCreditCard");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFreeMortgage");

                    b.Property<bool>("IsNonBank");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameTH");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("Bank","MST");
                });

            modelBuilder.Entity("Database.Models.MST.BankBranch", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AreaCode");

                    b.Property<Guid>("BankID");

                    b.Property<string>("Building");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("Fax");

                    b.Property<bool>("IsCreditBank");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDirectCredit");

                    b.Property<bool>("IsDirectDebit");

                    b.Property<string>("Name");

                    b.Property<string>("OldBankID");

                    b.Property<string>("OldBranchID");

                    b.Property<string>("PostalCode");

                    b.Property<Guid?>("ProvinceID");

                    b.Property<string>("Road");

                    b.Property<string>("Soi");

                    b.Property<Guid?>("SubDistrictID");

                    b.Property<string>("Telephone");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("SubDistrictID");

                    b.ToTable("BankBranch","MST");
                });

            modelBuilder.Entity("Database.Models.MST.Brand", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrandNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid>("SBUID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("SBUID");

                    b.ToTable("Brand","MST");
                });

            modelBuilder.Entity("Database.Models.MST.Company", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressEN");

                    b.Property<string>("AddressTH");

                    b.Property<string>("BuildingEN");

                    b.Property<string>("BuildingTH");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("Fax");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameENOld");

                    b.Property<string>("NameTH");

                    b.Property<string>("NameTHOld");

                    b.Property<string>("PostalCode");

                    b.Property<Guid?>("ProvinceID");

                    b.Property<string>("RoadEN");

                    b.Property<string>("RoadTH");

                    b.Property<string>("SAPCompanyID");

                    b.Property<string>("SoiEN");

                    b.Property<string>("SoiTH");

                    b.Property<Guid?>("SubDistrictID");

                    b.Property<string>("TaxID");

                    b.Property<string>("Telephone");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Website");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("SubDistrictID");

                    b.ToTable("Company","MST");
                });

            modelBuilder.Entity("Database.Models.MST.Counter", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CounterNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("Counter","MST");
                });

            modelBuilder.Entity("Database.Models.MST.Country", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsShow");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameTH");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("Country","MST");
                });

            modelBuilder.Entity("Database.Models.MST.District", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameTH");

                    b.Property<string>("PostalCode");

                    b.Property<Guid>("ProvinceID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("District","MST");
                });

            modelBuilder.Entity("Database.Models.MST.ErrorMessage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<string>("Message");

                    b.Property<string>("Remark");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("ErrorMessage","MST");
                });

            modelBuilder.Entity("Database.Models.MST.LandOffice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameTH");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("LandOffice","MST");
                });

            modelBuilder.Entity("Database.Models.MST.LegalEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameTH");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("LegalEntity","MST");
                });

            modelBuilder.Entity("Database.Models.MST.MasterCenter", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<string>("MasterCenterGroupKey");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("MasterCenterGroupKey");

                    b.ToTable("MasterCenter","MST");
                });

            modelBuilder.Entity("Database.Models.MST.MasterCenterGroup", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("Key");

                    b.ToTable("MasterCenterGroup","MST");
                });

            modelBuilder.Entity("Database.Models.MST.MasterPriceItem", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("ACCode");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Detail");

                    b.Property<string>("DetailEN");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PriceType");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("Key");

                    b.ToTable("MasterPriceItem","MST");
                });

            modelBuilder.Entity("Database.Models.MST.Menu", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("MenuAreaID");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentMenuID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("MenuAreaID");

                    b.HasIndex("ParentMenuID");

                    b.ToTable("Menu","MST");
                });

            modelBuilder.Entity("Database.Models.MST.MenuArea", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("MenuArea","MST");
                });

            modelBuilder.Entity("Database.Models.MST.Province", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsShow");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameTH");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("Province","MST");
                });

            modelBuilder.Entity("Database.Models.MST.SBU", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("SBUNo");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("SBU","MST");
                });

            modelBuilder.Entity("Database.Models.MST.SubBG", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BGID");

                    b.Property<string>("BGNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BGID");

                    b.ToTable("SubBG","MST");
                });

            modelBuilder.Entity("Database.Models.MST.SubDistrict", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("DistrictID");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LandOfficeID");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameTH");

                    b.Property<string>("PostalCode");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("LandOfficeID");

                    b.ToTable("SubDistrict","MST");
                });

            modelBuilder.Entity("Database.Models.MST.TypeOfRealEstate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("RealEstateCategoryMasterCenterID");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("Money");

                    b.Property<decimal>("StandardPrice")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("RealEstateCategoryMasterCenterID");

                    b.ToTable("TypeOfRealEstate","MST");
                });

            modelBuilder.Entity("Database.Models.NTF.EmailNotification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BCCReceivers");

                    b.Property<string>("CCReceivers");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("ErrorMessage");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Message");

                    b.Property<string>("Receivers");

                    b.Property<int>("Retry");

                    b.Property<string>("Status");

                    b.Property<string>("Subject");

                    b.Property<string>("TemplateName");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("EmailNotification","NTF");
                });

            modelBuilder.Entity("Database.Models.NTF.MobileInstallation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("DeviceType");

                    b.Property<string>("InstallationID");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("MobileInstallation","NTF");
                });

            modelBuilder.Entity("Database.Models.NTF.MobileNotification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("DeviceIds");

                    b.Property<string>("ErrorMessages");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Message");

                    b.Property<string>("Params");

                    b.Property<string>("Status");

                    b.Property<string>("Subject");

                    b.Property<string>("TemplateName");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("MobileNotification","NTF");
                });

            modelBuilder.Entity("Database.Models.NTF.NotificationTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("EmailMessage");

                    b.Property<string>("EmailSubject");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailOpen");

                    b.Property<bool>("IsMobileOpen");

                    b.Property<bool>("IsWebOpen");

                    b.Property<string>("MobileAction");

                    b.Property<string>("MobileMessage");

                    b.Property<string>("MobileParams");

                    b.Property<string>("MobileSubject");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("WebAction");

                    b.Property<string>("WebMessage");

                    b.Property<string>("WebParams");

                    b.HasKey("ID");

                    b.ToTable("NotificationTemplate","NTF");
                });

            modelBuilder.Entity("Database.Models.NTF.WebNotification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Message");

                    b.Property<string>("Params");

                    b.Property<string>("Status");

                    b.Property<string>("TemplateName");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("WebNotification","NTF");
                });

            modelBuilder.Entity("Database.Models.OST.ContactStory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContactID");

                    b.Property<Guid>("ContactStoryGroupID");

                    b.Property<Guid>("ContactStoryTypeID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ProjectNo");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<string>("UnitNo");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("ContactStoryGroupID");

                    b.HasIndex("ContactStoryTypeID");

                    b.ToTable("ContactStory","OST");
                });

            modelBuilder.Entity("Database.Models.OST.ContactStoryGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("ContactStoryGroup","OST");
                });

            modelBuilder.Entity("Database.Models.OST.ContactStoryType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("ContactStoryType","OST");
                });

            modelBuilder.Entity("Database.Models.OST.UnitStory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<Guid>("UnitID");

                    b.Property<Guid>("UnitStoryGroupID");

                    b.Property<Guid>("UnitStoryTypeID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UnitStoryGroupID");

                    b.HasIndex("UnitStoryTypeID");

                    b.ToTable("UnitStory","OST");
                });

            modelBuilder.Entity("Database.Models.OST.UnitStoryGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("UnitStoryGroup","OST");
                });

            modelBuilder.Entity("Database.Models.OST.UnitStoryType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("UnitStoryType","OST");
                });

            modelBuilder.Entity("Database.Models.PRJ.Address", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressNameEN");

                    b.Property<string>("AddressNameTH");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("HouseMoo");

                    b.Property<string>("HouseRoadEN");

                    b.Property<string>("HouseRoadTH");

                    b.Property<string>("HouseSoiEN");

                    b.Property<string>("HouseSoiTH");

                    b.Property<Guid?>("HouseSubDistrictID");

                    b.Property<string>("InspectionNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LandNo");

                    b.Property<Guid?>("LandOfficeID");

                    b.Property<string>("Moo");

                    b.Property<string>("PostalCode");

                    b.Property<Guid?>("ProjectAddressTypeMasterCenterID");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("ProvinceID");

                    b.Property<string>("RoadEN");

                    b.Property<string>("RoadTH");

                    b.Property<string>("SoiEN");

                    b.Property<string>("SoiTH");

                    b.Property<Guid?>("SubDistrictID");

                    b.Property<string>("TitleDeedNo");

                    b.Property<string>("TitledeedMoo");

                    b.Property<string>("TitledeedRoadEN");

                    b.Property<string>("TitledeedRoadTH");

                    b.Property<string>("TitledeedSoiEN");

                    b.Property<string>("TitledeedSoiTH");

                    b.Property<Guid?>("TitledeedSubDistrictID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("HouseSubDistrictID");

                    b.HasIndex("LandOfficeID");

                    b.HasIndex("ProjectAddressTypeMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("SubDistrictID");

                    b.HasIndex("TitledeedSubDistrictID");

                    b.ToTable("Address","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.AgreementConfig", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AttorneyIssueDate");

                    b.Property<string>("AttorneyNameEN1");

                    b.Property<string>("AttorneyNameEN2");

                    b.Property<string>("AttorneyNameTH1");

                    b.Property<string>("AttorneyNameTH2");

                    b.Property<string>("AttorneyNameTransfer");

                    b.Property<decimal?>("BuildingInsurance")
                        .HasColumnType("Money");

                    b.Property<decimal?>("ChangeNameFee")
                        .HasColumnType("Money");

                    b.Property<decimal?>("CondoFundRate")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal?>("DelayTransfer");

                    b.Property<DateTime?>("EIAApprovedDate");

                    b.Property<DateTime?>("EndPublicDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsIncludeDoubleParking");

                    b.Property<bool>("IsNotLicenseLand");

                    b.Property<Guid?>("LegalEntityID");

                    b.Property<DateTime?>("LicenseLandExpireDate");

                    b.Property<DateTime?>("LicenseLandIssueDate");

                    b.Property<string>("LicenseLandNo");

                    b.Property<DateTime?>("LicenseProductExpireDate");

                    b.Property<DateTime?>("LicenseProductIssueDate");

                    b.Property<string>("LicenseProductNo");

                    b.Property<string>("LicenseProductRemark");

                    b.Property<DateTime?>("OwnerShipDate");

                    b.Property<int?>("ParkingUnits");

                    b.Property<DateTime?>("PreLicenseLandExpireDate");

                    b.Property<DateTime?>("PreLicenseLandIssueDate");

                    b.Property<string>("PreLicenseLandNo");

                    b.Property<string>("PreferApproveName");

                    b.Property<string>("PreferApprovePosition");

                    b.Property<Guid>("ProjectID");

                    b.Property<int?>("PublicFundMonths");

                    b.Property<int?>("PublicFundMonthsAP");

                    b.Property<decimal?>("PublicFundRate")
                        .HasColumnType("Money");

                    b.Property<decimal?>("PublicFundRateAP")
                        .HasColumnType("Money");

                    b.Property<decimal?>("RoomTransferFee")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal?>("VisitFine")
                        .HasColumnType("Money");

                    b.Property<int?>("VisitFineDay");

                    b.Property<string>("WitnessEN1");

                    b.Property<string>("WitnessEN2");

                    b.Property<string>("WitnessTH1");

                    b.Property<string>("WitnessTH2");

                    b.HasKey("ID");

                    b.HasIndex("LegalEntityID");

                    b.HasIndex("ProjectID");

                    b.ToTable("AgreementConfig","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetMinPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BudgetMinPriceTypeMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ProjectID");

                    b.Property<string>("Quarter");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("UnitAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Year");

                    b.HasKey("ID");

                    b.HasIndex("BudgetMinPriceTypeMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.ToTable("BudgetMinPrice","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetPromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ProjectID");

                    b.Property<decimal?>("PromotionPrice")
                        .HasColumnType("Money");

                    b.Property<decimal?>("PromotionTransferPrice")
                        .HasColumnType("Money");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.ToTable("BudgetPromotion","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.Floor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Description");

                    b.Property<string>("FileAttachment");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameTH");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid>("TowerID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("TowerID");

                    b.ToTable("Floor","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.FloorPlanImage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("FileName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.ToTable("FloorPlanImage","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.HighRiseFee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CalculateParkAreaMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal?>("EstimatePriceAirArea")
                        .HasColumnType("Money");

                    b.Property<decimal?>("EstimatePriceArea")
                        .HasColumnType("Money");

                    b.Property<decimal?>("EstimatePriceBalconyArea")
                        .HasColumnType("Money");

                    b.Property<decimal?>("EstimatePricePoolArea")
                        .HasColumnType("Money");

                    b.Property<decimal?>("EstimatePriceUsageArea")
                        .HasColumnType("Money");

                    b.Property<Guid?>("FloorID");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("TowerID");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("CalculateParkAreaMasterCenterID");

                    b.HasIndex("FloorID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TowerID");

                    b.HasIndex("UnitID");

                    b.ToTable("HighRiseFee","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.LowRiseBuildingPriceFee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ModelID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("Money");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ModelID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.ToTable("LowRiseBuildingPriceFee","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.LowRiseFee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal?>("EstimatePriceArea")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.ToTable("LowRiseFee","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.LowRiseFenceFee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("ConcretePrice")
                        .HasColumnType("Money");

                    b.Property<double?>("ConcreteRate");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal?>("DepreciationPerYear")
                        .HasColumnType("Money");

                    b.Property<decimal?>("IronPrice")
                        .HasColumnType("Money");

                    b.Property<bool>("IsCalculateDepreciation");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LandOfficeID");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("TypeOfRealEstateID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("LandOfficeID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TypeOfRealEstateID");

                    b.ToTable("LowRiseFenceFee","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.MinPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal?>("ApprovedMinPrice")
                        .HasColumnType("Money");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("Money");

                    b.Property<string>("CostType");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("DocTypeMasterCenterID");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("MinPriceTypeMasterCenterID");

                    b.Property<Guid?>("ProjectID");

                    b.Property<decimal?>("ROIMinprice")
                        .HasColumnType("Money");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("Money");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("DocTypeMasterCenterID");

                    b.HasIndex("MinPriceTypeMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.ToTable("MinPrice","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.Model", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<double?>("FrontWidth");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ModelShortNameMasterCenterID");

                    b.Property<Guid?>("ModelTypeMasterCenterID");

                    b.Property<Guid?>("ModelUnitTypeMasterCenterID");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameTH");

                    b.Property<double?>("PreferHouse");

                    b.Property<double?>("PreferUnit");

                    b.Property<double?>("PreferUnitMinimum");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("TypeOfRealEstateID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ModelShortNameMasterCenterID");

                    b.HasIndex("ModelTypeMasterCenterID");

                    b.HasIndex("ModelUnitTypeMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TypeOfRealEstateID");

                    b.ToTable("Model","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.OtherUnitInfoTag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("TagID");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("TagID");

                    b.HasIndex("UnitID");

                    b.ToTable("OtherUnitInfoTag","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.PriceList", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("UnitID");

                    b.ToTable("PriceList","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.PriceListItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("Installment");

                    b.Property<int?>("InstallmentPeriod");

                    b.Property<string>("InstallmentPeriodKey");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSpecialInstallmentPeriod");

                    b.Property<bool>("IsToBePay");

                    b.Property<string>("MasterPriceItemKey")
                        .HasMaxLength(50);

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<Guid>("PriceListID");

                    b.Property<decimal?>("PricePerUnitAmount")
                        .HasColumnType("Money");

                    b.Property<int>("PriceType");

                    b.Property<int?>("PriceUnit");

                    b.Property<double?>("PriceUnitAmount");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("MasterPriceItemKey");

                    b.HasIndex("PriceListID");

                    b.ToTable("PriceListItem","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.PriceListItemTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MasterPriceItemKey")
                        .HasMaxLength(50);

                    b.Property<int>("Order");

                    b.Property<Guid>("PriceListID");

                    b.Property<Guid?>("ProductTypeMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("MasterPriceItemKey");

                    b.HasIndex("PriceListID");

                    b.HasIndex("ProductTypeMasterCenterID");

                    b.ToTable("PriceListItemTemplate","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.Project", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BGID");

                    b.Property<Guid?>("BrandID");

                    b.Property<Guid?>("CompanyID");

                    b.Property<string>("CostCenterCode");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("FloatingEndDate");

                    b.Property<string>("Group");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LineId");

                    b.Property<string>("Logo");

                    b.Property<decimal?>("MortgageAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("MortgageBankID");

                    b.Property<double?>("Ngan");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid?>("ProductTypeMasterCenterID");

                    b.Property<string>("ProfitCenterCode");

                    b.Property<DateTime?>("ProjectEndDate");

                    b.Property<string>("ProjectNameEN");

                    b.Property<string>("ProjectNameTH");

                    b.Property<string>("ProjectNo");

                    b.Property<decimal?>("ProjectPrice")
                        .HasColumnType("Money");

                    b.Property<string>("ProjectShortName");

                    b.Property<DateTime?>("ProjectStartDate");

                    b.Property<int>("ProjectStatus");

                    b.Property<Guid?>("ProjectTypeMasterCenterID");

                    b.Property<double?>("Rai");

                    b.Property<string>("Remark");

                    b.Property<Guid?>("SBUID");

                    b.Property<string>("SapCode");

                    b.Property<double?>("SqaureWa");

                    b.Property<Guid?>("SubBGID");

                    b.Property<double?>("TotalUnit");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("WeChat");

                    b.Property<string>("WhatsApp");

                    b.HasKey("ID");

                    b.HasIndex("BGID");

                    b.HasIndex("BrandID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("MortgageBankID");

                    b.HasIndex("ProductTypeMasterCenterID");

                    b.HasIndex("ProjectTypeMasterCenterID");

                    b.HasIndex("SBUID");

                    b.HasIndex("SubBGID");

                    b.ToTable("Project","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.RoomPlanImage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("FileName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.ToTable("RoomPlanImage","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.RoundFee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BusinessTaxRoundFormulaMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("IncomeTaxRoundFormulaMasterCenterID");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LandOfficeID");

                    b.Property<Guid?>("LocalTaxRoundFormulaMasterCenterID");

                    b.Property<decimal?>("OtherFee")
                        .HasColumnType("Money");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("TransferFeeRoundFormulaMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BusinessTaxRoundFormulaMasterCenterID");

                    b.HasIndex("IncomeTaxRoundFormulaMasterCenterID");

                    b.HasIndex("LandOfficeID");

                    b.HasIndex("LocalTaxRoundFormulaMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TransferFeeRoundFormulaMasterCenterID");

                    b.ToTable("RoundFee","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.TitledeedDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AirArea");

                    b.Property<double?>("BalconyArea");

                    b.Property<string>("BookNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal>("EstimatePrice")
                        .HasColumnType("Money");

                    b.Property<double?>("FenceArea");

                    b.Property<double?>("FenceIronArea");

                    b.Property<Guid?>("HouseDistrictID");

                    b.Property<string>("HouseMoo");

                    b.Property<string>("HouseNo");

                    b.Property<string>("HousePostalCode");

                    b.Property<Guid?>("HouseProvinceID");

                    b.Property<string>("HouseRoadEN");

                    b.Property<string>("HouseRoadTH");

                    b.Property<string>("HouseSoiEN");

                    b.Property<string>("HouseSoiTH");

                    b.Property<Guid?>("HouseSubDistrictID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSameAddressAsTitledeed");

                    b.Property<Guid?>("LandOfficeID");

                    b.Property<string>("LandPortionNo");

                    b.Property<DateTime?>("LandStatusDate");

                    b.Property<Guid?>("LandStatusMasterCenterID");

                    b.Property<string>("LandStatusNote");

                    b.Property<double?>("LandSurveyArea");

                    b.Property<string>("Location");

                    b.Property<string>("PageNo");

                    b.Property<double?>("ParkingArea");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("Remark");

                    b.Property<double?>("TitledeedArea");

                    b.Property<string>("TitledeedNo");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<double?>("UsedArea");

                    b.Property<int?>("YearGotHouseNo");

                    b.HasKey("ID");

                    b.HasIndex("HouseDistrictID");

                    b.HasIndex("HouseProvinceID");

                    b.HasIndex("HouseSubDistrictID");

                    b.HasIndex("LandOfficeID");

                    b.HasIndex("LandStatusMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.ToTable("TitledeedDetail","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.Tower", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CondominiumName");

                    b.Property<string>("CondominiumNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("TowerCode");

                    b.Property<string>("TowerDescription");

                    b.Property<string>("TowerNoEN");

                    b.Property<string>("TowerNoTH");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Tower","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.Unit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AssetTypeMasterCenterID");

                    b.Property<DateTime?>("CompletedDocumentDate");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("ElectricMeter");

                    b.Property<string>("ElectricMeterRemark");

                    b.Property<string>("ElectricMeterStatus");

                    b.Property<string>("ElectricMeterTopic");

                    b.Property<DateTime?>("ElectricMeterTransferDate");

                    b.Property<string>("FloorFilename");

                    b.Property<string>("FloorFilename2");

                    b.Property<Guid?>("FloorID");

                    b.Property<string>("GLRaiseBatchID");

                    b.Property<string>("HouseCode");

                    b.Property<string>("HouseName");

                    b.Property<string>("HouseNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsTransferElectricMeter");

                    b.Property<bool?>("IsTransferWaterMeter");

                    b.Property<Guid?>("ModelID");

                    b.Property<double?>("NumberOfParkingFix");

                    b.Property<double?>("NumberOfParkingUnFix");

                    b.Property<double?>("NumberOfPrivilege");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("Reamark");

                    b.Property<string>("RoomFilename");

                    b.Property<string>("RoomFilename2");

                    b.Property<string>("SAPWBSNo");

                    b.Property<string>("SAPWBSObject");

                    b.Property<string>("SAPWBSStatus");

                    b.Property<double?>("SaleArea");

                    b.Property<Guid?>("TowerID");

                    b.Property<string>("UnitLayoutType");

                    b.Property<decimal?>("UnitLoanAmount")
                        .HasColumnType("Money");

                    b.Property<string>("UnitNo");

                    b.Property<Guid?>("UnitStatusMasterCenterID");

                    b.Property<Guid?>("UnitTypeMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("WaterMeter");

                    b.Property<string>("WaterMeterRemark");

                    b.Property<string>("WaterMeterStatus");

                    b.Property<string>("WaterMeterTopic");

                    b.Property<DateTime?>("WaterMeterTransferDate");

                    b.HasKey("ID");

                    b.HasIndex("AssetTypeMasterCenterID");

                    b.HasIndex("FloorID");

                    b.HasIndex("ModelID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TowerID");

                    b.HasIndex("UnitStatusMasterCenterID");

                    b.HasIndex("UnitTypeMasterCenterID");

                    b.ToTable("Unit","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.UnitOtherUnitInfoTag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("UnitOtherUnitInfoTag","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.WaiveQC", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualTransferDate");

                    b.Property<DateTime?>("ArriveDate");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("EndFulleDate");

                    b.Property<DateTime?>("EndMajoreDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid>("UnitID");

                    b.Property<Guid?>("UnitStatusMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("WaiveQCeDate");

                    b.Property<DateTime?>("WaiveSigneDate");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UnitStatusMasterCenterID");

                    b.ToTable("WaiveQC","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.WaterElectricMeterPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal>("ElectricMeterPrice")
                        .HasColumnType("Money");

                    b.Property<double?>("ElectricMeterSize");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ModelID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("Version");

                    b.Property<decimal>("WaterMeterPrice")
                        .HasColumnType("Money");

                    b.Property<double?>("WaterMeterSize");

                    b.HasKey("ID");

                    b.HasIndex("ModelID");

                    b.ToTable("WaterElectricMeterPrice","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("PromotionID");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.HasIndex("PromotionID");

                    b.ToTable("BookingPromotion","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionExpense", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingPromotionID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ResponsibleBy");

                    b.Property<string>("UnitPriceItemKey");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BookingPromotionID");

                    b.ToTable("BookingPromotionExpense","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingPromotionID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<string>("PriceUnit");

                    b.Property<string>("PromotionItemID");

                    b.Property<int>("Quantity");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BookingPromotionID");

                    b.ToTable("BookingPromotionItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.Promotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal>("DiscountTransfer")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ProjectID");

                    b.Property<string>("PromotionName");

                    b.Property<string>("PromotionNo");

                    b.Property<string>("PromotionType");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("UsageStatus");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Promotion","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionCard", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ProductNameEN");

                    b.Property<string>("ProductNameTH");

                    b.Property<Guid>("PromotionCardItemID");

                    b.Property<Guid>("PromotionID");

                    b.Property<string>("RecieveContact");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("PromotionCardItemID");

                    b.HasIndex("PromotionID");

                    b.ToTable("PromotionCard","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionCardItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankName");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<string>("PriceUnit");

                    b.Property<string>("ProductName");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("PromotionCardItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionDelivery", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ReceiveDate");

                    b.Property<Guid>("TransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("TransferPromotionID");

                    b.ToTable("PromotionDelivery","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionDeliveryItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("EstimateRecieveDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("PromotionDeliveryID");

                    b.Property<string>("PromotionItemID");

                    b.Property<int>("Quantity");

                    b.Property<string>("Remark");

                    b.Property<string>("SerialNo");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("PromotionDeliveryID");

                    b.ToTable("PromotionDeliveryItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("HousePlan");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ProductNameEN");

                    b.Property<string>("ProductNameTH");

                    b.Property<Guid>("PromotionID");

                    b.Property<Guid>("PromotionItemID");

                    b.Property<string>("PromotionType");

                    b.Property<int>("Quantity");

                    b.Property<string>("RecieveContact");

                    b.Property<int>("RecieveDate");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<string>("UnitEN");

                    b.Property<string>("UnitTH");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("PromotionID");

                    b.HasIndex("PromotionItemID");

                    b.ToTable("PromotionDetail","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgreementNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ItemNo");

                    b.Property<string>("MaterialCode");

                    b.Property<string>("Plant");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<string>("PriceUnit");

                    b.Property<string>("ProductName");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("PromotionItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionMaterial", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyCode");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Plant");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<string>("PriceUnit");

                    b.Property<string>("ProductBrand");

                    b.Property<string>("ProductNameEN");

                    b.Property<string>("ProductNameTH");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("PromotionMaterial","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionPreSale", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyCode");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Plant");

                    b.Property<Guid>("ProjectID");

                    b.Property<string>("PromotionCode");

                    b.Property<string>("PromotionName");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("UsageStatus");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.ToTable("PromotionPreSale","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionPreSaleDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("HousePlan");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ProductNameEN");

                    b.Property<string>("ProductNameTH");

                    b.Property<Guid>("PromotionItemID");

                    b.Property<Guid>("PromotionPreSaleID");

                    b.Property<string>("PromotionType");

                    b.Property<decimal>("Quantity");

                    b.Property<string>("RecieveContact");

                    b.Property<int>("RecieveDate");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<string>("UnitEN");

                    b.Property<string>("UnitTH");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("PromotionItemID");

                    b.HasIndex("PromotionPreSaleID");

                    b.ToTable("PromotionPreSaleDetail","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionReceive", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ReceiveDate");

                    b.Property<Guid>("TransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("TransferPromotionID");

                    b.ToTable("PromotionReceive","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionReceiveItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("EstimateRecieveDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PRNo");

                    b.Property<string>("PromotionItemID");

                    b.Property<Guid>("PromotionReceiveID");

                    b.Property<int>("Quantity");

                    b.Property<string>("Remark");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("PromotionReceiveID");

                    b.ToTable("PromotionReceiveItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionSubDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("PromotionDetailID");

                    b.Property<Guid?>("PromotionItemID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("PromotionDetailID");

                    b.HasIndex("PromotionItemID");

                    b.ToTable("PromotionSubDetail","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationBookingPromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("PromotionID");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("QuotationID");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("PromotionID");

                    b.HasIndex("QuotationID");

                    b.ToTable("QuotationBookingPromotion","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationBookingPromotionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<string>("PriceUnit");

                    b.Property<string>("PromotionItemID");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("QuotationBookingPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("QuotationBookingPromotionID");

                    b.ToTable("QuotationBookingPromotionItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationPromotionExpense", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("QuotationBookingPromotionID");

                    b.Property<int>("ResponsibleBy");

                    b.Property<string>("UnitPriceItemKey");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("QuotationBookingPromotionID");

                    b.ToTable("QuotationPromotionExpense","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationTransferPromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Advisor");

                    b.Property<decimal>("Budget")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal>("DiscountContact")
                        .HasColumnType("Money");

                    b.Property<decimal>("DiscountFGF")
                        .HasColumnType("Money");

                    b.Property<decimal>("DiscountTransfer")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("QuotationID");

                    b.Property<string>("QuotationNo");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("TransferDate");

                    b.Property<string>("TransferType");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("QuotationID");

                    b.ToTable("QuotationTransferPromotion","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationTransferPromotionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<string>("PriceUnit");

                    b.Property<string>("PromotionItemID");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("QuotationTransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("QuotationTransferPromotionID");

                    b.ToTable("QuotationTransferPromotionItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Advisor");

                    b.Property<Guid>("BookingID");

                    b.Property<string>("BookingNo");

                    b.Property<decimal>("Budget")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal>("DiscountContact")
                        .HasColumnType("Money");

                    b.Property<decimal>("DiscountFGF")
                        .HasColumnType("Money");

                    b.Property<decimal>("DiscountTransfer")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("TransferDate");

                    b.Property<string>("TransferType");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.ToTable("TransferPromotion","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionExpense", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingPriceItemKey");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ResponsibleBy");

                    b.Property<Guid>("TransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("TransferPromotionID");

                    b.ToTable("TransferPromotionExpense","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<string>("PriceUnit");

                    b.Property<string>("PromotionItemID");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("TransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("TransferPromotionID");

                    b.ToTable("TransferPromotionItem","PRM");
                });

            modelBuilder.Entity("Database.Models.SAL.Agreement", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActiveUnitPriceID");

                    b.Property<string>("AgreementNo");

                    b.Property<string>("AgreementStatus");

                    b.Property<string>("ApproveStatus");

                    b.Property<Guid?>("BookingID");

                    b.Property<Guid?>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("SignAgreementDate");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ActiveUnitPriceID");

                    b.HasIndex("BookingID");

                    b.HasIndex("ContactID");

                    b.HasIndex("UnitID");

                    b.ToTable("Agreement","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementDownPeriod", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgreementID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Detail");

                    b.Property<string>("DownNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("PayDate");

                    b.Property<DateTime?>("ScheduleDate");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("AgreementID");

                    b.ToTable("AgreementDownPeriod","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementOwner", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgreementID");

                    b.Property<Guid>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("OwnerType");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("AgreementID");

                    b.HasIndex("ContactID");

                    b.ToTable("AgreementOwner","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.Booking", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActiveUnitPriceID");

                    b.Property<Guid?>("AgencyID");

                    b.Property<DateTime?>("ApproveDate");

                    b.Property<string>("BookingNo");

                    b.Property<string>("BookingPaymentStatus");

                    b.Property<string>("BookingStatus");

                    b.Property<string>("BookingType");

                    b.Property<Guid>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("SaleAtProjectID");

                    b.Property<Guid?>("SaleID");

                    b.Property<DateTime?>("SignBookedDate");

                    b.Property<DateTime?>("SignContractDate");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ActiveUnitPriceID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("ContactID");

                    b.HasIndex("SaleAtProjectID");

                    b.HasIndex("SaleID");

                    b.HasIndex("UnitID");

                    b.ToTable("Booking","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.BookingOwner", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BookingID");

                    b.Property<Guid?>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.HasIndex("ContactID");

                    b.ToTable("BookingOwner","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.MortgageWithBank", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ApprovedAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("ApprovedLoadAPAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("BankID");

                    b.Property<string>("ChoseBankOtherReason");

                    b.Property<string>("ChosenBankReason");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<decimal>("FirstDeductAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("Interest")
                        .HasColumnType("Money");

                    b.Property<decimal>("InterestOnFire")
                        .HasColumnType("Money");

                    b.Property<bool>("IsChosenBankStatus");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("Money");

                    b.Property<string>("LoanStatus");

                    b.Property<DateTime?>("LoanSubmitDate");

                    b.Property<DateTime?>("ReceiveDate");

                    b.Property<string>("Remark");

                    b.Property<decimal>("ReturnCustomerAmount")
                        .HasColumnType("Money");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.ToTable("MortgageWithBank","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.Quotation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ContractSignDate");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("IssueDate");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("TransferOwnershipDate");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("UnitID");

                    b.ToTable("Quotation","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.QuotationCompare", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("UnitID");

                    b.ToTable("QuotationCompare","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.QuotationUnitPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<Guid>("BookingID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.ToTable("QuotationUnitPrice","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.QuotationUnitPriceItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("Installment");

                    b.Property<int?>("InstallmentPeriod");

                    b.Property<string>("InstallmentPeriodKey");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSpecialInstallmentPeriod");

                    b.Property<bool>("IsToBePay");

                    b.Property<string>("Key");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int>("PriceType");

                    b.Property<Guid>("QuotationID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("QuotationID");

                    b.ToTable("QuotationUnitPriceItem","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TitledeedReceive", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("FIProceedDate");

                    b.Property<string>("FIStatus");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LCProceedDate");

                    b.Property<string>("LCStatus");

                    b.Property<string>("Status");

                    b.Property<Guid>("TitledeedDetailID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("TitledeedDetailID");

                    b.ToTable("TitledeedReceive","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TitledeedReceiveHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActorUserID");

                    b.Property<string>("ChangedStatus");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PreviousStatus");

                    b.Property<DateTime>("ProceedDate");

                    b.Property<Guid>("TitledeedReceiveID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ActorUserID");

                    b.HasIndex("TitledeedReceiveID");

                    b.ToTable("TitledeedReceiveHistory","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.Transfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualTransferDate");

                    b.Property<Guid?>("AgreementID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LCID");

                    b.Property<DateTime?>("ScheduleTransferDate");

                    b.Property<string>("TransferNo");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("AgreementID");

                    b.HasIndex("LCID");

                    b.HasIndex("UnitID");

                    b.ToTable("Transfer","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferCash", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PayDate");

                    b.Property<int>("PayTo");

                    b.Property<string>("Remark");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("Money");

                    b.Property<Guid>("TransferID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("TransferID");

                    b.ToTable("TransferCash","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferCheque", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<string>("ChequeNo");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PayDate");

                    b.Property<int>("PayTo");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("Money");

                    b.Property<Guid>("TransferID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("TransferID");

                    b.ToTable("TransferCheque","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferDocument", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRejected");

                    b.Property<string>("Remark");

                    b.Property<Guid>("TransferID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("TransferID");

                    b.ToTable("TransferDocument","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferOwner", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("TransferID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("TransferID");

                    b.ToTable("TransferOwner","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferUnit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgreementID");

                    b.Property<DateTime?>("ApproveDate");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("NewUnitID");

                    b.Property<Guid?>("OldUnitID");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("AgreementID");

                    b.HasIndex("NewUnitID");

                    b.HasIndex("OldUnitID");

                    b.ToTable("TransferUnit","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.UnitPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<Guid>("BookingID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.ToTable("UnitPrice","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.UnitPriceItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DueDate");

                    b.Property<int?>("Installment");

                    b.Property<int?>("InstallmentPeriod");

                    b.Property<string>("InstallmentPeriodKey");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSpecialInstallmentPeriod");

                    b.Property<bool>("IsToBePay");

                    b.Property<string>("MasterPriceItemKey")
                        .HasMaxLength(50);

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<DateTime?>("PayDate");

                    b.Property<decimal?>("PricePerUnitAmount")
                        .HasColumnType("Money");

                    b.Property<int>("PriceType");

                    b.Property<int?>("PriceUnit");

                    b.Property<double?>("PriceUnitAmount");

                    b.Property<Guid>("UnitPriceID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("MasterPriceItemKey");

                    b.HasIndex("UnitPriceID");

                    b.ToTable("UnitPriceItem","SAL");
                });

            modelBuilder.Entity("Database.Models.USR.AuthorizeRule", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("HasAuthorize");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentRuleID");

                    b.Property<string>("Remark");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("ParentRuleID");

                    b.ToTable("AuthorizeRule","USR");
                });

            modelBuilder.Entity("Database.Models.USR.AuthorizeRuleByRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorizeRuleID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("RoleID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("AuthorizeRuleID");

                    b.HasIndex("RoleID");

                    b.ToTable("AuthorizeRuleByRole","USR");
                });

            modelBuilder.Entity("Database.Models.USR.FavoriteMenu", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("MenuID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("MenuID");

                    b.HasIndex("UserID");

                    b.ToTable("FavoriteMenu","USR");
                });

            modelBuilder.Entity("Database.Models.USR.Role", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid>("RoleGroupID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.HasIndex("RoleGroupID");

                    b.ToTable("Role","USR");
                });

            modelBuilder.Entity("Database.Models.USR.RoleGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("RoleGroup","USR");
                });

            modelBuilder.Entity("Database.Models.USR.Task", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Detail");

                    b.Property<DateTime?>("DueDate");

                    b.Property<Guid?>("FromUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<Guid>("TaskTypeID");

                    b.Property<string>("Topic");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("FromUserID");

                    b.HasIndex("TaskTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Task","USR");
                });

            modelBuilder.Entity("Database.Models.USR.TaskType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("TaskType","USR");
                });

            modelBuilder.Entity("Database.Models.USR.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Email");

                    b.Property<string>("EmployeeNo");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastActivityTime");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<string>("LastName");

                    b.Property<string>("LineId");

                    b.Property<string>("MiddleName");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePicture");

                    b.Property<Guid?>("ReportToUserID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("User","USR");
                });

            modelBuilder.Entity("Database.Models.USR.UserDefaultProject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UserID");

                    b.ToTable("UserDefaultProject","USR");
                });

            modelBuilder.Entity("Database.Models.USR.UserRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("RoleID");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRole","USR");
                });

            modelBuilder.Entity("Database.Models.WFL.Workflow", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Memo");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<bool?>("Result");

                    b.Property<string>("TemplateName");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("WorkflowTypeID");

                    b.HasKey("ID");

                    b.HasIndex("WorkflowTypeID");

                    b.ToTable("Workflow","WFL");
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowApprover", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApproverID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Memo");

                    b.Property<bool?>("Result");

                    b.Property<Guid?>("RoleID");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("WorkflowStepID");

                    b.HasKey("ID");

                    b.HasIndex("ApproverID");

                    b.HasIndex("RoleID");

                    b.HasIndex("WorkflowStepID");

                    b.ToTable("WorkflowApprover","WFL");
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowApproverTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApproverID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("RoleID");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("WorkflowStepTemplateID");

                    b.HasKey("ID");

                    b.HasIndex("ApproverID");

                    b.HasIndex("RoleID");

                    b.HasIndex("WorkflowStepTemplateID");

                    b.ToTable("WorkflowApproverTemplate","WFL");
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowStep", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApproveCondition");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("Result");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("WorkflowID");

                    b.HasKey("ID");

                    b.HasIndex("WorkflowID");

                    b.ToTable("WorkflowStep","WFL");
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowStepTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApproveCondition");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("WorkflowTemplateID");

                    b.HasKey("ID");

                    b.HasIndex("WorkflowTemplateID");

                    b.ToTable("WorkflowStepTemplate","WFL");
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("WorkflowTypeID");

                    b.HasKey("ID");

                    b.HasIndex("WorkflowTypeID");

                    b.ToTable("WorkflowTemplate","WFL");
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("ID");

                    b.ToTable("WorkflowType","WFL");
                });

            modelBuilder.Entity("Database.Models.ACC.BankAccount", b =>
                {
                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.MST.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");
                });

            modelBuilder.Entity("Database.Models.ACC.CalendarLockHistory", b =>
                {
                    b.HasOne("Database.Models.ACC.CalendarLock", "CalendarLocks")
                        .WithMany()
                        .HasForeignKey("CalendarLockID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLChartOfAccount", b =>
                {
                    b.HasOne("Database.Models.ACC.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.MST.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLDepositAccount", b =>
                {
                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.MST.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculateOther", b =>
                {
                    b.HasOne("Database.Models.USR.User", "LCUser")
                        .WithMany()
                        .HasForeignKey("LCUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculatePerMonth", b =>
                {
                    b.HasOne("Database.Models.USR.User", "LCAtProject")
                        .WithMany()
                        .HasForeignKey("LCAtProjectID");

                    b.HasOne("Database.Models.USR.User", "LCClosedDealUser")
                        .WithMany()
                        .HasForeignKey("LCClosedDealUserID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculateSale", b =>
                {
                    b.HasOne("Database.Models.USR.User", "LCAtProject")
                        .WithMany()
                        .HasForeignKey("LCAtProjectID");

                    b.HasOne("Database.Models.USR.User", "LCClosedDeal")
                        .WithMany()
                        .HasForeignKey("LCClosedDealID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculateTransfer", b =>
                {
                    b.HasOne("Database.Models.USR.User", "LCCTransfer")
                        .WithMany()
                        .HasForeignKey("LCCTransferID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");
                });

            modelBuilder.Entity("Database.Models.CTM.Contact", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "National")
                        .WithMany()
                        .HasForeignKey("NationalMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "TitleEN")
                        .WithMany()
                        .HasForeignKey("TitleENMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "TitleTH")
                        .WithMany()
                        .HasForeignKey("TitleTHMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactAddress", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "ContactAddressType")
                        .WithMany()
                        .HasForeignKey("ContactAddressTypeMasterCenterID");

                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.HasOne("Database.Models.MST.SubDistrict", "SubDistrict")
                        .WithMany()
                        .HasForeignKey("SubDistrictID");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactAddressProject", b =>
                {
                    b.HasOne("Database.Models.CTM.ContactAddress", "ContactAddress")
                        .WithMany()
                        .HasForeignKey("ContactAddressID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactEmail", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.CTM.ContactPhone", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "PhoneType")
                        .WithMany()
                        .HasForeignKey("PhoneTypeMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.CTM.Lead", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");

                    b.HasOne("Database.Models.MST.MasterCenter", "LeadType")
                        .WithMany()
                        .HasForeignKey("LeadTypeMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.MST.MasterCenter", "Social")
                        .WithMany()
                        .HasForeignKey("SocialMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadActivity", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ConvenientTime")
                        .WithMany()
                        .HasForeignKey("ConvenientTimeMasterCenterID");

                    b.HasOne("Database.Models.CTM.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.CTM.LeadActivityStatus", "LeadActivityStatus")
                        .WithMany()
                        .HasForeignKey("StatusID");
                });

            modelBuilder.Entity("Database.Models.CTM.Opportunity", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contacts")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "EstimateSalesOpportunity")
                        .WithMany()
                        .HasForeignKey("EstimateSalesOpportunityMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.MST.MasterCenter", "SalesOpportunity")
                        .WithMany()
                        .HasForeignKey("SalesOpportunityMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "StatusQuestionaire")
                        .WithMany()
                        .HasForeignKey("StatusQuestionaireMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.CTM.OpportunityActivity", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ConvenientTime")
                        .WithMany()
                        .HasForeignKey("ConvenientTimeMasterCenterID");

                    b.HasOne("Database.Models.CTM.Opportunity", "Opportunity")
                        .WithMany()
                        .HasForeignKey("OpportunityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.CTM.OpportunityActivityTrack", b =>
                {
                    b.HasOne("Database.Models.CTM.OpportunityActivity", "OpportunityAcitivity")
                        .WithMany()
                        .HasForeignKey("OpportunityAcitivityID");

                    b.HasOne("Database.Models.CTM.OpportunityActivityStatus", "OpportunityAcitivityStatus")
                        .WithMany()
                        .HasForeignKey("StatusID");
                });

            modelBuilder.Entity("Database.Models.CTM.Visitor", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ContactStatus")
                        .WithMany()
                        .HasForeignKey("ContactStatusCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.MST.MasterCenter", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "Visit")
                        .WithMany()
                        .HasForeignKey("VisitMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "WalkStatus")
                        .WithMany()
                        .HasForeignKey("WalkStatusCenterID");
                });

            modelBuilder.Entity("Database.Models.FIN.BillPayment", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");
                });

            modelBuilder.Entity("Database.Models.FIN.BillPaymentTransaction", b =>
                {
                    b.HasOne("Database.Models.FIN.BillPayment", "BillPayment")
                        .WithMany()
                        .HasForeignKey("BillPaymentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FIN.CustomerWallet", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FIN.CustomerWalletTransaction", b =>
                {
                    b.HasOne("Database.Models.FIN.CustomerWallet", "CustomerWallet")
                        .WithMany()
                        .HasForeignKey("CustomerWalletID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentTypeItem")
                        .WithMany()
                        .HasForeignKey("PaymentTypeItemID");
                });

            modelBuilder.Entity("Database.Models.FIN.Deposit", b =>
                {
                    b.HasOne("Database.Models.ACC.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitApprovalForm", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitExport", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.MST.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitTransaction", b =>
                {
                    b.HasOne("Database.Models.FIN.DirectCreditDebitUnitPriceItem", "DirectCreditDebitUnitPriceItem")
                        .WithMany()
                        .HasForeignKey("DirectCreditDebitUnitPriceItemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitUnitPriceItem", b =>
                {
                    b.HasOne("Database.Models.FIN.DirectCreditDebitApprovalForm", "DirectCreditDebitForm")
                        .WithMany()
                        .HasForeignKey("DirectCreditDebitFormID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDetail", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectDebitDetail", b =>
                {
                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");
                });

            modelBuilder.Entity("Database.Models.FIN.EDC", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("Database.Models.FIN.Payment", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentBankTransfer", b =>
                {
                    b.HasOne("Database.Models.ACC.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.FIN.UnknownPayment", "UnknownPayment")
                        .WithMany()
                        .HasForeignKey("UnknownPaymentID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentBillPayment", b =>
                {
                    b.HasOne("Database.Models.FIN.BillPaymentTransaction", "BillPaymentTransaction")
                        .WithMany()
                        .HasForeignKey("BillPaymentTransactionID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentCashierCheque", b =>
                {
                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.MST.Company", "PayToCompany")
                        .WithMany()
                        .HasForeignKey("PayToCompanyID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentCreditCard", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.FIN.EDC", "EDC")
                        .WithMany()
                        .HasForeignKey("EDCID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentCustomerWallet", b =>
                {
                    b.HasOne("Database.Models.FIN.CustomerWalletTransaction", "CustomerWalletTransaction")
                        .WithMany()
                        .HasForeignKey("CustomerWalletTransactionID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentDirectCreditDebit", b =>
                {
                    b.HasOne("Database.Models.FIN.DirectCreditDebitTransaction", "DirectCreditDebitTransaction")
                        .WithMany()
                        .HasForeignKey("DirectCreditDebitTransactionID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentForeignBankTransfer", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.FIN.UnknownPayment", "UnknownPayment")
                        .WithMany()
                        .HasForeignKey("UnknownPaymentID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentItem", b =>
                {
                    b.HasOne("Database.Models.FIN.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentMethod", b =>
                {
                    b.HasOne("Database.Models.FIN.Deposit", "Deposit")
                        .WithMany()
                        .HasForeignKey("DepositID");

                    b.HasOne("Database.Models.FIN.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentMethodToItem", b =>
                {
                    b.HasOne("Database.Models.FIN.PaymentItem", "PaymentItem")
                        .WithMany()
                        .HasForeignKey("PaymentItemID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentPersonalCheque", b =>
                {
                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.MST.Company", "PayToCompany")
                        .WithMany()
                        .HasForeignKey("PayToCompanyID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentQRCode", b =>
                {
                    b.HasOne("Database.Models.ACC.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FIN.Receipt", b =>
                {
                    b.HasOne("Database.Models.MST.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");

                    b.HasOne("Database.Models.FIN.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptSendEmailHistory", b =>
                {
                    b.HasOne("Database.Models.FIN.Receipt", "Receipt")
                        .WithMany()
                        .HasForeignKey("ReceiptID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.CTM.Contact", "SendToContact")
                        .WithMany()
                        .HasForeignKey("SendToContactID");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptSendPrintingHistory", b =>
                {
                    b.HasOne("Database.Models.FIN.Receipt", "Receipt")
                        .WithMany()
                        .HasForeignKey("ReceiptID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptTemp", b =>
                {
                    b.HasOne("Database.Models.MST.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");

                    b.HasOne("Database.Models.FIN.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID");
                });

            modelBuilder.Entity("Database.Models.FIN.UnknownPayment", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "AttachFileFromBank")
                        .WithMany()
                        .HasForeignKey("AttachFileFromBankID");

                    b.HasOne("Database.Models.ACC.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");
                });

            modelBuilder.Entity("Database.Models.LET.DownPaymentLetter", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.LET.TransferLetter", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.MST.BG", b =>
                {
                    b.HasOne("Database.Models.MST.SBU", "SBU")
                        .WithMany()
                        .HasForeignKey("SBUID");
                });

            modelBuilder.Entity("Database.Models.MST.BankBranch", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.HasOne("Database.Models.MST.SubDistrict", "SubDistrict")
                        .WithMany()
                        .HasForeignKey("SubDistrictID");
                });

            modelBuilder.Entity("Database.Models.MST.Brand", b =>
                {
                    b.HasOne("Database.Models.MST.SBU", "SBU")
                        .WithMany()
                        .HasForeignKey("SBUID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.MST.Company", b =>
                {
                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.HasOne("Database.Models.MST.SubDistrict", "SubDistrict")
                        .WithMany()
                        .HasForeignKey("SubDistrictID");
                });

            modelBuilder.Entity("Database.Models.MST.District", b =>
                {
                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.MST.MasterCenter", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenterGroup", "MasterCenterGroup")
                        .WithMany()
                        .HasForeignKey("MasterCenterGroupKey");
                });

            modelBuilder.Entity("Database.Models.MST.Menu", b =>
                {
                    b.HasOne("Database.Models.MST.MenuArea", "MenuArea")
                        .WithMany()
                        .HasForeignKey("MenuAreaID");

                    b.HasOne("Database.Models.MST.Menu", "ParentMenu")
                        .WithMany()
                        .HasForeignKey("ParentMenuID");
                });

            modelBuilder.Entity("Database.Models.MST.SubBG", b =>
                {
                    b.HasOne("Database.Models.MST.BG", "BG")
                        .WithMany()
                        .HasForeignKey("BGID");
                });

            modelBuilder.Entity("Database.Models.MST.SubDistrict", b =>
                {
                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.LandOffice", "LandOffice")
                        .WithMany()
                        .HasForeignKey("LandOfficeID");
                });

            modelBuilder.Entity("Database.Models.MST.TypeOfRealEstate", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "RealEstateCategory")
                        .WithMany()
                        .HasForeignKey("RealEstateCategoryMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.NTF.MobileInstallation", b =>
                {
                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.NTF.MobileNotification", b =>
                {
                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.NTF.WebNotification", b =>
                {
                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.OST.ContactStory", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.OST.ContactStoryGroup", "ContactStoryGroup")
                        .WithMany()
                        .HasForeignKey("ContactStoryGroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.OST.ContactStoryType", "ContactStoryType")
                        .WithMany()
                        .HasForeignKey("ContactStoryTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.OST.UnitStory", b =>
                {
                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.OST.UnitStoryGroup", "UnitStoryGroup")
                        .WithMany()
                        .HasForeignKey("UnitStoryGroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.OST.UnitStoryType", "UnitStoryType")
                        .WithMany()
                        .HasForeignKey("UnitStoryTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRJ.Address", b =>
                {
                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Database.Models.MST.SubDistrict", "HouseSubDistrct")
                        .WithMany()
                        .HasForeignKey("HouseSubDistrictID");

                    b.HasOne("Database.Models.MST.LandOffice", "LandOffice")
                        .WithMany()
                        .HasForeignKey("LandOfficeID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ProjectAddressType")
                        .WithMany()
                        .HasForeignKey("ProjectAddressTypeMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.HasOne("Database.Models.MST.SubDistrict", "SubDistrict")
                        .WithMany()
                        .HasForeignKey("SubDistrictID");

                    b.HasOne("Database.Models.MST.SubDistrict", "TitledeedSubDistrct")
                        .WithMany()
                        .HasForeignKey("TitledeedSubDistrictID");
                });

            modelBuilder.Entity("Database.Models.PRJ.AgreementConfig", b =>
                {
                    b.HasOne("Database.Models.MST.LegalEntity", "LegalEntity")
                        .WithMany()
                        .HasForeignKey("LegalEntityID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetMinPrice", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "BudgetMinPriceType")
                        .WithMany()
                        .HasForeignKey("BudgetMinPriceTypeMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetPromotion", b =>
                {
                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRJ.Floor", b =>
                {
                    b.HasOne("Database.Models.PRJ.Tower", "Tower")
                        .WithMany()
                        .HasForeignKey("TowerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRJ.FloorPlanImage", b =>
                {
                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRJ.HighRiseFee", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "CalculateParkArea")
                        .WithMany()
                        .HasForeignKey("CalculateParkAreaMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Tower", "Tower")
                        .WithMany()
                        .HasForeignKey("TowerID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");
                });

            modelBuilder.Entity("Database.Models.PRJ.LowRiseBuildingPriceFee", b =>
                {
                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");
                });

            modelBuilder.Entity("Database.Models.PRJ.LowRiseFee", b =>
                {
                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");
                });

            modelBuilder.Entity("Database.Models.PRJ.LowRiseFenceFee", b =>
                {
                    b.HasOne("Database.Models.MST.LandOffice", "LandOffice")
                        .WithMany()
                        .HasForeignKey("LandOfficeID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.TypeOfRealEstate", "TypeOfRealEstate")
                        .WithMany()
                        .HasForeignKey("TypeOfRealEstateID");
                });

            modelBuilder.Entity("Database.Models.PRJ.MinPrice", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "DocType")
                        .WithMany()
                        .HasForeignKey("DocTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "MinPriceType")
                        .WithMany()
                        .HasForeignKey("MinPriceTypeMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");
                });

            modelBuilder.Entity("Database.Models.PRJ.Model", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "ModelShortName")
                        .WithMany()
                        .HasForeignKey("ModelShortNameMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ModelType")
                        .WithMany()
                        .HasForeignKey("ModelTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ModelUnitType")
                        .WithMany()
                        .HasForeignKey("ModelUnitTypeMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.TypeOfRealEstate", "TypeOfRealEstate")
                        .WithMany()
                        .HasForeignKey("TypeOfRealEstateID");
                });

            modelBuilder.Entity("Database.Models.PRJ.OtherUnitInfoTag", b =>
                {
                    b.HasOne("Database.Models.PRJ.UnitOtherUnitInfoTag", "UnitTag")
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRJ.PriceList", b =>
                {
                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRJ.PriceListItem", b =>
                {
                    b.HasOne("Database.Models.MST.MasterPriceItem", "MasterPriceItem")
                        .WithMany()
                        .HasForeignKey("MasterPriceItemKey");

                    b.HasOne("Database.Models.PRJ.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRJ.PriceListItemTemplate", b =>
                {
                    b.HasOne("Database.Models.MST.MasterPriceItem", "MasterPriceItem")
                        .WithMany()
                        .HasForeignKey("MasterPriceItemKey");

                    b.HasOne("Database.Models.PRJ.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.PRJ.Project", b =>
                {
                    b.HasOne("Database.Models.MST.BG", "BG")
                        .WithMany()
                        .HasForeignKey("BGID");

                    b.HasOne("Database.Models.MST.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandID");

                    b.HasOne("Database.Models.MST.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("Database.Models.MST.Bank", "MortgageBank")
                        .WithMany()
                        .HasForeignKey("MortgageBankID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.SBU", "SBU")
                        .WithMany()
                        .HasForeignKey("SBUID");

                    b.HasOne("Database.Models.MST.SubBG", "SubBG")
                        .WithMany()
                        .HasForeignKey("SubBGID");
                });

            modelBuilder.Entity("Database.Models.PRJ.RoomPlanImage", b =>
                {
                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRJ.RoundFee", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "BusinessTaxRoundFormula")
                        .WithMany()
                        .HasForeignKey("BusinessTaxRoundFormulaMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "IncomeTaxRoundFormula")
                        .WithMany()
                        .HasForeignKey("IncomeTaxRoundFormulaMasterCenterID");

                    b.HasOne("Database.Models.MST.LandOffice", "LandOffice")
                        .WithMany()
                        .HasForeignKey("LandOfficeID");

                    b.HasOne("Database.Models.MST.MasterCenter", "LocalTaxRoundFormula")
                        .WithMany()
                        .HasForeignKey("LocalTaxRoundFormulaMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "TransferFeeRoundFormula")
                        .WithMany()
                        .HasForeignKey("TransferFeeRoundFormulaMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.PRJ.TitledeedDetail", b =>
                {
                    b.HasOne("Database.Models.MST.District", "HouseDistrict")
                        .WithMany()
                        .HasForeignKey("HouseDistrictID");

                    b.HasOne("Database.Models.MST.Province", "HouseProvince")
                        .WithMany()
                        .HasForeignKey("HouseProvinceID");

                    b.HasOne("Database.Models.MST.SubDistrict", "HouseSubDistrict")
                        .WithMany()
                        .HasForeignKey("HouseSubDistrictID");

                    b.HasOne("Database.Models.MST.LandOffice", "LandOffice")
                        .WithMany()
                        .HasForeignKey("LandOfficeID");

                    b.HasOne("Database.Models.MST.MasterCenter", "LandStatusMasterCenter")
                        .WithMany()
                        .HasForeignKey("LandStatusMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");
                });

            modelBuilder.Entity("Database.Models.PRJ.Tower", b =>
                {
                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("Database.Models.PRJ.Unit", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorID");

                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.PRJ.Tower", "Tower")
                        .WithMany()
                        .HasForeignKey("TowerID");

                    b.HasOne("Database.Models.MST.MasterCenter", "UnitStatus")
                        .WithMany()
                        .HasForeignKey("UnitStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.PRJ.WaiveQC", b =>
                {
                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "UnitStatus")
                        .WithMany()
                        .HasForeignKey("UnitStatusMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.PRJ.WaterElectricMeterPrice", b =>
                {
                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotion", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRM.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionExpense", b =>
                {
                    b.HasOne("Database.Models.PRM.BookingPromotion", "BookingPromotion")
                        .WithMany()
                        .HasForeignKey("BookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionItem", b =>
                {
                    b.HasOne("Database.Models.PRM.BookingPromotion", "BookingPromotion")
                        .WithMany()
                        .HasForeignKey("BookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.Promotion", b =>
                {
                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionCard", b =>
                {
                    b.HasOne("Database.Models.PRM.PromotionCardItem", "PromotionCardItem")
                        .WithMany()
                        .HasForeignKey("PromotionCardItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRM.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionDelivery", b =>
                {
                    b.HasOne("Database.Models.PRM.TransferPromotion", "TransferPromotion")
                        .WithMany()
                        .HasForeignKey("TransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionDeliveryItem", b =>
                {
                    b.HasOne("Database.Models.PRM.PromotionDelivery", "PromotionDelivery")
                        .WithMany()
                        .HasForeignKey("PromotionDeliveryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionDetail", b =>
                {
                    b.HasOne("Database.Models.PRM.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRM.PromotionItem", "PromotionItem")
                        .WithMany()
                        .HasForeignKey("PromotionItemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionPreSale", b =>
                {
                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionPreSaleDetail", b =>
                {
                    b.HasOne("Database.Models.PRM.PromotionItem", "PromotionItem")
                        .WithMany()
                        .HasForeignKey("PromotionItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRM.PromotionPreSale", "PromotionPreSale")
                        .WithMany()
                        .HasForeignKey("PromotionPreSaleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionReceive", b =>
                {
                    b.HasOne("Database.Models.PRM.TransferPromotion", "TransferPromotion")
                        .WithMany()
                        .HasForeignKey("TransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionReceiveItem", b =>
                {
                    b.HasOne("Database.Models.PRM.PromotionReceive", "PromotionReceive")
                        .WithMany()
                        .HasForeignKey("PromotionReceiveID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionSubDetail", b =>
                {
                    b.HasOne("Database.Models.PRM.PromotionDetail", "PromotionDetail")
                        .WithMany()
                        .HasForeignKey("PromotionDetailID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRM.PromotionItem", "PromotionItem")
                        .WithMany()
                        .HasForeignKey("PromotionItemID");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationBookingPromotion", b =>
                {
                    b.HasOne("Database.Models.PRM.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.SAL.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationBookingPromotionItem", b =>
                {
                    b.HasOne("Database.Models.PRM.QuotationBookingPromotion", "QuotationBookingPromotion")
                        .WithMany()
                        .HasForeignKey("QuotationBookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationPromotionExpense", b =>
                {
                    b.HasOne("Database.Models.PRM.QuotationBookingPromotion", "QuotationBookingPromotion")
                        .WithMany()
                        .HasForeignKey("QuotationBookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationTransferPromotion", b =>
                {
                    b.HasOne("Database.Models.SAL.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationTransferPromotionItem", b =>
                {
                    b.HasOne("Database.Models.PRM.QuotationTransferPromotion", "QuotationTransferPromotion")
                        .WithMany()
                        .HasForeignKey("QuotationTransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotion", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionExpense", b =>
                {
                    b.HasOne("Database.Models.PRM.TransferPromotion", "TransferPromotion")
                        .WithMany()
                        .HasForeignKey("TransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionItem", b =>
                {
                    b.HasOne("Database.Models.PRM.TransferPromotion", "TransferPromotion")
                        .WithMany()
                        .HasForeignKey("TransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.Agreement", b =>
                {
                    b.HasOne("Database.Models.SAL.UnitPrice", "ActiveUnitPrice")
                        .WithMany()
                        .HasForeignKey("ActiveUnitPriceID");

                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementDownPeriod", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementOwner", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.Booking", b =>
                {
                    b.HasOne("Database.Models.SAL.UnitPrice", "ActiveUnitPrice")
                        .WithMany()
                        .HasForeignKey("ActiveUnitPriceID");

                    b.HasOne("Database.Models.USR.User", "AgencyUserID")
                        .WithMany()
                        .HasForeignKey("AgencyID");

                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "SaleAtProjectUserID")
                        .WithMany()
                        .HasForeignKey("SaleAtProjectID");

                    b.HasOne("Database.Models.USR.User", "SaleUserID")
                        .WithMany()
                        .HasForeignKey("SaleID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.BookingOwner", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");
                });

            modelBuilder.Entity("Database.Models.SAL.MortgageWithBank", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");
                });

            modelBuilder.Entity("Database.Models.SAL.Quotation", b =>
                {
                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.QuotationCompare", b =>
                {
                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.QuotationUnitPrice", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.QuotationUnitPriceItem", b =>
                {
                    b.HasOne("Database.Models.SAL.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.TitledeedReceive", b =>
                {
                    b.HasOne("Database.Models.PRJ.TitledeedDetail", "TitledeedDetail")
                        .WithMany()
                        .HasForeignKey("TitledeedDetailID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.TitledeedReceiveHistory", b =>
                {
                    b.HasOne("Database.Models.USR.User", "ActorUser")
                        .WithMany()
                        .HasForeignKey("ActorUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.SAL.TitledeedReceive", "TitledeedReceive")
                        .WithMany()
                        .HasForeignKey("TitledeedReceiveID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.Transfer", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID");

                    b.HasOne("Database.Models.USR.User", "LC")
                        .WithMany()
                        .HasForeignKey("LCID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferCash", b =>
                {
                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.SAL.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.TransferCheque", b =>
                {
                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.SAL.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.TransferDocument", b =>
                {
                    b.HasOne("Database.Models.SAL.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.TransferOwner", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.SAL.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.TransferUnit", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID");

                    b.HasOne("Database.Models.PRJ.Unit", "NewUnit")
                        .WithMany()
                        .HasForeignKey("NewUnitID");

                    b.HasOne("Database.Models.PRJ.Unit", "OldUnit")
                        .WithMany()
                        .HasForeignKey("OldUnitID");
                });

            modelBuilder.Entity("Database.Models.SAL.UnitPrice", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.SAL.UnitPriceItem", b =>
                {
                    b.HasOne("Database.Models.MST.MasterPriceItem", "MasterPriceItem")
                        .WithMany()
                        .HasForeignKey("MasterPriceItemKey");

                    b.HasOne("Database.Models.SAL.UnitPrice", "UnitPrice")
                        .WithMany()
                        .HasForeignKey("UnitPriceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.USR.AuthorizeRule", b =>
                {
                    b.HasOne("Database.Models.USR.AuthorizeRule", "ParentRule")
                        .WithMany()
                        .HasForeignKey("ParentRuleID");
                });

            modelBuilder.Entity("Database.Models.USR.AuthorizeRuleByRole", b =>
                {
                    b.HasOne("Database.Models.USR.AuthorizeRule", "AuthorizeRule")
                        .WithMany()
                        .HasForeignKey("AuthorizeRuleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.USR.FavoriteMenu", b =>
                {
                    b.HasOne("Database.Models.MST.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.USR.Role", b =>
                {
                    b.HasOne("Database.Models.USR.RoleGroup", "RoleGroup")
                        .WithMany()
                        .HasForeignKey("RoleGroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.USR.Task", b =>
                {
                    b.HasOne("Database.Models.USR.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserID");

                    b.HasOne("Database.Models.USR.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Database.Models.USR.UserDefaultProject", b =>
                {
                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.USR.UserRole", b =>
                {
                    b.HasOne("Database.Models.USR.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.WFL.Workflow", b =>
                {
                    b.HasOne("Database.Models.WFL.WorkflowType", "WorkflowType")
                        .WithMany()
                        .HasForeignKey("WorkflowTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowApprover", b =>
                {
                    b.HasOne("Database.Models.USR.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverID");

                    b.HasOne("Database.Models.USR.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("Database.Models.WFL.WorkflowStep", "WorkflowStep")
                        .WithMany()
                        .HasForeignKey("WorkflowStepID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowApproverTemplate", b =>
                {
                    b.HasOne("Database.Models.USR.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverID");

                    b.HasOne("Database.Models.USR.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("Database.Models.WFL.WorkflowStepTemplate", "WorkflowStepTemplate")
                        .WithMany()
                        .HasForeignKey("WorkflowStepTemplateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowStep", b =>
                {
                    b.HasOne("Database.Models.WFL.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowStepTemplate", b =>
                {
                    b.HasOne("Database.Models.WFL.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkflowTemplateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowTemplate", b =>
                {
                    b.HasOne("Database.Models.WFL.WorkflowType", "WorkflowType")
                        .WithMany()
                        .HasForeignKey("WorkflowTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
