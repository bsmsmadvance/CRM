// <auto-generated />
using System;
using Database.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Models.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20190925072449_CreateDeductMoneyTable")]
    partial class CreateDeductMoneyTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Models.ACC.CalendarLock", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsLocked");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime>("LockDate");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("CalendarLock","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.CalendarLockHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CalendarLockID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CalendarLockID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("UserID");

                    b.ToTable("CalendarLockHistory","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.GLDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankAccount");

                    b.Property<string>("Category");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal>("DebitCreditAmount")
                        .HasColumnType("Money");

                    b.Property<string>("Detail");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("OperationDate");

                    b.Property<string>("PostBy");

                    b.Property<DateTime?>("PostDate");

                    b.Property<string>("PostID");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("GLDetail","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.GLExport", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BatchID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("ExportBy");

                    b.Property<DateTime?>("ExportDate");

                    b.Property<string>("FileName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("GLExport","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Description");

                    b.Property<string>("DocCode");

                    b.Property<Guid?>("FormatTextFileID");

                    b.Property<string>("GLAccountNo");

                    b.Property<string>("GLType");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FormatTextFileID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PostGLAccount","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLChartOfAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountName");

                    b.Property<string>("AccountType");

                    b.Property<string>("AccountTypeGroup");

                    b.Property<Guid?>("BankAccountID");

                    b.Property<Guid?>("BankID");

                    b.Property<Guid?>("CompanyID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("GLAccountID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID");

                    b.HasIndex("BankID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PostGLChartOfAccount","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLDepositAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankAccountNo");

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<Guid?>("CompanyID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("GLAccountID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<bool>("isBankTransfer");

                    b.Property<bool>("isDepositAccount");

                    b.Property<bool>("isDirectCredit");

                    b.Property<bool>("isDirectDebit");

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PostGLDepositAccount","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLFormatTextFile", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColumnName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("FixValue")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("PostingKey")
                        .HasMaxLength(10);

                    b.Property<string>("PostingType")
                        .HasMaxLength(10);

                    b.Property<int>("Seq");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PostGLFormatTextFile","ACC");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLHouseType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("GLAccountID");

                    b.Property<string>("HouseType");

                    b.Property<string>("IncomeAccountName");

                    b.Property<string>("IncomeAccountNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PostGLHouseType","ACC");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculateOther", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime?>("DeductDate");

                    b.Property<DateTime?>("EffectiveDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LCUserID");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<string>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LCUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("CalculateOther","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculatePerMonth", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CommissionForThisMonth")
                        .HasColumnType("Money");

                    b.Property<decimal>("ContractValue")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LCAtProjectID");

                    b.Property<string>("LCC");

                    b.Property<Guid?>("LCClosedDealUserID");

                    b.Property<decimal>("NewLaunchAtProject")
                        .HasColumnType("Money");

                    b.Property<decimal>("NewLaunchClosedDeal")
                        .HasColumnType("Money");

                    b.Property<decimal>("NewLaunchTotalCommission")
                        .HasColumnType("Money");

                    b.Property<decimal>("NewRate");

                    b.Property<decimal>("Rate");

                    b.Property<decimal>("SaleCommissionLCCenter")
                        .HasColumnType("Money");

                    b.Property<decimal>("SigningContractCommission")
                        .HasColumnType("Money");

                    b.Property<decimal>("TransferAtProjectCommission")
                        .HasColumnType("Money");

                    b.Property<decimal>("TransferClosedDealCommission")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("TransferDate");

                    b.Property<decimal>("TransferTotalCommission")
                        .HasColumnType("Money");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LCAtProjectID");

                    b.HasIndex("LCClosedDealUserID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("CalculatePerMonth","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculateSale", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AtProjectCommission")
                        .HasColumnType("Money");

                    b.Property<decimal>("ClosedDealCommission")
                        .HasColumnType("Money");

                    b.Property<decimal>("CommissionForThisMonth")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("ContractApprovedDate");

                    b.Property<decimal>("ContractValue")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LCAtProjectID");

                    b.Property<string>("LCCenter");

                    b.Property<Guid?>("LCClosedDealID");

                    b.Property<decimal>("Rate");

                    b.Property<decimal>("SaleCommissionLCCenter")
                        .HasColumnType("Money");

                    b.Property<decimal>("TotalCommission")
                        .HasColumnType("Money");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LCAtProjectID");

                    b.HasIndex("LCClosedDealID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("CalculateSale","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculateTransfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ActualContractTransfer")
                        .HasColumnType("Money");

                    b.Property<decimal>("CommissionForThisMonth")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LCCTransferID");

                    b.Property<string>("LCCenterTransfer");

                    b.Property<decimal>("LCCenterTransferCommission")
                        .HasColumnType("Money");

                    b.Property<decimal>("Rate");

                    b.Property<decimal>("TransferCommission")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("TransferDate");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LCCTransferID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("CalculateTransfer","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.ChangeLCSale", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<Guid?>("ContractID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("NewAgentEmployeeID");

                    b.Property<Guid?>("NewAgentID");

                    b.Property<Guid?>("NewProjectSaleUserID");

                    b.Property<Guid?>("NewSaleOfficerTypeMasterCenterID");

                    b.Property<Guid?>("NewSaleUserID");

                    b.Property<Guid?>("OldAgentEmployeeID");

                    b.Property<Guid?>("OldAgentID");

                    b.Property<Guid?>("OldProjectSaleUserID");

                    b.Property<Guid?>("OldSaleOfficerTypeMasterCenterID");

                    b.Property<Guid?>("OldSaleUserID");

                    b.Property<string>("Remark");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ContractID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("NewAgentEmployeeID");

                    b.HasIndex("NewAgentID");

                    b.HasIndex("NewProjectSaleUserID");

                    b.HasIndex("NewSaleOfficerTypeMasterCenterID");

                    b.HasIndex("NewSaleUserID");

                    b.HasIndex("OldAgentEmployeeID");

                    b.HasIndex("OldAgentID");

                    b.HasIndex("OldProjectSaleUserID");

                    b.HasIndex("OldSaleOfficerTypeMasterCenterID");

                    b.HasIndex("OldSaleUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ChangeLCSale","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.ChangeLCTransfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("NewLCTransferID");

                    b.Property<Guid?>("OldLCTransferID");

                    b.Property<string>("Remark");

                    b.Property<Guid?>("TransferID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("NewLCTransferID");

                    b.HasIndex("OldLCTransferID");

                    b.HasIndex("TransferID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ChangeLCTransfer","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.DeductMoney", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("SaleUserID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("SaleUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("DeductMoney","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.GeneralSetting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal>("AfterLaunchAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("LaunchEndDate");

                    b.Property<DateTime?>("LaunchStartDate");

                    b.Property<Guid?>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("GeneralSetting","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.IncreaseMoney", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("SaleUserID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("SaleUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("IncreaseMoney","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingAgent", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<Guid?>("AgentID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AgentID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RateSettingAgent","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingFixSale", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RateSettingFixSale","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingFixSaleModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ModelID");

                    b.Property<Guid?>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModelID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RateSettingFixSaleModel","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingFixTransfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RateSettingFixTransfer","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingFixTransferModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ModelID");

                    b.Property<Guid?>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModelID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RateSettingFixTransferModel","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingSale", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal>("Amount");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal>("EndRange")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ProjectID");

                    b.Property<decimal>("StartRange")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RateSettingSale","CMS");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingTransfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal>("Amount");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal>("EndRange")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ProjectID");

                    b.Property<decimal>("StartRange")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RateSettingTransfer","CMS");
                });

            modelBuilder.Entity("Database.Models.CTM.ActivityTask", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActivityTaskOverdueStatusMasterCenterID");

                    b.Property<Guid?>("ActivityTaskStatusMasterCenterID");

                    b.Property<Guid?>("ActivityTaskTopicMasterCenterID");

                    b.Property<Guid?>("ActivityTaskTypeMasterCenterID");

                    b.Property<string>("ActivityTypeName")
                        .HasMaxLength(100);

                    b.Property<string>("ContactFirstName")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactLastName")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime?>("DueDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LeadActivityID");

                    b.Property<Guid?>("OpportunityActivityID");

                    b.Property<int>("OverdueDays");

                    b.Property<Guid?>("OwnerID");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ProjectID");

                    b.Property<int>("RepeatCount");

                    b.Property<Guid?>("RevisitActivityID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ActivityTaskOverdueStatusMasterCenterID");

                    b.HasIndex("ActivityTaskStatusMasterCenterID");

                    b.HasIndex("ActivityTaskTopicMasterCenterID");

                    b.HasIndex("ActivityTaskTypeMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LeadActivityID");

                    b.HasIndex("OpportunityActivityID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("RevisitActivityID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ActivityTask","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.ActivityTaskUpdateOverdueJob", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Params");

                    b.Property<double>("Progress");

                    b.Property<string>("ResponseMessage");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ActivityTaskUpdateOverdueJob","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.Contact", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<DateTime?>("CitizenExpireDate");

                    b.Property<string>("CitizenIdentityNo")
                        .HasMaxLength(50);

                    b.Property<string>("ContactFirstName")
                        .HasMaxLength(100);

                    b.Property<string>("ContactLastname")
                        .HasMaxLength(100);

                    b.Property<string>("ContactNo");

                    b.Property<Guid?>("ContactTitleENMasterCenterID");

                    b.Property<Guid?>("ContactTitleTHMasterCenterID");

                    b.Property<Guid?>("ContactTypeMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100);

                    b.Property<string>("FatherNational")
                        .HasMaxLength(100);

                    b.Property<string>("FatherOtherNational")
                        .HasMaxLength(100);

                    b.Property<string>("FirstNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("FirstNameTH")
                        .HasMaxLength(100);

                    b.Property<Guid?>("GenderMasterCenterID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsThaiNationality");

                    b.Property<bool>("IsUsed");

                    b.Property<bool>("IsVIP");

                    b.Property<string>("LastNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("LastNameTH")
                        .HasMaxLength(100);

                    b.Property<Guid?>("LastOpportunityID");

                    b.Property<string>("LineID")
                        .HasMaxLength(100);

                    b.Property<string>("MarriageName")
                        .HasMaxLength(100);

                    b.Property<string>("MarriageNational")
                        .HasMaxLength(100);

                    b.Property<string>("MarriageOtherNational")
                        .HasMaxLength(100);

                    b.Property<string>("MiddleNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("MiddleNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("MotherName")
                        .HasMaxLength(100);

                    b.Property<string>("MotherNational")
                        .HasMaxLength(100);

                    b.Property<string>("MotherOtherNational")
                        .HasMaxLength(100);

                    b.Property<Guid?>("NationalMasterCenterID");

                    b.Property<string>("Nickname")
                        .HasMaxLength(100);

                    b.Property<int>("OpportunityCount");

                    b.Property<int>("Order");

                    b.Property<string>("OtherNationalEN")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherNationalTH")
                        .HasMaxLength(1000);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumberExt")
                        .HasMaxLength(50);

                    b.Property<string>("TaxID")
                        .HasMaxLength(100);

                    b.Property<string>("TitleExtEN")
                        .HasMaxLength(100);

                    b.Property<string>("TitleExtTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("WeChatID")
                        .HasMaxLength(100);

                    b.Property<string>("WhatsAppID")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("ContactTitleENMasterCenterID");

                    b.HasIndex("ContactTitleTHMasterCenterID");

                    b.HasIndex("ContactTypeMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("GenderMasterCenterID");

                    b.HasIndex("LastOpportunityID");

                    b.HasIndex("NationalMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Contact","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactAddress", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContactAddressTypeMasterCenterID");

                    b.Property<Guid>("ContactID");

                    b.Property<Guid?>("CountryID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("ForeignDistrict")
                        .HasMaxLength(100);

                    b.Property<string>("ForeignProvince")
                        .HasMaxLength(100);

                    b.Property<string>("ForeignSubDistrict")
                        .HasMaxLength(100);

                    b.Property<string>("HouseNoEN")
                        .HasMaxLength(100);

                    b.Property<string>("HouseNoTH")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("MooEN")
                        .HasMaxLength(100);

                    b.Property<string>("MooTH")
                        .HasMaxLength(100);

                    b.Property<string>("OtherCountryEN")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherCountryTH")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherProvinceEN")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherProvinceTH")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherSubDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherSubDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProvinceID");

                    b.Property<string>("RoadEN")
                        .HasMaxLength(100);

                    b.Property<string>("RoadTH")
                        .HasMaxLength(100);

                    b.Property<string>("SoiEN")
                        .HasMaxLength(100);

                    b.Property<string>("SoiTH")
                        .HasMaxLength(100);

                    b.Property<Guid?>("SubDistrictID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("VillageEN")
                        .HasMaxLength(1000);

                    b.Property<string>("VillageTH")
                        .HasMaxLength(1000);

                    b.HasKey("ID");

                    b.HasIndex("ContactAddressTypeMasterCenterID");

                    b.HasIndex("ContactID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("SubDistrictID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ContactAddress","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactAddressProject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContactAddressID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ContactAddressID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ContactAddressProject","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactEmail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsMain");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ContactEmail","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactPhone", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContactID");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsMain");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumberExt")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PhoneTypeMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PhoneTypeMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ContactPhone","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.Lead", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AdvertisementMasterCenterID");

                    b.Property<string>("BuyReason")
                        .HasMaxLength(5000);

                    b.Property<bool?>("CallBack");

                    b.Property<string>("CampaignID")
                        .HasMaxLength(100);

                    b.Property<string>("CitizenIdentityNo")
                        .HasMaxLength(50);

                    b.Property<string>("Compaign")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ContactID");

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("CurrentLeadActivityStatusID");

                    b.Property<string>("District")
                        .HasMaxLength(100);

                    b.Property<string>("DistrictOfWorking")
                        .HasMaxLength(1000);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<string>("HouseNo")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsMailSendedToLC");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<double?>("LeadScore");

                    b.Property<Guid?>("LeadStatusMasterCenterID");

                    b.Property<Guid?>("LeadTypeMasterCenterID");

                    b.Property<DateTime?>("LeadVisitDate");

                    b.Property<string>("LeadVisitTime")
                        .HasMaxLength(1000);

                    b.Property<string>("Moo")
                        .HasMaxLength(100);

                    b.Property<string>("NumberOfContact")
                        .HasMaxLength(1000);

                    b.Property<string>("NumberOfPerson")
                        .HasMaxLength(1000);

                    b.Property<string>("NumberOfUnit")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("OwnerID");

                    b.Property<string>("Payment")
                        .HasMaxLength(1000);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("Province")
                        .HasMaxLength(100);

                    b.Property<string>("ProvinceOfWorking")
                        .HasMaxLength(1000);

                    b.Property<string>("RefID")
                        .HasMaxLength(100);

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<string>("Road")
                        .HasMaxLength(100);

                    b.Property<string>("RoomSize")
                        .HasMaxLength(1000);

                    b.Property<string>("RoomType")
                        .HasMaxLength(1000);

                    b.Property<string>("Soi")
                        .HasMaxLength(100);

                    b.Property<string>("SubDistrict")
                        .HasMaxLength(100);

                    b.Property<string>("SubLeadType")
                        .HasMaxLength(100);

                    b.Property<string>("Telephone")
                        .HasMaxLength(50);

                    b.Property<string>("TelephoneExt")
                        .HasMaxLength(50);

                    b.Property<string>("UTMCampaign")
                        .HasMaxLength(1000);

                    b.Property<string>("UTMMedium")
                        .HasMaxLength(1000);

                    b.Property<string>("UTMSource")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("Village")
                        .HasMaxLength(100);

                    b.Property<string>("VisitZone")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("AdvertisementMasterCenterID");

                    b.HasIndex("ContactID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("CurrentLeadActivityStatusID");

                    b.HasIndex("LeadStatusMasterCenterID");

                    b.HasIndex("LeadTypeMasterCenterID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Lead","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadActivity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualDate");

                    b.Property<DateTime?>("AppointmentDate");

                    b.Property<Guid?>("ConvenientTimeMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("DueDate");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFollowUpActivity");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LeadActivityTypeMasterCenterID");

                    b.Property<Guid>("LeadID");

                    b.Property<DateTime?>("StatusDueDate");

                    b.Property<Guid?>("StatusID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ConvenientTimeMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LeadActivityTypeMasterCenterID");

                    b.HasIndex("LeadID");

                    b.HasIndex("StatusID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("LeadActivity","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadActivityStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LeadActivityFollowUpTypeMasterCenterID");

                    b.Property<Guid?>("LeadActivityStatusTypeMasterCenterID");

                    b.Property<int>("Order");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LeadActivityFollowUpTypeMasterCenterID");

                    b.HasIndex("LeadActivityStatusTypeMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("LeadActivityStatus","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadAssign", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsAssignByUser");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LeadID");

                    b.Property<Guid?>("OwnerID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LeadID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("LeadAssign","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadScoring", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsGetScore");

                    b.Property<bool>("IsLatestScore");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LeadID");

                    b.Property<Guid?>("LeadScoringTypeID");

                    b.Property<double>("Score");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LeadID");

                    b.HasIndex("LeadScoringTypeID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("LeadScoring","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadScoringType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<int>("Order");

                    b.Property<double>("Score");

                    b.Property<string>("Topic")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("LeadScoringType","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadSyncJob", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Params");

                    b.Property<double>("Progress");

                    b.Property<string>("ResponseMessage");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("LeadSyncJob","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.Opportunity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArriveDate");

                    b.Property<string>("BuyReason")
                        .HasMaxLength(1000);

                    b.Property<Guid>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("EstimateSalesOpportunityMasterCenterID");

                    b.Property<string>("InterestedProduct1")
                        .HasMaxLength(1000);

                    b.Property<string>("InterestedProduct2")
                        .HasMaxLength(1000);

                    b.Property<string>("InterestedProduct3")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LastOpportunityActivityID");

                    b.Property<Guid?>("OwnerID");

                    b.Property<int>("ProductQTY");

                    b.Property<string>("ProjectCompare")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("ProjectID");

                    b.Property<DateTime?>("QuestionaireDate");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<int>("RevisitActivityCount");

                    b.Property<Guid?>("SalesOpportunityMasterCenterID");

                    b.Property<Guid?>("StatusQuestionaireMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("EstimateSalesOpportunityMasterCenterID");

                    b.HasIndex("LastOpportunityActivityID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("SalesOpportunityMasterCenterID");

                    b.HasIndex("StatusQuestionaireMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Opportunity","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.OpportunityActivity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualDate");

                    b.Property<DateTime?>("AppointmentDate");

                    b.Property<Guid?>("ConvenientTimeMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("DueDate");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("OpportunityActivityTypeMasterCenterID");

                    b.Property<Guid>("OpportunityID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ConvenientTimeMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("OpportunityActivityTypeMasterCenterID");

                    b.HasIndex("OpportunityID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("OpportunityActivity","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.OpportunityActivityResult", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("OpportunityAcitivityID");

                    b.Property<string>("OtherReasons")
                        .HasMaxLength(5000);

                    b.Property<Guid?>("StatusID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("OpportunityAcitivityID");

                    b.HasIndex("StatusID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("OpportunityActivityResult","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.OpportunityActivityStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<int>("Order");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid?>("WalkActivityStatusTypeMasterCenterId");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WalkActivityStatusTypeMasterCenterId");

                    b.ToTable("OpportunityActivityStatus","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.OpportunityAssign", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("OpportunityID");

                    b.Property<Guid?>("OwnerID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("OpportunityID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("OpportunityAssign","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.ProjectVisitCounterSetting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ProjectID");

                    b.Property<int>("ResetCounter");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ProjectVisitCounterSetting","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.RevisitActivity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualDate");

                    b.Property<DateTime?>("AppointmentDate");

                    b.Property<Guid?>("ConvenientTimeMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("OpportunityID");

                    b.Property<Guid?>("RevisitActivityTypeMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ConvenientTimeMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("OpportunityID");

                    b.HasIndex("RevisitActivityTypeMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RevisitActivity","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.RevisitActivityResult", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("OtherReasons")
                        .HasMaxLength(5000);

                    b.Property<Guid?>("RevisitAcitivityID");

                    b.Property<Guid?>("StatusID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("RevisitAcitivityID");

                    b.HasIndex("StatusID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RevisitActivityResult","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.RevisitActivityStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<int>("Order");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RevisitActivityStatus","CTM");
                });

            modelBuilder.Entity("Database.Models.CTM.Visitor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("BloodType")
                        .HasMaxLength(50);

                    b.Property<string>("CitizenIdentityNo")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ContactID");

                    b.Property<Guid?>("ContactStatusMasterCenterID");

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("District")
                        .HasMaxLength(100);

                    b.Property<string>("FirstNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("FirstNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .HasMaxLength(50);

                    b.Property<string>("HouseNo")
                        .HasMaxLength(100);

                    b.Property<string>("IDCardImage")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDriver");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<bool?>("IsWelcome");

                    b.Property<string>("Issue")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("IssueDate");

                    b.Property<DateTime?>("IssueExpireDate");

                    b.Property<string>("LastNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("LastNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("Moo")
                        .HasMaxLength(100);

                    b.Property<string>("National")
                        .HasMaxLength(50);

                    b.Property<Guid?>("OwnerID");

                    b.Property<Guid?>("PersonalVisitCardTypeMasterCenterID");

                    b.Property<string>("PersonalVisitImageFromCard")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("Province")
                        .HasMaxLength(100);

                    b.Property<string>("ReceiveNumber")
                        .HasMaxLength(100);

                    b.Property<Guid?>("RefVisitorID");

                    b.Property<Guid?>("RefVisitorRelationMasterCenterID");

                    b.Property<string>("Road")
                        .HasMaxLength(100);

                    b.Property<Guid?>("SalesOpportunityMasterCenterID");

                    b.Property<string>("Soi")
                        .HasMaxLength(100);

                    b.Property<string>("SubDistrict")
                        .HasMaxLength(100);

                    b.Property<string>("TitleEN")
                        .HasMaxLength(100);

                    b.Property<string>("TitleTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("VehicleBrand")
                        .HasMaxLength(1000);

                    b.Property<string>("VehicleColor")
                        .HasMaxLength(100);

                    b.Property<string>("VehicleDescription")
                        .HasMaxLength(100);

                    b.Property<Guid?>("VehicleMasterCenterID");

                    b.Property<string>("VehicleRegistrationNo")
                        .HasMaxLength(50);

                    b.Property<string>("Village")
                        .HasMaxLength(100);

                    b.Property<Guid?>("VisitByMasterCenterID");

                    b.Property<DateTime?>("VisitDateIn");

                    b.Property<DateTime?>("VisitDateOut");

                    b.Property<string>("VisitKioskDeviceID")
                        .HasMaxLength(100);

                    b.Property<string>("VisitKioskTransactionID")
                        .HasMaxLength(100);

                    b.Property<string>("VisitorEmailAddress")
                        .HasMaxLength(1000);

                    b.Property<string>("VisitorFullAddress")
                        .HasMaxLength(1000);

                    b.Property<string>("VisitorFullName")
                        .HasMaxLength(1000);

                    b.Property<string>("VisitorFullNameEN")
                        .HasMaxLength(1000);

                    b.Property<string>("VisitorIDCardFullAddress")
                        .HasMaxLength(1000);

                    b.Property<string>("VisitorMobile")
                        .HasMaxLength(100);

                    b.Property<string>("VisitorRunning")
                        .HasMaxLength(100);

                    b.Property<Guid?>("VisitorWalkStatusMasterCenterID");

                    b.Property<string>("VisitorWorkingFullAddress")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("WelcomeLCUserID");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("ContactStatusMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("PersonalVisitCardTypeMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("RefVisitorRelationMasterCenterID");

                    b.HasIndex("SalesOpportunityMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("VehicleMasterCenterID");

                    b.HasIndex("VisitByMasterCenterID");

                    b.HasIndex("VisitorWalkStatusMasterCenterID");

                    b.HasIndex("WelcomeLCUserID");

                    b.ToTable("Visitor","CTM");
                });

            modelBuilder.Entity("Database.Models.DBO.JobTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("JobTransaction","DMT");
                });

            modelBuilder.Entity("Database.Models.DBO.MergeContactResult", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("EMail");

                    b.Property<bool>("IsContactCreated");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsMainContact");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("MatchMergeTypeException")
                        .HasMaxLength(100);

                    b.Property<string>("MatchMergeTypeStep1")
                        .HasMaxLength(100);

                    b.Property<string>("MatchMergeTypeStep2")
                        .HasMaxLength(100);

                    b.Property<string>("MergeKey");

                    b.Property<Guid>("NewContactID");

                    b.Property<Guid?>("NewEmailID");

                    b.Property<Guid?>("NewTel1ID");

                    b.Property<Guid?>("NewTel2ID");

                    b.Property<Guid?>("NewTel3ID");

                    b.Property<Guid?>("NewTel4ID");

                    b.Property<string>("OldContactID")
                        .HasMaxLength(100);

                    b.Property<string>("PersonalID");

                    b.Property<int>("Score");

                    b.Property<string>("Tel_4");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MergeContactResult","DMT");
                });

            modelBuilder.Entity("Database.Models.FIN.BillPaymentDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankRef1")
                        .HasMaxLength(50);

                    b.Property<string>("BankRef2")
                        .HasMaxLength(50);

                    b.Property<string>("BankRef3")
                        .HasMaxLength(50);

                    b.Property<Guid>("BillPaymentHeaderID");

                    b.Property<Guid?>("BillPaymentStatusID");

                    b.Property<Guid?>("BookingID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("DeleteReason");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("Money");

                    b.Property<string>("PayType")
                        .HasMaxLength(50);

                    b.Property<DateTime>("PaymentDate");

                    b.Property<DateTime?>("ReconcileDate");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BillPaymentHeaderID");

                    b.HasIndex("BillPaymentStatusID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BillPaymentTransaction","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.BillPaymentHeader", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankAccountID");

                    b.Property<string>("BatchID")
                        .HasMaxLength(50);

                    b.Property<Guid?>("BillPaymentImportTypeID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime?>("ImportDate");

                    b.Property<string>("ImportFileName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("Money");

                    b.Property<int>("TotalRecord");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID");

                    b.HasIndex("BillPaymentImportTypeID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BillPayment","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.CustomerWallet", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<Guid>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("CustomerWallet","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.CustomerWalletTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid>("CustomerWalletID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("PaymentTypeItemID");

                    b.Property<decimal>("RemainAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("CustomerWalletID");

                    b.HasIndex("PaymentTypeItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("CustomerWalletTransaction","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.DepositDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid>("DepositHeaderID");

                    b.Property<decimal>("Fee")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("Money");

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DepositHeaderID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("DepositDetail","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.DepositHeader", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankAccountID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime>("DepositDate");

                    b.Property<string>("DepositNo")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ReferentID");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("TotalFee")
                        .HasColumnType("Money");

                    b.Property<int>("TotalRecord");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ReferentID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("DepositHeader","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitApprovalForm", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNO")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ApproveDate");

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<Guid?>("BookingID");

                    b.Property<DateTime?>("CancelDate");

                    b.Property<string>("CitizenIdentityNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<int?>("CreditCardExpireMonth");

                    b.Property<int?>("CreditCardExpireYear");

                    b.Property<Guid?>("DirectApprovalFormStatusID");

                    b.Property<Guid?>("DirectApprovalFormTypeID");

                    b.Property<int>("DirectPeriod");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("OwnerName");

                    b.Property<Guid?>("ProvinceID");

                    b.Property<DateTime?>("RejectDate");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("StartDate");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DirectApprovalFormStatusID");

                    b.HasIndex("DirectApprovalFormTypeID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("DirectCreditDebitApprovalForm","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitExportDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<string>("BatchID")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid>("DirectCreditDebitApprovalFormID");

                    b.Property<Guid>("DirectCreditDebitExportHeaderID");

                    b.Property<bool?>("IsComplete");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<decimal>("ReceiveAmount")
                        .HasColumnType("Money");

                    b.Property<int>("Seq");

                    b.Property<string>("TransCode")
                        .HasMaxLength(50);

                    b.Property<Guid>("UnitPriceInstallmentID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DirectCreditDebitApprovalFormID");

                    b.HasIndex("DirectCreditDebitExportHeaderID");

                    b.HasIndex("UnitPriceInstallmentID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("DirectCreditDebitExportDetail","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitExportHeader", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankAccountID");

                    b.Property<Guid?>("BankID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("DirectFormTypeID");

                    b.Property<DateTime>("DirectPayDate");

                    b.Property<int>("DirectPeriod");

                    b.Property<DateTime?>("ImportDate");

                    b.Property<string>("ImportFileName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<int>("PeriodMonth");

                    b.Property<int>("PeriodYear");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("Money");

                    b.Property<int>("TotalRecord");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DirectFormTypeID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("DirectCreditDebitExportHeader","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.Payment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttachFile")
                        .HasMaxLength(1000);

                    b.Property<Guid>("BookingID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime>("ReceiveDate");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Payment","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentBankTransfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankAccountID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<bool>("IsWrongAccount");

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<Guid?>("UnknownPaymentID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UnknownPaymentID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PaymentBankTransfer","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentBillPayment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BillPaymentTransactionID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BillPaymentTransactionID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PaymentBillPayment","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentCashierCheque", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<DateTime>("ChequeDate");

                    b.Property<string>("ChequeNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<bool>("IsWrongCompany");

                    b.Property<Guid?>("PayToCompanyID");

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PayToCompanyID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PaymentCashierCheque","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentCreditCard", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankID");

                    b.Property<string>("CardNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("CreditCardPaymentTypeMasterCenterID");

                    b.Property<Guid?>("CreditCardTypeMasterCenterID");

                    b.Property<Guid?>("EDCID");

                    b.Property<decimal>("Fee")
                        .HasColumnType("Money");

                    b.Property<decimal>("FeeIncludingVat")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsForeignCreditCard");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<bool>("IsWrongAccount");

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<double>("Vat");

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("CreditCardPaymentTypeMasterCenterID");

                    b.HasIndex("CreditCardTypeMasterCenterID");

                    b.HasIndex("EDCID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PaymentCreditCard","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentCustomerWallet", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("CustomerWalletTransactionID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("CustomerWalletTransactionID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PaymentCustomerWallet","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentDebitCard", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankID");

                    b.Property<string>("CardNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("EDCID");

                    b.Property<decimal>("Fee")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<bool>("IsWrongAccount");

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("EDCID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PaymentDebitCard","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentDirectCreditDebit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PaymentDirectCreditDebit","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentForeignBankTransfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankAccountID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal>("Fee")
                        .HasColumnType("Money");

                    b.Property<Guid?>("ForeignBankID");

                    b.Property<Guid?>("ForeignTransferTypeMasterCenterID");

                    b.Property<string>("IR")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsNotifyFET");

                    b.Property<bool>("IsRequestFET");

                    b.Property<bool>("IsUsed");

                    b.Property<bool>("IsWrongAccount");

                    b.Property<string>("NotifyFETMemo")
                        .HasMaxLength(5000);

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<string>("TransferorName")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("UnknownPaymentID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ForeignBankID");

                    b.HasIndex("ForeignTransferTypeMasterCenterID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UnknownPaymentID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PaymentForeignBankTransfer","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<decimal>("ItemAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("MasterPriceItemID");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("Money");

                    b.Property<Guid>("PaymentID");

                    b.Property<decimal>("RemainAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("UnitPriceInstallmentID");

                    b.Property<Guid?>("UnitPriceItemID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterPriceItemID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("UnitPriceInstallmentID");

                    b.HasIndex("UnitPriceItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PaymentItem","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentMethod", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("Money");

                    b.Property<Guid>("PaymentID");

                    b.Property<Guid?>("PaymentMethodTypeMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("PaymentMethodTypeMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PaymentMethod","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentMethodToItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("PaymentItemID");

                    b.Property<Guid?>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PaymentItemID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PaymentMethodToItem","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentPersonalCheque", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<DateTime>("ChequeDate");

                    b.Property<string>("ChequeNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<bool>("IsWrongCompany");

                    b.Property<Guid?>("PayToCompanyID");

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PayToCompanyID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PaymentPersonalCheque","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentQRCode", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankAccountID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<bool>("IsWrongAccount");

                    b.Property<Guid>("PaymentMethodID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PaymentQRCode","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.Receipt", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyID");

                    b.Property<Guid?>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("PaymentID");

                    b.Property<string>("ReceiptNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("ContactID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Receipt","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptHeader", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyBuildingEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyBuildingTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyFax")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyHouseNoEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyHouseNoTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyNameEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyNameTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyPostalCode")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyProvinceEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyProvinceTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyRoadEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyRoadTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanySoiEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanySoiTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanySubDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanySubDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyTelephone")
                        .HasMaxLength(50);

                    b.Property<string>("ContactCountryEN")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactCountryTH")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactFirstNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactFirstNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactHouseNoEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactHouseNoTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactLastNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactLastNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactMiddleNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactMiddleNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactMooEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactMooTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPostalCode")
                        .HasMaxLength(50);

                    b.Property<string>("ContactProvinceEN")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactProvinceTH")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactRoadEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactRoadTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactSoiEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactSoiTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactSubDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactSubDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(100);

                    b.Property<string>("ContactTitleExtEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactVillageEN")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactVillageTH")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsForeigner");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("PaymentID");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(1000);

                    b.Property<string>("ProjectNo")
                        .HasMaxLength(1000);

                    b.Property<string>("ReceiptNo")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ReceiveDate");

                    b.Property<Guid?>("SendToContactID");

                    b.Property<string>("UnitNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("SendToContactID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ReceiptHeader","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptSendEmailHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("ReceiptHeaderID");

                    b.Property<DateTime>("SendDate");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ReceiptHeaderID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ReceiptSendEmailHistory","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptSendPrintingHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime>("ExportDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("LotNo")
                        .HasMaxLength(50);

                    b.Property<Guid>("ReceiptHeaderID");

                    b.Property<DateTime>("SendDate");

                    b.Property<int>("TotalRecord");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ReceiptHeaderID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ReceiptSendPrintingHistory","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptTempDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("PaymentItemID");

                    b.Property<Guid>("ReceiptTempHeaderID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PaymentItemID");

                    b.HasIndex("ReceiptTempHeaderID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ReceiptTempDetail","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptTempHeader", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyBuildingEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyBuildingTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyFax")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyHouseNoEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyHouseNoTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyNameEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyNameTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyPostalCode")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyProvinceEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyProvinceTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyRoadEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyRoadTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanySoiEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanySoiTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanySubDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanySubDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyTelephone")
                        .HasMaxLength(50);

                    b.Property<string>("ContactCountryEN")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactCountryTH")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactFirstNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactFirstNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactHouseNoEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactHouseNoTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactLastNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactLastNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactMiddleNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactMiddleNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactMooEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactMooTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPostalCode")
                        .HasMaxLength(50);

                    b.Property<string>("ContactProvinceEN")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactProvinceTH")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactRoadEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactRoadTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactSoiEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactSoiTH")
                        .HasMaxLength(100);

                    b.Property<string>("ContactSubDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactSubDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(100);

                    b.Property<string>("ContactTitleExtEN")
                        .HasMaxLength(100);

                    b.Property<string>("ContactVillageEN")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactVillageTH")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("PaymentID");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(1000);

                    b.Property<string>("ProjectNo")
                        .HasMaxLength(1000);

                    b.Property<string>("ReceiptTempNo")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ReceiveDate");

                    b.Property<string>("UnitNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ReceiptTempHeader","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.UnknownPayment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("BankAccountID");

                    b.Property<Guid?>("BookingID");

                    b.Property<string>("CancelRemark")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime>("ReceiveDate");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("UnknowPaymentStatusID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UnknowPaymentStatusID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("UnknownPayment","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.UnknownPaymentReverse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("BookingID");

                    b.Property<string>("CancelRemark")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime>("ReverseDate");

                    b.Property<Guid?>("UnknownPaymentID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UnknownPaymentID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("UnknownPaymentReverse","FIN");
                });

            modelBuilder.Entity("Database.Models.FIN.UnknownPaymentReverseDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("UnknownPaymentReverseID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UnknownPaymentReverseID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("UnknownPaymentReverseDetail","FIN");
                });

            modelBuilder.Entity("Database.Models.LET.DownPaymentLetter", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgreementID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("LetterStatus");

                    b.Property<string>("LetterType");

                    b.Property<string>("PostTrackingNo");

                    b.Property<int>("RemainDownPeriod");

                    b.Property<int>("RemainDownPeriodCount");

                    b.Property<string>("Remark");

                    b.Property<DateTime?>("ResponseDate");

                    b.Property<decimal>("TotalRemainAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AgreementID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("DownPaymentLetter","LET");
                });

            modelBuilder.Entity("Database.Models.LET.TransferLetter", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgreementID");

                    b.Property<DateTime?>("AppointmentTransferDate");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("LetterTransferDate");

                    b.Property<string>("LetterType");

                    b.Property<string>("PostTrackingNo");

                    b.Property<string>("TransferStatus");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AgreementID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferLetter","LET");
                });

            modelBuilder.Entity("Database.Models.MST.Agent", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(5000);

                    b.Property<string>("Building")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("FaxNo")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("NameEN")
                        .HasMaxLength(100);

                    b.Property<string>("NameTH")
                        .HasMaxLength(100);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProvinceID");

                    b.Property<string>("Road")
                        .HasMaxLength(1000);

                    b.Property<string>("Soi")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("SubDistrictID");

                    b.Property<string>("TelNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("Website")
                        .HasMaxLength(1000);

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("SubDistrictID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Agent","MST");
                });

            modelBuilder.Entity("Database.Models.MST.AgentEmployee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgentID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<string>("TelNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AgentID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("AgentEmployee","MST");
                });

            modelBuilder.Entity("Database.Models.MST.BG", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BGNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ProductTypeMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProductTypeMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BG","MST");
                });

            modelBuilder.Entity("Database.Models.MST.BOConfiguration", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AdjustAccount");

                    b.Property<double?>("BOIAmount");

                    b.Property<double?>("BusinessTaxPercent");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<double?>("DepreciationYear");

                    b.Property<double?>("IncomeTaxPercent");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<double?>("LocalTaxPercent");

                    b.Property<double?>("TaxAccount");

                    b.Property<double?>("TransferFeeRate");

                    b.Property<double?>("UnitTransferFee");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<double>("Vat");

                    b.Property<double?>("VoidRefund");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BOConfiguration","MST");
                });

            modelBuilder.Entity("Database.Models.MST.Bank", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias")
                        .HasMaxLength(100);

                    b.Property<string>("BankNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsCoorperative");

                    b.Property<bool>("IsCreditCard");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFreeMortgage");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsNonBank");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("NameEN")
                        .HasMaxLength(100);

                    b.Property<string>("NameTH")
                        .HasMaxLength(100);

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Bank","MST");
                });

            modelBuilder.Entity("Database.Models.MST.BankAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankAccountNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("BankAccountTypeMasterCenterID");

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<Guid?>("CompanyID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("GLAccountNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("GLAccountTypeMasterCenterID");

                    b.Property<string>("GLRefCode")
                        .HasMaxLength(50);

                    b.Property<bool>("HasVat");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDepositAccount");

                    b.Property<bool>("IsDirectCredit");

                    b.Property<bool>("IsDirectDebit");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsPCard");

                    b.Property<bool>("IsTransferAccount");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("MerchantID")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ProvinceID");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankAccountTypeMasterCenterID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("GLAccountTypeMasterCenterID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BankAccount","MST");
                });

            modelBuilder.Entity("Database.Models.MST.BankBranch", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(1000);

                    b.Property<string>("AreaCode")
                        .HasMaxLength(50);

                    b.Property<Guid>("BankID");

                    b.Property<string>("Building")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("Fax")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCreditBank");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDirectCredit");

                    b.Property<bool>("IsDirectDebit");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("OldBankID")
                        .HasMaxLength(50);

                    b.Property<string>("OldBranchID")
                        .HasMaxLength(50);

                    b.Property<string>("OtherDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherProvinceTH")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherSubDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProvinceID");

                    b.Property<string>("Road")
                        .HasMaxLength(1000);

                    b.Property<string>("Soi")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("SubDistrictID");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("SubDistrictID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BankBranch","MST");
                });

            modelBuilder.Entity("Database.Models.MST.Brand", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrandNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("UnitNumberFormatMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UnitNumberFormatMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Brand","MST");
                });

            modelBuilder.Entity("Database.Models.MST.CancelReason", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CancelApproveFlowMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<Guid?>("GroupOfCancelReasonMasterCenterID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CancelApproveFlowMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("GroupOfCancelReasonMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("CancelReason","MST");
                });

            modelBuilder.Entity("Database.Models.MST.CancelReturnSetting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("ChiefReturnLessThanPercent");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal>("HandlingFee")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("CancelReturnSetting","MST");
                });

            modelBuilder.Entity("Database.Models.MST.Company", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("APAuthorizeRefID")
                        .HasMaxLength(100);

                    b.Property<string>("AddressEN")
                        .HasMaxLength(1000);

                    b.Property<string>("AddressTH")
                        .HasMaxLength(1000);

                    b.Property<string>("BuildingEN")
                        .HasMaxLength(1000);

                    b.Property<string>("BuildingTH")
                        .HasMaxLength(1000);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("Fax")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUseInCRM");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("NameEN")
                        .HasMaxLength(100);

                    b.Property<string>("NameENOld")
                        .HasMaxLength(100);

                    b.Property<string>("NameTH")
                        .HasMaxLength(100);

                    b.Property<string>("NameTHOld")
                        .HasMaxLength(100);

                    b.Property<string>("OtherDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherProvinceEN")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherProvinceTH")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherSubDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherSubDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProvinceID");

                    b.Property<string>("RoadEN")
                        .HasMaxLength(1000);

                    b.Property<string>("RoadTH")
                        .HasMaxLength(1000);

                    b.Property<string>("SAPCompanyID")
                        .HasMaxLength(50);

                    b.Property<string>("SoiEN")
                        .HasMaxLength(1000);

                    b.Property<string>("SoiTH")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("SubDistrictID");

                    b.Property<string>("TaxID")
                        .HasMaxLength(1000);

                    b.Property<string>("Telephone")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("Website")
                        .HasMaxLength(1000);

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("SubDistrictID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Company","MST");
                });

            modelBuilder.Entity("Database.Models.MST.Country", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("NameEN")
                        .HasMaxLength(100);

                    b.Property<string>("NameTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Country","MST");
                });

            modelBuilder.Entity("Database.Models.MST.District", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("NameEN")
                        .HasMaxLength(100);

                    b.Property<string>("NameTH")
                        .HasMaxLength(100);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<Guid>("ProvinceID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("District","MST");
                });

            modelBuilder.Entity("Database.Models.MST.EDC", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankAccountID");

                    b.Property<Guid?>("BankID");

                    b.Property<Guid?>("CardMachineStatusMasterCenterID");

                    b.Property<Guid?>("CardMachineTypeMasterCenterID");

                    b.Property<string>("Code")
                        .HasMaxLength(100);

                    b.Property<Guid?>("CompanyID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("ReceiveBy")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("ReceiveDate");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<string>("TelNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID");

                    b.HasIndex("BankID");

                    b.HasIndex("CardMachineStatusMasterCenterID");

                    b.HasIndex("CardMachineTypeMasterCenterID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("EDC","MST");
                });

            modelBuilder.Entity("Database.Models.MST.EDCFee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("CreditCardPaymentTypeMasterCenterID");

                    b.Property<Guid?>("CreditCardTypeMasterCenterID");

                    b.Property<double>("Fee");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEDCBankCreditCard");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("PaymentCardTypeMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("CreditCardPaymentTypeMasterCenterID");

                    b.HasIndex("CreditCardTypeMasterCenterID");

                    b.HasIndex("PaymentCardTypeMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("EDCFee","MST");
                });

            modelBuilder.Entity("Database.Models.MST.ErrorMessage", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Message")
                        .HasMaxLength(1000);

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<int?>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("Key");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ErrorMessage","MST");
                });

            modelBuilder.Entity("Database.Models.MST.LandOffice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("NameEN")
                        .HasMaxLength(100);

                    b.Property<string>("NameTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("LandOffice","MST");
                });

            modelBuilder.Entity("Database.Models.MST.LegalEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankAccountNo")
                        .HasMaxLength(10);

                    b.Property<Guid?>("BankAccountTypeMasterCenterID");

                    b.Property<Guid?>("BankID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("NameEN")
                        .HasMaxLength(100);

                    b.Property<string>("NameTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankAccountTypeMasterCenterID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("LegalEntity","MST");
                });

            modelBuilder.Entity("Database.Models.MST.MasterCenter", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Key")
                        .HasMaxLength(50);

                    b.Property<string>("MasterCenterGroupKey")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<string>("NameEN")
                        .HasMaxLength(1000);

                    b.Property<int>("Order");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterCenterGroupKey");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MasterCenter","MST");
                });

            modelBuilder.Entity("Database.Models.MST.MasterCenterGroup", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSystemOnly");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("Key");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MasterCenterGroup","MST");
                });

            modelBuilder.Entity("Database.Models.MST.MasterPriceItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ACCode");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Detail");

                    b.Property<string>("DetailEN");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("PaymentReceiverMasterCenterID");

                    b.Property<Guid?>("PriceTypeMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PaymentReceiverMasterCenterID");

                    b.HasIndex("PriceTypeMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MasterPriceItem","MST");
                });

            modelBuilder.Entity("Database.Models.MST.Menu", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MenuAreaID");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentMenuID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MenuAreaID");

                    b.HasIndex("ParentMenuID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Menu","MST");
                });

            modelBuilder.Entity("Database.Models.MST.MenuArea", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MenuArea","MST");
                });

            modelBuilder.Entity("Database.Models.MST.Province", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsShow");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("NameEN")
                        .HasMaxLength(100);

                    b.Property<string>("NameTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Province","MST");
                });

            modelBuilder.Entity("Database.Models.MST.RunningNumberCounter", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.Property<int>("Count");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("Key", "Type");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RunningNumberCounter","MST");
                });

            modelBuilder.Entity("Database.Models.MST.SubBG", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BGID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("SubBGNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BGID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("SubBG","MST");
                });

            modelBuilder.Entity("Database.Models.MST.SubDistrict", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid>("DistrictID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LandOfficeID");

                    b.Property<string>("NameEN")
                        .HasMaxLength(100);

                    b.Property<string>("NameTH")
                        .HasMaxLength(100);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("LandOfficeID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("SubDistrict","MST");
                });

            modelBuilder.Entity("Database.Models.MST.TypeOfRealEstate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid?>("RealEstateCategoryMasterCenterID");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("Money");

                    b.Property<decimal>("StandardPrice")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("RealEstateCategoryMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TypeOfRealEstate","MST");
                });

            modelBuilder.Entity("Database.Models.NTF.EmailNotification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BCCReceivers")
                        .HasMaxLength(5000);

                    b.Property<string>("CCReceivers")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(5000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Message");

                    b.Property<string>("Receivers")
                        .HasMaxLength(5000);

                    b.Property<int>("Retry");

                    b.Property<int>("Status");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000);

                    b.Property<string>("TemplateName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("EmailNotification","NTF");
                });

            modelBuilder.Entity("Database.Models.NTF.MobileInstallation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<int>("DeviceType");

                    b.Property<string>("InstallationID")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("UserID");

                    b.ToTable("MobileInstallation","NTF");
                });

            modelBuilder.Entity("Database.Models.NTF.MobileNotification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("DeviceIds")
                        .HasMaxLength(5000);

                    b.Property<string>("ErrorMessages")
                        .HasMaxLength(5000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Message")
                        .HasMaxLength(5000);

                    b.Property<string>("Params")
                        .HasMaxLength(1000);

                    b.Property<int>("Status");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000);

                    b.Property<string>("TemplateName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("UserID");

                    b.ToTable("MobileNotification","NTF");
                });

            modelBuilder.Entity("Database.Models.NTF.NotificationTemplate", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("EmailMessage");

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailOpen");

                    b.Property<bool>("IsMobileOpen");

                    b.Property<bool>("IsSmsOpen");

                    b.Property<bool>("IsUsed");

                    b.Property<bool>("IsWebOpen");

                    b.Property<string>("MobileAction")
                        .HasMaxLength(1000);

                    b.Property<string>("MobileMessage")
                        .HasMaxLength(5000);

                    b.Property<string>("MobileParams")
                        .HasMaxLength(1000);

                    b.Property<string>("MobileSubject")
                        .HasMaxLength(1000);

                    b.Property<string>("SmsMessage");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("WebAction")
                        .HasMaxLength(1000);

                    b.Property<string>("WebMessage");

                    b.Property<string>("WebParams")
                        .HasMaxLength(1000);

                    b.HasKey("Name");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("NotificationTemplate","NTF");
                });

            modelBuilder.Entity("Database.Models.NTF.SmsNotification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Message")
                        .HasMaxLength(5000);

                    b.Property<string>("PhoneNumbers")
                        .HasMaxLength(5000);

                    b.Property<int>("Status");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("SmsNotification","NTF");
                });

            modelBuilder.Entity("Database.Models.NTF.WebNotification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Message");

                    b.Property<string>("Params")
                        .HasMaxLength(1000);

                    b.Property<int>("Status");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("UserID");

                    b.ToTable("WebNotification","NTF");
                });

            modelBuilder.Entity("Database.Models.OST.ContactStory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContactID");

                    b.Property<Guid>("ContactStoryGroupID");

                    b.Property<Guid>("ContactStoryTypeID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ProjectNo");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<string>("UnitNo");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("ContactStoryGroupID");

                    b.HasIndex("ContactStoryTypeID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ContactStory","OST");
                });

            modelBuilder.Entity("Database.Models.OST.ContactStoryGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ContactStoryGroup","OST");
                });

            modelBuilder.Entity("Database.Models.OST.ContactStoryType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ContactStoryType","OST");
                });

            modelBuilder.Entity("Database.Models.OST.UnitStory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<Guid>("UnitID");

                    b.Property<Guid>("UnitStoryGroupID");

                    b.Property<Guid>("UnitStoryTypeID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UnitStoryGroupID");

                    b.HasIndex("UnitStoryTypeID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("UnitStory","OST");
                });

            modelBuilder.Entity("Database.Models.OST.UnitStoryGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("UnitStoryGroup","OST");
                });

            modelBuilder.Entity("Database.Models.OST.UnitStoryType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("UnitStoryType","OST");
                });

            modelBuilder.Entity("Database.Models.PRJ.Address", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("AddressNameTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("HouseMoo")
                        .HasMaxLength(1000);

                    b.Property<string>("HouseRoadEN")
                        .HasMaxLength(1000);

                    b.Property<string>("HouseRoadTH")
                        .HasMaxLength(1000);

                    b.Property<string>("HouseSoiEN")
                        .HasMaxLength(1000);

                    b.Property<string>("HouseSoiTH")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("HouseSubDistrictID");

                    b.Property<string>("InspectionNo")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("LandNo")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("LandOfficeID");

                    b.Property<string>("Moo")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherProvinceEN")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherProvinceTH")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherSubDistrictEN")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherSubDistrictTH")
                        .HasMaxLength(1000);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProjectAddressTypeMasterCenterID");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("ProvinceID");

                    b.Property<string>("RoadEN")
                        .HasMaxLength(1000);

                    b.Property<string>("RoadTH")
                        .HasMaxLength(1000);

                    b.Property<string>("SoiEN")
                        .HasMaxLength(1000);

                    b.Property<string>("SoiTH")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("SubDistrictID");

                    b.Property<string>("TitleDeedNo")
                        .HasMaxLength(1000);

                    b.Property<string>("TitledeedMoo")
                        .HasMaxLength(1000);

                    b.Property<string>("TitledeedRoadEN")
                        .HasMaxLength(1000);

                    b.Property<string>("TitledeedRoadTH")
                        .HasMaxLength(1000);

                    b.Property<string>("TitledeedSoiEN")
                        .HasMaxLength(1000);

                    b.Property<string>("TitledeedSoiTH")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("TitledeedSubDistrictID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("HouseSubDistrictID");

                    b.HasIndex("LandOfficeID");

                    b.HasIndex("ProjectAddressTypeMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("SubDistrictID");

                    b.HasIndex("TitledeedSubDistrictID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Address","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.AgreementConfig", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AttorneyIssueDate");

                    b.Property<string>("AttorneyNameEN1")
                        .HasMaxLength(100);

                    b.Property<string>("AttorneyNameEN2")
                        .HasMaxLength(100);

                    b.Property<string>("AttorneyNameTH1")
                        .HasMaxLength(100);

                    b.Property<string>("AttorneyNameTH2")
                        .HasMaxLength(100);

                    b.Property<string>("AttorneyNameTransfer")
                        .HasMaxLength(100);

                    b.Property<decimal?>("BuildingInsurance")
                        .HasColumnType("Money");

                    b.Property<decimal?>("ChangeNameFee")
                        .HasColumnType("Money");

                    b.Property<decimal?>("CondoFundRate")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal?>("DelayTransfer");

                    b.Property<DateTime?>("EIAApprovedDate");

                    b.Property<DateTime?>("EndPublicDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsIncludeDoubleParking");

                    b.Property<bool>("IsNotLicenseLand");

                    b.Property<bool>("IsPrintAgreementEmpty");

                    b.Property<bool>("IsPrintAgreementForBuyer");

                    b.Property<bool>("IsPrintAgreementForRevenue");

                    b.Property<bool>("IsPrintAgreementForSeller");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LegalEntityID");

                    b.Property<DateTime?>("LicenseLandExpireDate");

                    b.Property<DateTime?>("LicenseLandIssueDate");

                    b.Property<string>("LicenseLandNo")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("LicenseProductExpireDate");

                    b.Property<DateTime?>("LicenseProductIssueDate");

                    b.Property<string>("LicenseProductNo")
                        .HasMaxLength(1000);

                    b.Property<string>("LicenseProductRemark")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("OwnerShipDate");

                    b.Property<int?>("ParkingUnits");

                    b.Property<DateTime?>("PreLicenseLandExpireDate");

                    b.Property<DateTime?>("PreLicenseLandIssueDate");

                    b.Property<string>("PreLicenseLandNo");

                    b.Property<string>("PreferApproveName")
                        .HasMaxLength(100);

                    b.Property<string>("PreferApprovePosition")
                        .HasMaxLength(100);

                    b.Property<Guid>("ProjectID");

                    b.Property<int?>("PublicFundMonths");

                    b.Property<int?>("PublicFundMonthsAP");

                    b.Property<decimal?>("PublicFundRate")
                        .HasColumnType("Money");

                    b.Property<decimal?>("PublicFundRateAP")
                        .HasColumnType("Money");

                    b.Property<decimal?>("RoomTransferFee")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<decimal?>("VisitFine")
                        .HasColumnType("Money");

                    b.Property<int?>("VisitFineDay");

                    b.Property<string>("WitnessEN1")
                        .HasMaxLength(100);

                    b.Property<string>("WitnessEN2")
                        .HasMaxLength(100);

                    b.Property<string>("WitnessTH1")
                        .HasMaxLength(100);

                    b.Property<string>("WitnessTH2")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LegalEntityID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("AgreementConfig","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetMinPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActiveDate");

                    b.Property<Guid?>("BudgetMinPriceTypeMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("ProjectID");

                    b.Property<int>("Quarter");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("UnitAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.HasIndex("BudgetMinPriceTypeMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BudgetMinPrice","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetMinPriceUnit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("Money");

                    b.Property<Guid>("BudgetMinPriceID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BudgetMinPriceID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BudgetMinPriceUnit","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetPromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("Money");

                    b.Property<Guid?>("BudgetPromotionTypeMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BudgetPromotionTypeMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BudgetPromotion","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetPromotionSyncItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("BudgetPromotionSyncJobID");

                    b.Property<Guid?>("BudgetPromotionSyncStatusMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Currency")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<int>("Retry");

                    b.Property<string>("SAPWBSObject_P")
                        .HasMaxLength(100);

                    b.Property<Guid?>("SaleBudgetPromotionID");

                    b.Property<Guid?>("TransferBudgetPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("UserName")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("BudgetPromotionSyncJobID");

                    b.HasIndex("BudgetPromotionSyncStatusMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("SaleBudgetPromotionID");

                    b.HasIndex("TransferBudgetPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BudgetPromotionSyncItem","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetPromotionSyncItemResult", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BudgetPromotionSyncItemID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(10);

                    b.Property<string>("ErrorDescription")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsError");

                    b.Property<bool>("IsFMUpdateBudget");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("LastUpdateBudgetFromSAP")
                        .HasMaxLength(20);

                    b.Property<DateTime>("SAPCreateDateTime");

                    b.Property<string>("SAPWBSObject_P")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("UserSAP")
                        .HasMaxLength(40);

                    b.HasKey("ID");

                    b.HasIndex("BudgetPromotionSyncItemID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BudgetPromotionSyncItemResult","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetPromotionSyncJob", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("ErrorMessage");

                    b.Property<string>("FileName")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("SAPResultFileName")
                        .HasMaxLength(1000);

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BudgetPromotionSyncJob","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.Floor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("FileAttachment");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("NameEN")
                        .HasMaxLength(100);

                    b.Property<string>("NameTH")
                        .HasMaxLength(100);

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid>("TowerID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("TowerID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Floor","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.FloorPlanImage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("FileName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<Guid>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("FloorPlanImage","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.HighRiseFee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CalculateParkAreaMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal?>("EstimatePriceAirArea")
                        .HasColumnType("Money");

                    b.Property<decimal?>("EstimatePriceArea")
                        .HasColumnType("Money");

                    b.Property<decimal?>("EstimatePriceBalconyArea")
                        .HasColumnType("Money");

                    b.Property<decimal?>("EstimatePricePoolArea")
                        .HasColumnType("Money");

                    b.Property<decimal?>("EstimatePriceUsageArea")
                        .HasColumnType("Money");

                    b.Property<Guid?>("FloorID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("TowerID");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CalculateParkAreaMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FloorID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TowerID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("HighRiseFee","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.LowRiseBuildingPriceFee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ModelID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("Money");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModelID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("LowRiseBuildingPriceFee","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.LowRiseFee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal?>("EstimatePriceArea")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("LowRiseFee","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.LowRiseFenceFee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("ConcretePrice")
                        .HasColumnType("Money");

                    b.Property<double?>("ConcreteRate");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal?>("DepreciationPerYear")
                        .HasColumnType("Money");

                    b.Property<decimal?>("IronPrice")
                        .HasColumnType("Money");

                    b.Property<double?>("IronRate");

                    b.Property<bool>("IsCalculateDepreciation");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LandOfficeID");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("TypeOfRealEstateID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LandOfficeID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TypeOfRealEstateID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("LowRiseFenceFee","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.MinPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<decimal?>("ApprovedMinPrice")
                        .HasColumnType("Money");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("Money");

                    b.Property<string>("CostType")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("DocTypeMasterCenterID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MinPriceTypeMasterCenterID");

                    b.Property<Guid?>("ProjectID");

                    b.Property<decimal?>("ROIMinprice")
                        .HasColumnType("Money");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("Money");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DocTypeMasterCenterID");

                    b.HasIndex("MinPriceTypeMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MinPrice","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.Model", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<double?>("FrontWidth");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ModelShortNameMasterCenterID");

                    b.Property<Guid?>("ModelTypeMasterCenterID");

                    b.Property<Guid?>("ModelUnitTypeMasterCenterID");

                    b.Property<string>("NameEN")
                        .HasMaxLength(100);

                    b.Property<string>("NameTH")
                        .HasMaxLength(100);

                    b.Property<double?>("PreferHouse");

                    b.Property<double?>("PreferUnit");

                    b.Property<double?>("PreferUnitMinimum");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("TypeOfRealEstateID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModelShortNameMasterCenterID");

                    b.HasIndex("ModelTypeMasterCenterID");

                    b.HasIndex("ModelUnitTypeMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TypeOfRealEstateID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Model","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.OtherUnitInfoTag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("TagID");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("TagID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("OtherUnitInfoTag","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.PriceList", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PriceList","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.PriceListItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<int?>("Installment");

                    b.Property<decimal?>("InstallmentAmount")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsToBePay");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterPriceItemID");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("Order");

                    b.Property<Guid>("PriceListID");

                    b.Property<decimal?>("PricePerUnitAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("PriceTypeMasterCenterID");

                    b.Property<double?>("PriceUnitAmount");

                    b.Property<Guid?>("PriceUnitMasterCenterID");

                    b.Property<string>("SpecialInstallmentAmounts")
                        .HasMaxLength(1000);

                    b.Property<string>("SpecialInstallments")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterPriceItemID");

                    b.HasIndex("PriceListID");

                    b.HasIndex("PriceTypeMasterCenterID");

                    b.HasIndex("PriceUnitMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PriceListItem","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.PriceListItemTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterPriceItemID");

                    b.Property<int>("Order");

                    b.Property<Guid>("PriceListID");

                    b.Property<Guid?>("ProductTypeMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterPriceItemID");

                    b.HasIndex("PriceListID");

                    b.HasIndex("ProductTypeMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PriceListItemTemplate","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.Project", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgreementDataStatusMasterCenterID");

                    b.Property<Guid?>("BGID");

                    b.Property<Guid?>("BrandID");

                    b.Property<Guid?>("BudgetProDataStatusMasterCenterID");

                    b.Property<Guid?>("CompanyID");

                    b.Property<string>("CostCenterCode")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("DeleteReason")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("FloatingEndDate");

                    b.Property<double>("ForeignerRatio");

                    b.Property<Guid?>("GeneralDataStatusMasterCenterID");

                    b.Property<string>("Group")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsPRAutoCost")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPRAutoExpense")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPRAutoFGF")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPRAutoStand")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsUsed");

                    b.Property<string>("LineID")
                        .HasMaxLength(100);

                    b.Property<string>("Logo")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("MinPriceDataStatusMasterCenterID");

                    b.Property<Guid?>("ModelDataStatusMasterCenterID");

                    b.Property<decimal?>("MortgageAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("MortgageBankID");

                    b.Property<string>("Ngan")
                        .HasMaxLength(1000);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PictureDataStatusMasterCenterID");

                    b.Property<string>("Plant")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PriceListDataStatusMasterCenterID");

                    b.Property<Guid?>("ProductTypeMasterCenterID");

                    b.Property<string>("ProfitCenterCode")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("ProjectEndDate");

                    b.Property<string>("ProjectNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("ProjectNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("ProjectNo")
                        .HasMaxLength(50);

                    b.Property<decimal?>("ProjectPrice")
                        .HasColumnType("Money");

                    b.Property<string>("ProjectShortName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ProjectStartDate");

                    b.Property<Guid?>("ProjectStatusMasterCenterID");

                    b.Property<Guid?>("ProjectTypeMasterCenterID");

                    b.Property<string>("Rai")
                        .HasMaxLength(1000);

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<string>("SapCode")
                        .HasMaxLength(100);

                    b.Property<string>("SqaureWa")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("SubBGID");

                    b.Property<Guid?>("TitleDeedDataStatusMasterCenterID");

                    b.Property<double?>("TotalUnit");

                    b.Property<Guid?>("TowerDataStatusMasterCenterID");

                    b.Property<Guid?>("TransferFeeDataStatusMasterCenterID");

                    b.Property<Guid?>("UnitDataStatusMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid?>("WaiveDataStatusMasterCenterID");

                    b.Property<string>("WeChatID")
                        .HasMaxLength(1000);

                    b.Property<string>("WhatsAppID")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("AgreementDataStatusMasterCenterID");

                    b.HasIndex("BGID");

                    b.HasIndex("BrandID");

                    b.HasIndex("BudgetProDataStatusMasterCenterID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("GeneralDataStatusMasterCenterID");

                    b.HasIndex("MinPriceDataStatusMasterCenterID");

                    b.HasIndex("ModelDataStatusMasterCenterID");

                    b.HasIndex("MortgageBankID");

                    b.HasIndex("PictureDataStatusMasterCenterID");

                    b.HasIndex("PriceListDataStatusMasterCenterID");

                    b.HasIndex("ProductTypeMasterCenterID");

                    b.HasIndex("ProjectStatusMasterCenterID");

                    b.HasIndex("ProjectTypeMasterCenterID");

                    b.HasIndex("SubBGID");

                    b.HasIndex("TitleDeedDataStatusMasterCenterID");

                    b.HasIndex("TowerDataStatusMasterCenterID");

                    b.HasIndex("TransferFeeDataStatusMasterCenterID");

                    b.HasIndex("UnitDataStatusMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WaiveDataStatusMasterCenterID");

                    b.ToTable("Project","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.RoomPlanImage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("FileName")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RoomPlanImage","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.RoundFee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BusinessTaxRoundFormulaMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("IncomeTaxRoundFormulaMasterCenterID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LandOfficeID");

                    b.Property<Guid?>("LocalTaxRoundFormulaMasterCenterID");

                    b.Property<decimal?>("OtherFee")
                        .HasColumnType("Money");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("TransferFeeRoundFormulaMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BusinessTaxRoundFormulaMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("IncomeTaxRoundFormulaMasterCenterID");

                    b.HasIndex("LandOfficeID");

                    b.HasIndex("LocalTaxRoundFormulaMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TransferFeeRoundFormulaMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RoundFee","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.SAPWBSProSyncJob", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Params");

                    b.Property<double>("Progress");

                    b.Property<string>("ResponseMessage");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("SAPWBSProSyncJob","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.TitledeedDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddressID");

                    b.Property<string>("BookNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal?>("EstimatePrice")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("LandNo")
                        .HasMaxLength(100);

                    b.Property<string>("LandPortionNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LandStatusDate");

                    b.Property<Guid?>("LandStatusMasterCenterID");

                    b.Property<string>("LandStatusNote")
                        .HasMaxLength(5000);

                    b.Property<string>("LandSurveyArea")
                        .HasMaxLength(100);

                    b.Property<string>("PageNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PreferStatusMasterCenterID");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<double?>("TitledeedArea");

                    b.Property<string>("TitledeedNo")
                        .HasMaxLength(50);

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LandStatusMasterCenterID");

                    b.HasIndex("PreferStatusMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TitledeedDetail","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.TitledeedDetailHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddressID");

                    b.Property<string>("BookNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal?>("EstimatePrice")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("LandNo")
                        .HasMaxLength(100);

                    b.Property<string>("LandPortionNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LandStatusDate");

                    b.Property<Guid?>("LandStatusMasterCenterID");

                    b.Property<string>("LandStatusNote")
                        .HasMaxLength(1000);

                    b.Property<string>("LandSurveyArea")
                        .HasMaxLength(100);

                    b.Property<string>("PageNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PreferStatusMasterCenterID");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<double?>("TitledeedArea");

                    b.Property<Guid?>("TitledeedDetailID");

                    b.Property<string>("TitledeedNo")
                        .HasMaxLength(50);

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LandStatusMasterCenterID");

                    b.HasIndex("PreferStatusMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TitledeedDetailID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TitledeedDetailHistory","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.Tower", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CondominiumName")
                        .HasMaxLength(100);

                    b.Property<string>("CondominiumNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("TowerCode")
                        .HasMaxLength(50);

                    b.Property<string>("TowerDescription")
                        .HasMaxLength(1000);

                    b.Property<string>("TowerNoEN")
                        .HasMaxLength(100);

                    b.Property<string>("TowerNoTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Tower","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.Unit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AirArea");

                    b.Property<Guid?>("AssetTypeMasterCenterID");

                    b.Property<double?>("BalconyArea");

                    b.Property<string>("CensusHouseNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CompletedDocumentDate");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("ElectricMeter")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ElectricMeterPriceID");

                    b.Property<string>("ElectricMeterRemark")
                        .HasMaxLength(5000);

                    b.Property<Guid?>("ElectricMeterStatusMasterCenterID");

                    b.Property<Guid?>("ElectricMeterTopicMasterCenterID");

                    b.Property<DateTime?>("ElectricMeterTransferDate");

                    b.Property<DateTime?>("ElectrictMeterSaved");

                    b.Property<DateTime?>("ElectrictMeterTransferDateSaved");

                    b.Property<double?>("FenceArea");

                    b.Property<double?>("FenceIronArea");

                    b.Property<Guid?>("FloorID");

                    b.Property<string>("FloorPlanFileName")
                        .HasMaxLength(1000);

                    b.Property<string>("GLPreTransferBatchID")
                        .HasMaxLength(100);

                    b.Property<string>("GLRaiseBatchID")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("HouseDistrictID");

                    b.Property<string>("HouseMoo")
                        .HasMaxLength(1000);

                    b.Property<string>("HouseNo")
                        .HasMaxLength(100);

                    b.Property<int?>("HouseNoReceivedYear");

                    b.Property<string>("HousePostalCode")
                        .HasMaxLength(10);

                    b.Property<Guid?>("HouseProvinceID");

                    b.Property<string>("HouseRoadEN")
                        .HasMaxLength(1000);

                    b.Property<string>("HouseRoadTH")
                        .HasMaxLength(1000);

                    b.Property<string>("HouseSoiEN")
                        .HasMaxLength(1000);

                    b.Property<string>("HouseSoiTH")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("HouseSubDistrictID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsForeignUnit");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsPRAutoCost")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPRAutoExpense")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPRAutoFGF")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPRAutoStand")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsSameAddressAsTitledeed");

                    b.Property<bool?>("IsTransferElectricMeter");

                    b.Property<bool?>("IsTransferWaterMeter");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LandOfficeID");

                    b.Property<Guid?>("ModelID");

                    b.Property<double?>("NumberOfParkingFix");

                    b.Property<double?>("NumberOfParkingUnFix");

                    b.Property<double?>("NumberOfPrivilege");

                    b.Property<double?>("ParkingArea");

                    b.Property<string>("Position")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<string>("RoomPlanFileName")
                        .HasMaxLength(1000);

                    b.Property<decimal?>("SAPBudgetProAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("SAPBudgetProUpdated");

                    b.Property<string>("SAPWBSNo")
                        .HasMaxLength(100);

                    b.Property<string>("SAPWBSNo_P")
                        .HasMaxLength(100);

                    b.Property<string>("SAPWBSObject")
                        .HasMaxLength(100);

                    b.Property<string>("SAPWBSObject_P")
                        .HasMaxLength(100);

                    b.Property<string>("SAPWBSStatus")
                        .HasMaxLength(100);

                    b.Property<double?>("SaleArea");

                    b.Property<Guid?>("TowerID");

                    b.Property<DateTime?>("TransferOwnerShipDate");

                    b.Property<Guid?>("UnitDirectionMasterCenterID");

                    b.Property<string>("UnitLayoutType")
                        .HasMaxLength(1000);

                    b.Property<decimal?>("UnitLoanAmount")
                        .HasColumnType("Money");

                    b.Property<string>("UnitNo")
                        .HasMaxLength(50);

                    b.Property<Guid?>("UnitStatusMasterCenterID");

                    b.Property<Guid?>("UnitTypeMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<double?>("UsedArea");

                    b.Property<string>("WaterMeter")
                        .HasMaxLength(100);

                    b.Property<Guid?>("WaterMeterPriceID");

                    b.Property<string>("WaterMeterRemark")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("WaterMeterSaved");

                    b.Property<Guid?>("WaterMeterStatusMasterCenterID");

                    b.Property<Guid?>("WaterMeterTopicMasterCenterID");

                    b.Property<DateTime?>("WaterMeterTransferDate");

                    b.Property<DateTime?>("WaterMeterTransferDateSaved");

                    b.HasKey("ID");

                    b.HasIndex("AssetTypeMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ElectricMeterPriceID");

                    b.HasIndex("ElectricMeterStatusMasterCenterID");

                    b.HasIndex("ElectricMeterTopicMasterCenterID");

                    b.HasIndex("FloorID");

                    b.HasIndex("HouseDistrictID");

                    b.HasIndex("HouseProvinceID");

                    b.HasIndex("HouseSubDistrictID");

                    b.HasIndex("LandOfficeID");

                    b.HasIndex("ModelID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TowerID");

                    b.HasIndex("UnitDirectionMasterCenterID");

                    b.HasIndex("UnitStatusMasterCenterID");

                    b.HasIndex("UnitTypeMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WaterMeterPriceID");

                    b.HasIndex("WaterMeterStatusMasterCenterID");

                    b.HasIndex("WaterMeterTopicMasterCenterID");

                    b.ToTable("Unit","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.UnitOtherUnitInfoTag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("UnitOtherUnitInfoTag","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.WaiveQC", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualTransferDate");

                    b.Property<DateTime?>("ArriveDate");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime?>("EndFullDate");

                    b.Property<DateTime?>("EndMajorDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<DateTime?>("WaiveQCDate");

                    b.Property<DateTime?>("WaiveSignDate");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("WaiveQC","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRJ.WaterElectricMeterPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal?>("ElectricMeterPrice")
                        .HasColumnType("Money");

                    b.Property<string>("ElectricMeterSize")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ModelID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<int?>("Version");

                    b.Property<decimal?>("WaterMeterPrice")
                        .HasColumnType("Money");

                    b.Property<string>("WaterMeterSize")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModelID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("WaterElectricMeterPrice","PRJ");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingCreditCardItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingPromotionID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<double>("Fee");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterBookingCreditCardItemID");

                    b.Property<Guid?>("QuotationBookingCreditCardItemID");

                    b.Property<Guid?>("QuotationBookingPromotionFreeItemID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingPromotionID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterBookingCreditCardItemID");

                    b.HasIndex("QuotationBookingPromotionFreeItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingCreditCardItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingID");

                    b.Property<string>("BookingPromotionNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("BookingPromotionStageMasterCenterID");

                    b.Property<decimal>("BudgetAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("ChangePromotionWorkflowID");

                    b.Property<decimal?>("ContractDiscount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal?>("FGFDiscount")
                        .HasColumnType("Money");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterBookingPromotionID");

                    b.Property<Guid?>("PresentByUserID");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("TransferDateBefore");

                    b.Property<decimal?>("TransferDiscount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.HasIndex("BookingPromotionStageMasterCenterID");

                    b.HasIndex("ChangePromotionWorkflowID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterBookingPromotionID");

                    b.HasIndex("PresentByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingPromotion","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionDelivery", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingPromotionID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime?>("DeliveryDate");

                    b.Property<string>("DeliveryNo")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingPromotionID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingPromotionDelivery","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionDeliveryItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BookingPromotionDeliveryID");

                    b.Property<Guid?>("BookingPromotionItemID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<int>("DeliveryQuantity");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<int>("Quantity");

                    b.Property<int>("ReceiveQuantity");

                    b.Property<int>("RemainingReceiveQuantity");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<string>("SerialNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingPromotionDeliveryID");

                    b.HasIndex("BookingPromotionItemID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingPromotionDeliveryItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionExpense", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<Guid>("BookingPromotionID");

                    b.Property<decimal>("BuyerAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("ExpenseReponsibleByMasterCenterID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterPriceItemID");

                    b.Property<Guid?>("PaymentReceiverMasterCenterID");

                    b.Property<decimal>("SellerAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingPromotionID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ExpenseReponsibleByMasterCenterID");

                    b.HasIndex("MasterPriceItemID");

                    b.HasIndex("PaymentReceiverMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingPromotionExpense","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionFreeItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingPromotionID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterBookingPromotionFreeItemID");

                    b.Property<int>("Quantity");

                    b.Property<Guid?>("QuotationBookingPromotionFreeItemID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingPromotionID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterBookingPromotionFreeItemID");

                    b.HasIndex("QuotationBookingPromotionFreeItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingPromotionFreeItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingPromotionID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MainBookingPromotionItemID");

                    b.Property<Guid?>("MasterBookingPromotionItemID");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("Money");

                    b.Property<int>("Quantity");

                    b.Property<Guid?>("QuotationBookingPromotionItemID");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingPromotionID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterBookingPromotionItemID");

                    b.HasIndex("QuotationBookingPromotionItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingPromotionItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionRequest", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BookingPromotionID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("RequestDate");

                    b.Property<string>("RequestNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingPromotionID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingPromotionRequest","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionRequestItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BookingPromotionItemID");

                    b.Property<Guid?>("BookingPromotionRequestID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("DenyRemark")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("EstimateRequestDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("PRNo")
                        .HasMaxLength(100);

                    b.Property<int>("Quantity");

                    b.Property<int>("RemainingRequestQuantity");

                    b.Property<int>("RequestQuantity");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingPromotionItemID");

                    b.HasIndex("BookingPromotionRequestID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingPromotionRequestItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionStockReceiveItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgreementNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("BookingPromotionRequestID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialCode")
                        .HasMaxLength(100);

                    b.Property<string>("NameEN")
                        .HasMaxLength(1000);

                    b.Property<string>("NameTH")
                        .HasMaxLength(1000);

                    b.Property<string>("Plant")
                        .HasMaxLength(1000);

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("Money");

                    b.Property<int>("Quantity");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<string>("UnitEN")
                        .HasMaxLength(100);

                    b.Property<string>("UnitTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingPromotionRequestID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingPromotionStockReceiveItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.ChangePromotionWorkflow", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ApproveDate");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("PromotionTypeMasterCenterID");

                    b.Property<Guid>("RequestByUserID");

                    b.Property<DateTime>("RequestDate");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PromotionTypeMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ChangePromotionWorkflow","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MappingAgreement", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("NewAgreement")
                        .HasMaxLength(100);

                    b.Property<string>("NewItem")
                        .HasMaxLength(100);

                    b.Property<string>("NewMaterialCode")
                        .HasMaxLength(100);

                    b.Property<string>("OldAgreement")
                        .HasMaxLength(100);

                    b.Property<string>("OldItem")
                        .HasMaxLength(100);

                    b.Property<string>("OldMaterialCode")
                        .HasMaxLength(100);

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MappingAgreement","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterBookingCreditCardItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("EDCFeeID");

                    b.Property<double>("Fee");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo");

                    b.Property<Guid>("MasterBookingPromotionID");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameTH");

                    b.Property<int>("Order");

                    b.Property<Guid?>("PromotionItemStatusMasterCenterID");

                    b.Property<int>("Quantity");

                    b.Property<string>("UnitEN");

                    b.Property<string>("UnitTH");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("EDCFeeID");

                    b.HasIndex("MasterBookingPromotionID");

                    b.HasIndex("PromotionItemStatusMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MasterBookingCreditCardItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterBookingHouseModelFreeItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("MasterBookingPromotionFreeItemID");

                    b.Property<Guid?>("ModelID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterBookingPromotionFreeItemID");

                    b.HasIndex("ModelID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MasterBookingHouseModelFreeItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterBookingHouseModelItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("MasterBookingPromotionItemID");

                    b.Property<Guid?>("ModelID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterBookingPromotionItemID");

                    b.HasIndex("ModelID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MasterBookingHouseModelItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterBookingPromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("CashDiscount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime?>("EndDate");

                    b.Property<decimal?>("FGFDiscount")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsSendPR");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("PromotionNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PromotionStatusMasterCenterID");

                    b.Property<DateTime?>("StartDate");

                    b.Property<decimal?>("TransferDiscount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<DateTime?>("UsedDate");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("PromotionStatusMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MasterBookingPromotion","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterBookingPromotionFreeItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsShowInContract");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo");

                    b.Property<Guid>("MasterBookingPromotionID");

                    b.Property<string>("NameEN")
                        .HasMaxLength(1000);

                    b.Property<string>("NameTH")
                        .HasMaxLength(1000);

                    b.Property<int>("Order");

                    b.Property<int>("Quantity");

                    b.Property<int?>("ReceiveDays");

                    b.Property<string>("UnitEN")
                        .HasMaxLength(100);

                    b.Property<string>("UnitTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid?>("WhenPromotionReceiveMasterCenterID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterBookingPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WhenPromotionReceiveMasterCenterID");

                    b.ToTable("MasterBookingPromotionFreeItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterBookingPromotionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgreementNo")
                        .HasMaxLength(100);

                    b.Property<string>("BrandEN")
                        .HasMaxLength(1000);

                    b.Property<string>("BrandTH")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("DocType")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("GLAccountNo")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsPurchasing");

                    b.Property<bool>("IsShowInContract");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("MainPromotionItemID");

                    b.Property<Guid>("MasterBookingPromotionID");

                    b.Property<decimal>("MaterialBasePrice")
                        .HasColumnType("Money");

                    b.Property<string>("MaterialCode")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialGroupKey")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialName")
                        .HasMaxLength(1000);

                    b.Property<decimal>("MaterialPrice")
                        .HasColumnType("Money");

                    b.Property<string>("NameEN")
                        .HasMaxLength(1000);

                    b.Property<string>("NameTH")
                        .HasMaxLength(1000);

                    b.Property<int>("Order");

                    b.Property<string>("Plant")
                        .HasMaxLength(50);

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("Money");

                    b.Property<string>("PromotionItemNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PromotionItemStatusMasterCenterID");

                    b.Property<Guid?>("PromotionMaterialItemID");

                    b.Property<int>("Quantity");

                    b.Property<int?>("ReceiveDays");

                    b.Property<string>("RemarkEN")
                        .HasMaxLength(5000);

                    b.Property<string>("RemarkTH")
                        .HasMaxLength(5000);

                    b.Property<string>("SAPBaseUnit")
                        .HasMaxLength(50);

                    b.Property<string>("SAPCompanyID")
                        .HasMaxLength(50);

                    b.Property<string>("SAPPurchasingGroup")
                        .HasMaxLength(50);

                    b.Property<string>("SAPPurchasingOrg")
                        .HasMaxLength(50);

                    b.Property<string>("SAPSaleTaxCode")
                        .HasMaxLength(50);

                    b.Property<string>("SAPVendor")
                        .HasMaxLength(50);

                    b.Property<string>("SpecEN")
                        .HasMaxLength(5000);

                    b.Property<string>("SpecTH")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("StartDate");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<string>("UnitEN")
                        .HasMaxLength(100);

                    b.Property<string>("UnitTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<DateTime?>("UsedDate");

                    b.Property<double>("Vat");

                    b.Property<Guid?>("WhenPromotionReceiveMasterCenterID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterBookingPromotionID");

                    b.HasIndex("PromotionItemStatusMasterCenterID");

                    b.HasIndex("PromotionMaterialItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WhenPromotionReceiveMasterCenterID");

                    b.ToTable("MasterBookingPromotionItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterPreSaleHouseModelItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("MasterPreSalePromotionItemID");

                    b.Property<Guid?>("ModelID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterPreSalePromotionItemID");

                    b.HasIndex("ModelID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MasterPreSaleHouseModelItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterPreSalePromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<string>("CompanyCode")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsSendPR");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name");

                    b.Property<string>("Plant")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("PromotionNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PromotionStatusMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<DateTime?>("UsedDate");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("PromotionStatusMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MasterPreSalePromotion","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterPreSalePromotionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgreementNo")
                        .HasMaxLength(100);

                    b.Property<string>("BrandEN")
                        .HasMaxLength(1000);

                    b.Property<string>("BrandTH")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("DocType")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("GLAccountNo")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsPurchasing");

                    b.Property<bool>("IsShowInContract");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("MainPromotionItemID");

                    b.Property<Guid>("MasterPreSalePromotionID");

                    b.Property<decimal>("MaterialBasePrice")
                        .HasColumnType("Money");

                    b.Property<string>("MaterialCode")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialGroupKey")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialName")
                        .HasMaxLength(1000);

                    b.Property<decimal>("MaterialPrice")
                        .HasColumnType("Money");

                    b.Property<string>("NameEN")
                        .HasMaxLength(1000);

                    b.Property<string>("NameTH")
                        .HasMaxLength(1000);

                    b.Property<int>("Order");

                    b.Property<string>("Plant")
                        .HasMaxLength(50);

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("Money");

                    b.Property<string>("PromotionItemNo");

                    b.Property<Guid?>("PromotionItemStatusMasterCenterID");

                    b.Property<Guid?>("PromotionMaterialItemID");

                    b.Property<int>("Quantity");

                    b.Property<int?>("ReceiveDays");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<string>("RemarkEN")
                        .HasMaxLength(5000);

                    b.Property<string>("RemarkTH")
                        .HasMaxLength(5000);

                    b.Property<string>("SAPBaseUnit")
                        .HasMaxLength(50);

                    b.Property<string>("SAPCompanyID")
                        .HasMaxLength(50);

                    b.Property<string>("SAPPurchasingGroup")
                        .HasMaxLength(50);

                    b.Property<string>("SAPPurchasingOrg")
                        .HasMaxLength(50);

                    b.Property<string>("SAPSaleTaxCode")
                        .HasMaxLength(50);

                    b.Property<string>("SAPVendor")
                        .HasMaxLength(50);

                    b.Property<string>("SpecEN")
                        .HasMaxLength(5000);

                    b.Property<string>("SpecTH")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("StartDate");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<string>("UnitEN")
                        .HasMaxLength(100);

                    b.Property<string>("UnitTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<DateTime?>("UsedDate");

                    b.Property<double>("Vat");

                    b.Property<Guid?>("WhenPromotionReceiveMasterCenterID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterPreSalePromotionID");

                    b.HasIndex("PromotionItemStatusMasterCenterID");

                    b.HasIndex("PromotionMaterialItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WhenPromotionReceiveMasterCenterID");

                    b.ToTable("MasterPreSalePromotionItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterTransferCreditCardItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("EDCFeeID");

                    b.Property<double>("Fee");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo");

                    b.Property<Guid>("MasterTransferPromotionID");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameTH");

                    b.Property<int>("Order");

                    b.Property<Guid?>("PromotionItemStatusMasterCenterID");

                    b.Property<int>("Quantity");

                    b.Property<string>("UnitEN");

                    b.Property<string>("UnitTH");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("EDCFeeID");

                    b.HasIndex("MasterTransferPromotionID");

                    b.HasIndex("PromotionItemStatusMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MasterTransferCreditCardItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterTransferHouseModelFreeItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("MasterTransferPromotionFreeItemID");

                    b.Property<Guid?>("ModelID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterTransferPromotionFreeItemID");

                    b.HasIndex("ModelID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MasterTransferHouseModelFreeItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterTransferHouseModelItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("MasterTransferPromotionItemID");

                    b.Property<Guid?>("ModelID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterTransferPromotionItemID");

                    b.HasIndex("ModelID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MasterTransferHouseModelItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterTransferPromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsSendPR");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("PromotionNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PromotionStatusMasterCenterID");

                    b.Property<DateTime?>("StartDate");

                    b.Property<decimal?>("TransferDiscount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<DateTime?>("UsedDate");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("PromotionStatusMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MasterTransferPromotion","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterTransferPromotionFreeItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsShowInContract");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo");

                    b.Property<Guid>("MasterTransferPromotionID");

                    b.Property<string>("NameEN")
                        .HasMaxLength(1000);

                    b.Property<string>("NameTH")
                        .HasMaxLength(1000);

                    b.Property<int>("Order");

                    b.Property<int>("Quantity");

                    b.Property<int?>("ReceiveDays");

                    b.Property<string>("UnitEN")
                        .HasMaxLength(100);

                    b.Property<string>("UnitTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid?>("WhenPromotionReceiveMasterCenterID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterTransferPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WhenPromotionReceiveMasterCenterID");

                    b.ToTable("MasterTransferPromotionFreeItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterTransferPromotionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgreementNo")
                        .HasMaxLength(100);

                    b.Property<string>("BrandEN")
                        .HasMaxLength(1000);

                    b.Property<string>("BrandTH")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("DocType")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("GLAccountNo")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsPurchasing");

                    b.Property<bool>("IsShowInContract");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("MainPromotionItemID");

                    b.Property<Guid>("MasterTransferPromotionID");

                    b.Property<decimal>("MaterialBasePrice")
                        .HasColumnType("Money");

                    b.Property<string>("MaterialCode")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialGroupKey")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialName")
                        .HasMaxLength(1000);

                    b.Property<decimal>("MaterialPrice")
                        .HasColumnType("Money");

                    b.Property<string>("NameEN")
                        .HasMaxLength(1000);

                    b.Property<string>("NameTH")
                        .HasMaxLength(1000);

                    b.Property<int>("Order");

                    b.Property<string>("Plant")
                        .HasMaxLength(50);

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("Money");

                    b.Property<string>("PromotionItemNo");

                    b.Property<Guid?>("PromotionItemStatusMasterCenterID");

                    b.Property<Guid?>("PromotionMaterialItemID");

                    b.Property<int>("Quantity");

                    b.Property<int?>("ReceiveDays");

                    b.Property<string>("RemarkEN")
                        .HasMaxLength(5000);

                    b.Property<string>("RemarkTH")
                        .HasMaxLength(5000);

                    b.Property<string>("SAPBaseUnit")
                        .HasMaxLength(50);

                    b.Property<string>("SAPCompanyID")
                        .HasMaxLength(50);

                    b.Property<string>("SAPPurchasingGroup")
                        .HasMaxLength(50);

                    b.Property<string>("SAPPurchasingOrg")
                        .HasMaxLength(50);

                    b.Property<string>("SAPSaleTaxCode")
                        .HasMaxLength(50);

                    b.Property<string>("SAPVendor")
                        .HasMaxLength(50);

                    b.Property<string>("SpecEN")
                        .HasMaxLength(5000);

                    b.Property<string>("SpecTH")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("StartDate");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<string>("UnitEN")
                        .HasMaxLength(100);

                    b.Property<string>("UnitTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<DateTime?>("UsedDate");

                    b.Property<double>("Vat");

                    b.Property<Guid?>("WhenPromotionReceiveMasterCenterID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterTransferPromotionID");

                    b.HasIndex("PromotionItemStatusMasterCenterID");

                    b.HasIndex("PromotionMaterialItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WhenPromotionReceiveMasterCenterID");

                    b.ToTable("MasterTransferPromotionItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PRCancelJob", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("ErrorMessage");

                    b.Property<string>("FileName")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("SAPResultFileName")
                        .HasMaxLength(1000);

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PRCancelJob","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PRCancelJobItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PRCancelJobID");

                    b.Property<Guid?>("PRCancelJobStatusMasterCenterID");

                    b.Property<string>("PRNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PreSalePromotionRequestItemID");

                    b.Property<int>("Retry");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("UserName")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PRCancelJobID");

                    b.HasIndex("PRCancelJobStatusMasterCenterID");

                    b.HasIndex("PreSalePromotionRequestItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PRCancelJobItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PRCancelJobItemResult", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(10);

                    b.Property<string>("ErrorDescription")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsError");

                    b.Property<bool>("IsFMCreatePR");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PRCancelJobItemID");

                    b.Property<string>("PRNo")
                        .HasMaxLength(100);

                    b.Property<string>("SAPCreateBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("SAPCreateDateTime");

                    b.Property<bool>("SAPDeleteFlag");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PRCancelJobItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PRCancelJobItemResult","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PRRequestJob", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("ErrorMessage");

                    b.Property<string>("FileName")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("SAPResultFileName")
                        .HasMaxLength(1000);

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PRRequestJob","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PRRequestJobItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountAssignmentCategory")
                        .HasMaxLength(100);

                    b.Property<string>("AgreementNo")
                        .HasMaxLength(100);

                    b.Property<string>("ApproveName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedByDisplayName")
                        .HasMaxLength(100);

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<string>("DocType")
                        .HasMaxLength(100);

                    b.Property<string>("GLAccountNo")
                        .HasMaxLength(100);

                    b.Property<string>("GoodReceiptIndicator")
                        .HasMaxLength(100);

                    b.Property<string>("GoodRecipient")
                        .HasMaxLength(100);

                    b.Property<string>("InvoiceReceiptIndicator")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PRRequestJobID");

                    b.Property<Guid?>("PRRequestJobStatusMasterCenterID");

                    b.Property<string>("Plant")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PreSalePromotionRequestItemID");

                    b.Property<string>("PriceUnit")
                        .HasMaxLength(100);

                    b.Property<string>("PromotionName")
                        .HasMaxLength(100);

                    b.Property<string>("PromotionNo")
                        .HasMaxLength(100);

                    b.Property<string>("PurchasingGroup")
                        .HasMaxLength(100);

                    b.Property<string>("PurchasingOrg")
                        .HasMaxLength(100);

                    b.Property<int>("Quantity");

                    b.Property<string>("Requester")
                        .HasMaxLength(100);

                    b.Property<int>("Retry");

                    b.Property<string>("SAPWBSObject_P")
                        .HasMaxLength(100);

                    b.Property<string>("SerialNo")
                        .HasMaxLength(100);

                    b.Property<string>("ShortText")
                        .HasMaxLength(100);

                    b.Property<string>("TextB01")
                        .HasMaxLength(100);

                    b.Property<string>("TextB02")
                        .HasMaxLength(100);

                    b.Property<string>("TextB03")
                        .HasMaxLength(100);

                    b.Property<string>("TextB04")
                        .HasMaxLength(100);

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("UserName")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PRRequestJobID");

                    b.HasIndex("PRRequestJobStatusMasterCenterID");

                    b.HasIndex("PreSalePromotionRequestItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PRRequestJobItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PRRequestJobItemResult", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(10);

                    b.Property<string>("ErrorDescription")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsError");

                    b.Property<bool>("IsFMCreatePR");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialNo")
                        .HasMaxLength(100);

                    b.Property<string>("PRNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PRRequestJobItemID");

                    b.Property<string>("SAPCreateBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("SAPCreateDateTime");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PRRequestJobItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PRRequestJobItemResult","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PreSalePromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterPreSalePromotionID");

                    b.Property<string>("PreSalePromotionNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterPreSalePromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PreSalePromotion","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PreSalePromotionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterPreSalePromotionItemID");

                    b.Property<Guid>("PreSalePromotionID");

                    b.Property<Guid>("PreSalePromotionRequestItemID");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("Money");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<string>("Unit")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterPreSalePromotionItemID");

                    b.HasIndex("PreSalePromotionID");

                    b.HasIndex("PreSalePromotionRequestItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PreSalePromotionItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PreSalePromotionRequest", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterPreSalePromotionID");

                    b.Property<DateTime?>("PRCompletedDate");

                    b.Property<Guid>("ProjectID");

                    b.Property<Guid?>("PromotionRequestPRStatusMasterCenterID");

                    b.Property<DateTime?>("RequestDate");

                    b.Property<string>("RequestNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterPreSalePromotionID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("PromotionRequestPRStatusMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PreSalePromotionRequest","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PreSalePromotionRequestItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterPreSalePromotionItemID");

                    b.Property<string>("NameEN")
                        .HasMaxLength(1000);

                    b.Property<string>("NameTH")
                        .HasMaxLength(1000);

                    b.Property<string>("PRNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PreSalePromotionRequestUnitID");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("Money");

                    b.Property<int>("Quantity");

                    b.Property<DateTime?>("ReceiveDate");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<string>("UnitEN")
                        .HasMaxLength(100);

                    b.Property<string>("UnitTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterPreSalePromotionItemID");

                    b.HasIndex("PreSalePromotionRequestUnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PreSalePromotionRequestItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PreSalePromotionRequestUnit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("PreSalePromotionRequestID");

                    b.Property<Guid?>("PromotionRequestPRJobTypeMasterCenterID");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<Guid?>("SAPPRStatusMasterCenterID");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PreSalePromotionRequestID");

                    b.HasIndex("PromotionRequestPRJobTypeMasterCenterID");

                    b.HasIndex("SAPPRStatusMasterCenterID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PreSalePromotionRequestUnit","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionMaterial", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("GLAccountNo")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("MaterialGroupKey")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialGroupName")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<string>("Plant")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PromotionMaterialGroupID");

                    b.Property<string>("TypeCode")
                        .HasMaxLength(10);

                    b.Property<string>("TypeName")
                        .HasMaxLength(1000);

                    b.Property<string>("UnitEN")
                        .HasMaxLength(100);

                    b.Property<string>("UnitPO")
                        .HasMaxLength(100);

                    b.Property<string>("UnitTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("ValuationClass")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PromotionMaterialGroupID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PromotionMaterial","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionMaterialAddPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActiveDate");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<double>("HighRisePercent");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<double>("LowRisePercent");

                    b.Property<Guid>("PromotionMaterialGroupID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PromotionMaterialGroupID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PromotionMaterialAddPrice","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionMaterialGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("DocType")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsGenPR");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PromotionMaterialGroup","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionMaterialItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgreementNo")
                        .HasMaxLength(100);

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("Money");

                    b.Property<string>("BrandEN")
                        .HasMaxLength(1000);

                    b.Property<string>("BrandTH")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("DocType")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("GLAccountNo")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAutoPR");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsPurchasing");

                    b.Property<bool>("IsShowInContract");

                    b.Property<bool>("IsUseMasterInPR");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialCode")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialGroupKey")
                        .HasMaxLength(100);

                    b.Property<Guid?>("MaterialItemStatusMasterCenterID");

                    b.Property<string>("NameEN")
                        .HasMaxLength(1000);

                    b.Property<string>("NameTH")
                        .HasMaxLength(1000);

                    b.Property<string>("Plant")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<Guid?>("PromotionMaterialID");

                    b.Property<string>("RemarkEN")
                        .HasMaxLength(5000);

                    b.Property<string>("RemarkTH")
                        .HasMaxLength(5000);

                    b.Property<string>("SAPBaseUnit")
                        .HasMaxLength(50);

                    b.Property<string>("SAPCompanyID")
                        .HasMaxLength(50);

                    b.Property<string>("SAPConditionRecordNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("SAPCreatedTime");

                    b.Property<string>("SAPDeleteIndicator")
                        .HasMaxLength(50);

                    b.Property<string>("SAPPurchasingGroup")
                        .HasMaxLength(50);

                    b.Property<string>("SAPPurchasingOrg")
                        .HasMaxLength(50);

                    b.Property<string>("SAPSaleTaxCode")
                        .HasMaxLength(50);

                    b.Property<string>("SAPTermPaymentKey")
                        .HasMaxLength(50);

                    b.Property<string>("SAPVarKey")
                        .HasMaxLength(50);

                    b.Property<string>("SAPVendor")
                        .HasMaxLength(50);

                    b.Property<string>("SpecEN")
                        .HasMaxLength(5000);

                    b.Property<string>("SpecTH")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("UnitEN")
                        .HasMaxLength(1000);

                    b.Property<string>("UnitTH")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<double>("Vat");

                    b.Property<Guid?>("WhenPromotionReceiveMasterCenterID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MaterialItemStatusMasterCenterID");

                    b.HasIndex("PromotionMaterialID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WhenPromotionReceiveMasterCenterID");

                    b.ToTable("PromotionMaterialItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionVatRate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<double>("VatRate");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PromotionVatRate","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationBookingCreditCardItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterBookingCreditCardItemID");

                    b.Property<Guid>("QuotationBookingPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterBookingCreditCardItemID");

                    b.HasIndex("QuotationBookingPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("QuotationBookingCreditCardItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationBookingPromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterBookingPromotionID");

                    b.Property<Guid>("QuotationID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterBookingPromotionID");

                    b.HasIndex("QuotationID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("QuotationBookingPromotion","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationBookingPromotionFreeItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterBookingPromotionFreeItemID");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("QuotationBookingPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterBookingPromotionFreeItemID");

                    b.HasIndex("QuotationBookingPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("QuotationBookingPromotionFreeItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationBookingPromotionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MainQuotationBookingPromotionID");

                    b.Property<Guid?>("MasterBookingPromotionItemID");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("QuotationBookingPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterBookingPromotionItemID");

                    b.HasIndex("QuotationBookingPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("QuotationBookingPromotionItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationPromotionExpense", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<decimal>("BuyerAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("ExpenseReponsibleByMasterCenterID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterPriceItemID");

                    b.Property<Guid>("QuotationBookingPromotionID");

                    b.Property<decimal>("SellerAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ExpenseReponsibleByMasterCenterID");

                    b.HasIndex("MasterPriceItemID");

                    b.HasIndex("QuotationBookingPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("QuotationPromotionExpense","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationTransferCreditCardItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterTransferCreditCardItemID");

                    b.Property<Guid>("QuotationTransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterTransferCreditCardItemID");

                    b.HasIndex("QuotationTransferPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("QuotationTransferCreditCardItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationTransferPromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterTransferPromotionID");

                    b.Property<Guid>("QuotationID");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterTransferPromotionID");

                    b.HasIndex("QuotationID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("QuotationTransferPromotion","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationTransferPromotionFreeItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterTransferPromotionFreeItemID");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("QuotationTransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterTransferPromotionFreeItemID");

                    b.HasIndex("QuotationTransferPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("QuotationTransferPromotionFreeItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationTransferPromotionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MainQuotationTransferPromotionID");

                    b.Property<Guid?>("MasterTransferPromotionItemID");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("QuotationTransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterTransferPromotionItemID");

                    b.HasIndex("QuotationTransferPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("QuotationTransferPromotionItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.SAPMaterialSyncJob", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("JobNo")
                        .HasMaxLength(50);

                    b.Property<string>("Params");

                    b.Property<double>("Progress");

                    b.Property<string>("ResponseMessage");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("SAPMaterialSyncJob","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.SAP_ZRFCMM01", b =>
                {
                    b.Property<string>("WERKS")
                        .HasMaxLength(4);

                    b.Property<string>("MATNR")
                        .HasMaxLength(18);

                    b.Property<string>("BKLAS")
                        .HasMaxLength(4);

                    b.Property<string>("BSTME")
                        .HasMaxLength(3);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("KONTS")
                        .HasMaxLength(10);

                    b.Property<string>("MAKTX")
                        .HasMaxLength(40);

                    b.Property<string>("MATKL")
                        .HasMaxLength(9);

                    b.Property<string>("MEINS")
                        .HasMaxLength(3);

                    b.Property<string>("MSEHT")
                        .HasMaxLength(10);

                    b.Property<string>("MTART")
                        .HasMaxLength(4);

                    b.Property<string>("MTBEZ")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("WGBEZ")
                        .HasMaxLength(20);

                    b.HasKey("WERKS", "MATNR");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("SAP_ZRFCMM01","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.SAP_ZRFCMM02", b =>
                {
                    b.Property<string>("WERKS")
                        .HasMaxLength(4);

                    b.Property<string>("MATNR")
                        .HasMaxLength(18);

                    b.Property<string>("EBELN")
                        .HasMaxLength(10);

                    b.Property<string>("EBELP")
                        .HasMaxLength(5);

                    b.Property<string>("KDATB")
                        .HasMaxLength(8);

                    b.Property<string>("KDATE")
                        .HasMaxLength(8);

                    b.Property<string>("DATAB")
                        .HasMaxLength(8);

                    b.Property<string>("DATBI")
                        .HasMaxLength(8);

                    b.Property<string>("BUKRS")
                        .HasMaxLength(4);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("EKGRP")
                        .HasMaxLength(3);

                    b.Property<string>("EKORG")
                        .HasMaxLength(4);

                    b.Property<string>("ERDAT")
                        .HasMaxLength(8);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("KBETR")
                        .HasMaxLength(11);

                    b.Property<string>("KMEIN")
                        .HasMaxLength(3);

                    b.Property<string>("KNUMH")
                        .HasMaxLength(10);

                    b.Property<string>("LIFNR")
                        .HasMaxLength(10);

                    b.Property<string>("LOEKZ")
                        .HasMaxLength(1);

                    b.Property<string>("MAKTX")
                        .HasMaxLength(40);

                    b.Property<string>("MEINS")
                        .HasMaxLength(3);

                    b.Property<string>("SLTAX")
                        .HasMaxLength(2);

                    b.Property<string>("THUNT")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("VAKEY")
                        .HasMaxLength(100);

                    b.Property<string>("ZTERM")
                        .HasMaxLength(4);

                    b.HasKey("WERKS", "MATNR", "EBELN", "EBELP", "KDATB", "KDATE", "DATAB", "DATBI");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("SAP_ZRFCMM02","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferCreditCardItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<double>("Fee");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterTransferCreditCardItemID");

                    b.Property<Guid?>("QuotationTransferCreditCardItemID");

                    b.Property<Guid?>("QuotationTransferPromotionFreeItemID");

                    b.Property<Guid>("TransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterTransferCreditCardItemID");

                    b.HasIndex("QuotationTransferPromotionFreeItemID");

                    b.HasIndex("TransferPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferCreditCardItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingID");

                    b.Property<decimal>("BudgetAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("ChangePromotionWorkflowID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFreeMortgageCharge");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUnlocked3PercentTransferDiscount");

                    b.Property<bool>("IsUnlockedTransferDiscount");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterTransferPromotionID");

                    b.Property<Guid?>("PresentByUserID");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("TransferDateBefore");

                    b.Property<decimal?>("TransferDiscount")
                        .HasColumnType("Money");

                    b.Property<string>("TransferPromotionNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("Unlocked3PercentTransferDiscountByUserID");

                    b.Property<DateTime?>("Unlocked3PercentTransferDiscountDate");

                    b.Property<Guid?>("UnlockedTransferDiscountByUserID");

                    b.Property<DateTime?>("UnlockedTransferDiscountDate");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.HasIndex("ChangePromotionWorkflowID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterTransferPromotionID");

                    b.HasIndex("PresentByUserID");

                    b.HasIndex("Unlocked3PercentTransferDiscountByUserID");

                    b.HasIndex("UnlockedTransferDiscountByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferPromotion","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionDelivery", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime?>("DeliveryDate");

                    b.Property<string>("DeliveryNo")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("TransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("TransferPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferPromotionDelivery","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionDeliveryItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<int>("DeliveryQuantity");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<int>("Quantity");

                    b.Property<int>("ReceiveQuantity");

                    b.Property<int>("RemainingReceiveQuantity");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<string>("SerialNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("TransferPromotionDeliveryID");

                    b.Property<Guid?>("TransferPromotionItemID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("TransferPromotionDeliveryID");

                    b.HasIndex("TransferPromotionItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferPromotionDeliveryItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionExpense", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<decimal>("BuyerAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("ExpenseReponsibleByMasterCenterID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterPriceItemID");

                    b.Property<Guid?>("PaymentReceiverMasterCenterID");

                    b.Property<decimal>("SellerAmount")
                        .HasColumnType("Money");

                    b.Property<Guid>("TransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ExpenseReponsibleByMasterCenterID");

                    b.HasIndex("MasterPriceItemID");

                    b.HasIndex("PaymentReceiverMasterCenterID");

                    b.HasIndex("TransferPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferPromotionExpense","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionFreeItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterTransferPromotionFreeItemID");

                    b.Property<int>("Quantity");

                    b.Property<Guid?>("QuotationTransferPromotionFreeItemID");

                    b.Property<Guid>("TransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterTransferPromotionFreeItemID");

                    b.HasIndex("QuotationTransferPromotionFreeItemID");

                    b.HasIndex("TransferPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferPromotionFreeItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MainTransferPromotionItemID");

                    b.Property<Guid?>("MasterTransferPromotionItemID");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("Money");

                    b.Property<int>("Quantity");

                    b.Property<Guid?>("QuotationTransferPromotionItemID");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<Guid>("TransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterTransferPromotionItemID");

                    b.HasIndex("QuotationTransferPromotionItemID");

                    b.HasIndex("TransferPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferPromotionItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionRequest", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("RequestDate");

                    b.Property<string>("RequestNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("TransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("TransferPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferPromotionRequest","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionRequestItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("DenyRemark")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("EstimateRequestDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("PRNo")
                        .HasMaxLength(100);

                    b.Property<int>("Quantity");

                    b.Property<int>("RemainingRequestQuantity");

                    b.Property<int>("RequestQuantity");

                    b.Property<Guid?>("TransferPromotionItemID");

                    b.Property<Guid?>("TransferPromotionRequestID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("TransferPromotionItemID");

                    b.HasIndex("TransferPromotionRequestID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferPromotionRequestItem","PRM");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionStockReceiveItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgreementNo")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItemNo")
                        .HasMaxLength(100);

                    b.Property<string>("MaterialCode")
                        .HasMaxLength(100);

                    b.Property<string>("NameEN")
                        .HasMaxLength(1000);

                    b.Property<string>("NameTH")
                        .HasMaxLength(1000);

                    b.Property<string>("Plant")
                        .HasMaxLength(1000);

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("Money");

                    b.Property<int>("Quantity");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Money");

                    b.Property<Guid?>("TransferPromotionRequestID");

                    b.Property<string>("UnitEN")
                        .HasMaxLength(100);

                    b.Property<string>("UnitTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("TransferPromotionRequestID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferPromotionStockReceiveItem","PRM");
                });

            modelBuilder.Entity("Database.Models.SAL.Agreement", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgreementNo")
                        .HasMaxLength(50);

                    b.Property<Guid?>("AgreementStatusMasterCenterID");

                    b.Property<decimal>("AreaPricePerUnit")
                        .HasColumnType("Money");

                    b.Property<Guid?>("BookingID");

                    b.Property<DateTime?>("ContractDate");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("HighRiseConstructionStatusMasterCenterID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool?>("IsPrintApproved");

                    b.Property<bool>("IsSellerPayLastDownInstallment");

                    b.Property<bool?>("IsSignContractApproved");

                    b.Property<bool>("IsUsed");

                    b.Property<double?>("OffsetArea");

                    b.Property<decimal?>("OffsetAreaPrice")
                        .HasColumnType("Money");

                    b.Property<Guid?>("PrintApprovedByUserID");

                    b.Property<DateTime?>("PrintApprovedDate");

                    b.Property<Guid?>("ProjectID");

                    b.Property<DateTime?>("SignAgreementDate");

                    b.Property<DateTime?>("SignContractApprovedDate");

                    b.Property<DateTime?>("SignContractRequestDate");

                    b.Property<Guid?>("SignContractRequestUserID");

                    b.Property<DateTime?>("TransferOwnershipDate");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AgreementStatusMasterCenterID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("HighRiseConstructionStatusMasterCenterID");

                    b.HasIndex("PrintApprovedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("SignContractRequestUserID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Agreement","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementFile", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgreementID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("FileName")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AgreementID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("AgreementFile","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementOwner", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgreementID");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<Guid?>("ChangeAgreementOwnerWorkflowID");

                    b.Property<DateTime?>("CitizenExpireDate");

                    b.Property<string>("CitizenIdentityNo")
                        .HasMaxLength(50);

                    b.Property<string>("ContactFirstName")
                        .HasMaxLength(100);

                    b.Property<string>("ContactLastname")
                        .HasMaxLength(100);

                    b.Property<string>("ContactNo");

                    b.Property<Guid?>("ContactTitleENMasterCenterID");

                    b.Property<Guid?>("ContactTitleTHMasterCenterID");

                    b.Property<Guid?>("ContactTypeMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("DeleteReason")
                        .HasMaxLength(5000);

                    b.Property<string>("FatherName")
                        .HasMaxLength(100);

                    b.Property<string>("FatherNational")
                        .HasMaxLength(100);

                    b.Property<string>("FatherOtherNational")
                        .HasMaxLength(100);

                    b.Property<string>("FirstNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("FirstNameTH")
                        .HasMaxLength(100);

                    b.Property<Guid?>("FromContactID");

                    b.Property<Guid?>("GenderMasterCenterID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAddNewOwner");

                    b.Property<bool>("IsCancelledOwner");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsMainOwner");

                    b.Property<bool>("IsThaiNationality");

                    b.Property<bool>("IsTransferOwner");

                    b.Property<bool>("IsUsed");

                    b.Property<bool>("IsVIP");

                    b.Property<string>("LastNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("LastNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("LineID")
                        .HasMaxLength(100);

                    b.Property<string>("MarriageName")
                        .HasMaxLength(100);

                    b.Property<string>("MarriageNational")
                        .HasMaxLength(100);

                    b.Property<string>("MarriageOtherNational")
                        .HasMaxLength(100);

                    b.Property<string>("MiddleNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("MiddleNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("MotherName")
                        .HasMaxLength(100);

                    b.Property<string>("MotherNational")
                        .HasMaxLength(100);

                    b.Property<string>("MotherOtherNational")
                        .HasMaxLength(100);

                    b.Property<Guid?>("NationalMasterCenterID");

                    b.Property<string>("Nickname")
                        .HasMaxLength(100);

                    b.Property<int>("Order");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumberExt")
                        .HasMaxLength(50);

                    b.Property<string>("TaxID")
                        .HasMaxLength(100);

                    b.Property<string>("TitleExtEN")
                        .HasMaxLength(100);

                    b.Property<string>("TitleExtTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("WeChatID")
                        .HasMaxLength(100);

                    b.Property<string>("WhatsAppID")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("AgreementID");

                    b.HasIndex("ChangeAgreementOwnerWorkflowID");

                    b.HasIndex("ContactTitleENMasterCenterID");

                    b.HasIndex("ContactTitleTHMasterCenterID");

                    b.HasIndex("ContactTypeMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FromContactID");

                    b.HasIndex("GenderMasterCenterID");

                    b.HasIndex("NationalMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("AgreementOwner","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementOwnerAddress", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgreementOwnerID");

                    b.Property<Guid?>("ContactAddressTypeMasterCenterID");

                    b.Property<Guid?>("CountryID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("ForeignDistrict")
                        .HasMaxLength(100);

                    b.Property<string>("ForeignProvince")
                        .HasMaxLength(100);

                    b.Property<string>("ForeignSubDistrict")
                        .HasMaxLength(100);

                    b.Property<Guid?>("FromContactAddressID");

                    b.Property<string>("HouseNoEN")
                        .HasMaxLength(100);

                    b.Property<string>("HouseNoTH")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("MooEN")
                        .HasMaxLength(100);

                    b.Property<string>("MooTH")
                        .HasMaxLength(100);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProvinceID");

                    b.Property<string>("RoadEN")
                        .HasMaxLength(100);

                    b.Property<string>("RoadTH")
                        .HasMaxLength(100);

                    b.Property<string>("SoiEN")
                        .HasMaxLength(100);

                    b.Property<string>("SoiTH")
                        .HasMaxLength(100);

                    b.Property<Guid?>("SubDistrictID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("VillageEN")
                        .HasMaxLength(1000);

                    b.Property<string>("VillageTH")
                        .HasMaxLength(1000);

                    b.HasKey("ID");

                    b.HasIndex("AgreementOwnerID");

                    b.HasIndex("ContactAddressTypeMasterCenterID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("FromContactAddressID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("SubDistrictID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("AgreementOwnerAddress","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementOwnerEmail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgreementOwnerID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<Guid?>("FromContactEmailID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsMain");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AgreementOwnerID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FromContactEmailID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("AgreementOwnerEmail","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementOwnerPhone", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgreementOwnerID");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("FromContactPhoneID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsMain");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumberExt")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PhoneTypeMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AgreementOwnerID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FromContactPhoneID");

                    b.HasIndex("PhoneTypeMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("AgreementOwnerPhone","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.Booking", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgentEmployeeID");

                    b.Property<Guid?>("AgentID");

                    b.Property<DateTime?>("ApproveDate");

                    b.Property<DateTime?>("BookingDate");

                    b.Property<string>("BookingNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("BookingStatusMasterCenterID");

                    b.Property<DateTime?>("CancelDate");

                    b.Property<int?>("CancelType");

                    b.Property<Guid?>("ChangeFromBookingID");

                    b.Property<Guid?>("ChangeToBookingID");

                    b.Property<Guid?>("ChangeUnitByUserID");

                    b.Property<DateTime?>("ChangeUnitDate");

                    b.Property<DateTime?>("ContractDate");

                    b.Property<DateTime?>("ContractDueDate");

                    b.Property<Guid?>("CreateBookingFromID");

                    b.Property<Guid?>("CreateBookingFromMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromChangeUnit");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool?>("IsPaid");

                    b.Property<bool>("IsReadyToPayment");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ModelID");

                    b.Property<Guid?>("ProjectID");

                    b.Property<Guid?>("ProjectSaleUserID");

                    b.Property<Guid?>("QuotationID");

                    b.Property<Guid?>("ReferContactID");

                    b.Property<string>("ReferContactName")
                        .HasMaxLength(1000);

                    b.Property<double?>("SaleArea");

                    b.Property<Guid?>("SaleOfficerTypeMasterCenterID");

                    b.Property<Guid?>("SaleUserID");

                    b.Property<DateTime?>("TransferOwnershipDate");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AgentEmployeeID");

                    b.HasIndex("AgentID");

                    b.HasIndex("BookingStatusMasterCenterID");

                    b.HasIndex("ChangeFromBookingID");

                    b.HasIndex("ChangeToBookingID");

                    b.HasIndex("ChangeUnitByUserID");

                    b.HasIndex("CreateBookingFromID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModelID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("ProjectSaleUserID");

                    b.HasIndex("QuotationID");

                    b.HasIndex("ReferContactID");

                    b.HasIndex("SaleOfficerTypeMasterCenterID");

                    b.HasIndex("SaleUserID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Booking","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.BookingOwner", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<Guid?>("BookingID");

                    b.Property<DateTime?>("CitizenExpireDate");

                    b.Property<string>("CitizenIdentityNo")
                        .HasMaxLength(50);

                    b.Property<string>("ContactFirstName")
                        .HasMaxLength(100);

                    b.Property<string>("ContactLastname")
                        .HasMaxLength(100);

                    b.Property<string>("ContactNo");

                    b.Property<Guid?>("ContactTitleENMasterCenterID");

                    b.Property<Guid?>("ContactTitleTHMasterCenterID");

                    b.Property<Guid?>("ContactTypeMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("DeleteReason")
                        .HasMaxLength(5000);

                    b.Property<string>("FatherName")
                        .HasMaxLength(100);

                    b.Property<string>("FatherNational")
                        .HasMaxLength(100);

                    b.Property<string>("FatherOtherNational")
                        .HasMaxLength(100);

                    b.Property<string>("FirstNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("FirstNameTH")
                        .HasMaxLength(100);

                    b.Property<Guid?>("FromContactID");

                    b.Property<Guid?>("GenderMasterCenterID");

                    b.Property<bool>("IsAgreementOwner");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsMainOwner");

                    b.Property<bool>("IsThaiNationality");

                    b.Property<bool>("IsUsed");

                    b.Property<bool>("IsVIP");

                    b.Property<string>("LastNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("LastNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("LineID")
                        .HasMaxLength(100);

                    b.Property<string>("MarriageName")
                        .HasMaxLength(100);

                    b.Property<string>("MarriageNational")
                        .HasMaxLength(100);

                    b.Property<string>("MarriageOtherNational")
                        .HasMaxLength(100);

                    b.Property<string>("MiddleNameEN")
                        .HasMaxLength(100);

                    b.Property<string>("MiddleNameTH")
                        .HasMaxLength(100);

                    b.Property<string>("MotherName")
                        .HasMaxLength(100);

                    b.Property<string>("MotherNational")
                        .HasMaxLength(100);

                    b.Property<string>("MotherOtherNational")
                        .HasMaxLength(100);

                    b.Property<Guid?>("NationalMasterCenterID");

                    b.Property<string>("Nickname")
                        .HasMaxLength(100);

                    b.Property<int>("Order");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumberExt")
                        .HasMaxLength(50);

                    b.Property<string>("TaxID")
                        .HasMaxLength(100);

                    b.Property<string>("TitleExtEN")
                        .HasMaxLength(100);

                    b.Property<string>("TitleExtTH")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("WeChatID")
                        .HasMaxLength(100);

                    b.Property<string>("WhatsAppID")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.HasIndex("ContactTitleENMasterCenterID");

                    b.HasIndex("ContactTitleTHMasterCenterID");

                    b.HasIndex("ContactTypeMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FromContactID");

                    b.HasIndex("GenderMasterCenterID");

                    b.HasIndex("NationalMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingOwner","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.BookingOwnerAddress", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingOwnerID");

                    b.Property<Guid?>("ContactAddressTypeMasterCenterID");

                    b.Property<Guid?>("CountryID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("DistrictID");

                    b.Property<string>("ForeignDistrict")
                        .HasMaxLength(100);

                    b.Property<string>("ForeignProvince")
                        .HasMaxLength(100);

                    b.Property<string>("ForeignSubDistrict")
                        .HasMaxLength(100);

                    b.Property<Guid?>("FromContactAddressID");

                    b.Property<string>("HouseNoEN")
                        .HasMaxLength(100);

                    b.Property<string>("HouseNoTH")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("MooEN")
                        .HasMaxLength(100);

                    b.Property<string>("MooTH")
                        .HasMaxLength(100);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProvinceID");

                    b.Property<string>("RoadEN")
                        .HasMaxLength(100);

                    b.Property<string>("RoadTH")
                        .HasMaxLength(100);

                    b.Property<string>("SoiEN")
                        .HasMaxLength(100);

                    b.Property<string>("SoiTH")
                        .HasMaxLength(100);

                    b.Property<Guid?>("SubDistrictID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<string>("VillageEN")
                        .HasMaxLength(1000);

                    b.Property<string>("VillageTH")
                        .HasMaxLength(1000);

                    b.HasKey("ID");

                    b.HasIndex("BookingOwnerID");

                    b.HasIndex("ContactAddressTypeMasterCenterID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("FromContactAddressID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("SubDistrictID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingOwnerAddress","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.BookingOwnerEmail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingOwnerID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<Guid?>("FromContactEmailID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsMain");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingOwnerID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FromContactEmailID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingOwnerEmail","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.BookingOwnerPhone", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingOwnerID");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("FromContactPhoneID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsMain");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumberExt")
                        .HasMaxLength(100);

                    b.Property<Guid?>("PhoneTypeMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingOwnerID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FromContactPhoneID");

                    b.HasIndex("PhoneTypeMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("BookingOwnerPhone","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.CancelMemo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgreementID");

                    b.Property<Guid?>("BankID");

                    b.Property<string>("BankRejectDocument")
                        .HasMaxLength(100);

                    b.Property<Guid?>("BookingID");

                    b.Property<Guid?>("CancelByUserID");

                    b.Property<Guid?>("CancelReasonID");

                    b.Property<string>("CancelRemark")
                        .HasMaxLength(5000);

                    b.Property<Guid?>("CancelReturnMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("HasAgreemnt");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<decimal?>("PenaltyAmount")
                        .HasColumnType("Money");

                    b.Property<decimal?>("ReturnAmount")
                        .HasColumnType("Money");

                    b.Property<string>("ReturnBankAccount")
                        .HasMaxLength(50);

                    b.Property<string>("ReturnBankAccountName")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ReturnBankBranchID");

                    b.Property<Guid?>("ReturnBankID");

                    b.Property<string>("ReturnBookBankFile")
                        .HasMaxLength(1000);

                    b.Property<string>("ReturnCitizenIdentityNo")
                        .HasMaxLength(50);

                    b.Property<decimal?>("TotalPromotionDeliverAmount")
                        .HasColumnType("Money");

                    b.Property<decimal?>("TotalReceivedAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AgreementID");

                    b.HasIndex("BankID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CancelByUserID");

                    b.HasIndex("CancelReasonID");

                    b.HasIndex("CancelReturnMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ReturnBankBranchID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("CancelMemo","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.ChangeAgreementOwnerFile", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChangeAgreementOwnerWorkflowID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("File")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ChangeAgreementOwnerWorkflowID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ChangeAgreementOwnerFile","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.ChangeAgreementOwnerWorkflow", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AppointmentDate");

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<Guid?>("ApproverRoleID");

                    b.Property<Guid?>("ApproverUserID");

                    b.Property<Guid?>("ChangeAgreementOwnerTypeMasterCenterID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal>("Fee")
                        .HasColumnType("Money");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool?>("IsRequestApproved");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("NewTransferOwnershipDate");

                    b.Property<string>("RejectComment")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("RequestApprovedDate");

                    b.Property<Guid?>("RequestApproverRoleID");

                    b.Property<Guid?>("RequestApproverUserID");

                    b.Property<string>("RequestRejectComment")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ApproverRoleID");

                    b.HasIndex("ApproverUserID");

                    b.HasIndex("ChangeAgreementOwnerTypeMasterCenterID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("RequestApproverRoleID");

                    b.HasIndex("RequestApproverUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ChangeAgreementOwnerWorkflows");
                });

            modelBuilder.Entity("Database.Models.SAL.ChangeUnitFile", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChangeUnitWorkflowID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("File")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ChangeUnitWorkflowID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ChangeUnitFile","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.ChangeUnitWorkflow", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<Guid?>("ApproverRoleID");

                    b.Property<Guid?>("ApproverUserID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("FromAgreementID");

                    b.Property<Guid?>("FromBookingID");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool?>("IsRequestApproved");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("RejectComment")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("RequestApprovedDate");

                    b.Property<Guid?>("RequestApproverRoleID");

                    b.Property<Guid?>("RequestApproverUserID");

                    b.Property<string>("RequestRejectComment")
                        .HasMaxLength(5000);

                    b.Property<Guid?>("ToAgreementID");

                    b.Property<Guid?>("ToBookingID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ApproverRoleID");

                    b.HasIndex("ApproverUserID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FromAgreementID");

                    b.HasIndex("FromBookingID");

                    b.HasIndex("RequestApproverRoleID");

                    b.HasIndex("RequestApproverUserID");

                    b.HasIndex("ToAgreementID");

                    b.HasIndex("ToBookingID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("ChangeUnitWorkflow","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.MinPriceBudgetApproval", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApprovedTime");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("MinPriceBudgetWorkflowID");

                    b.Property<int>("Order");

                    b.Property<Guid?>("RoleID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MinPriceBudgetWorkflowID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("UserID");

                    b.ToTable("MinPriceBudgetApproval","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.MinPriceBudgetWorkflow", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BookingID");

                    b.Property<Guid?>("BookingPromotionID");

                    b.Property<Guid?>("BudgetPromotionTypeMasterCenterID");

                    b.Property<decimal>("CashDiscount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("ChangePromotionWorkflowID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("FromMasterBudgetPromotionID");

                    b.Property<Guid?>("FromMasterMinPriceID");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsRequestBudgetPromotion");

                    b.Property<bool>("IsRequestMinPrice");

                    b.Property<bool>("IsUsed");

                    b.Property<decimal>("MasterBudgetPromotion")
                        .HasColumnType("Money");

                    b.Property<decimal>("MasterMinPrice")
                        .HasColumnType("Money");

                    b.Property<Guid?>("MinPriceBudgetWorkflowStageMasterCenterID");

                    b.Property<Guid?>("MinPriceWorkflowTypeMasterCenterID");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("RejectComment")
                        .HasMaxLength(5000);

                    b.Property<decimal>("RequestBudgetPromotion")
                        .HasColumnType("Money");

                    b.Property<decimal>("RequestMinPrice")
                        .HasColumnType("Money");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("Money");

                    b.Property<decimal>("TransferDiscount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("TransferPromotionID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.HasIndex("BookingPromotionID");

                    b.HasIndex("BudgetPromotionTypeMasterCenterID");

                    b.HasIndex("ChangePromotionWorkflowID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FromMasterBudgetPromotionID");

                    b.HasIndex("FromMasterMinPriceID");

                    b.HasIndex("MinPriceBudgetWorkflowStageMasterCenterID");

                    b.HasIndex("MinPriceWorkflowTypeMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TransferPromotionID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MinPriceBudgetWorkflow","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.MortgageWithBank", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ApprovedAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("ApprovedLoadAPAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("BankID");

                    b.Property<string>("ChoseBankOtherReason");

                    b.Property<string>("ChosenBankReason");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal>("FirstDeductAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("Interest")
                        .HasColumnType("Money");

                    b.Property<decimal>("InterestOnFire")
                        .HasColumnType("Money");

                    b.Property<bool>("IsChosenBankStatus");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("Money");

                    b.Property<string>("LoanStatus");

                    b.Property<DateTime?>("LoanSubmitDate");

                    b.Property<DateTime?>("ReceiveDate");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<decimal>("ReturnCustomerAmount")
                        .HasColumnType("Money");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("MortgageWithBank","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.PriceListWorkflow", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApprovedByUserID");

                    b.Property<DateTime?>("ApprovedTime");

                    b.Property<decimal?>("BookingAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("BookingID");

                    b.Property<Guid?>("ChangePromotionWorkflowID");

                    b.Property<decimal?>("ContractAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<decimal?>("Installment")
                        .HasColumnType("Money");

                    b.Property<decimal?>("InstallmentAmount")
                        .HasColumnType("Money");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<decimal?>("MasterBookingAmount")
                        .HasColumnType("Money");

                    b.Property<decimal?>("MasterContractAmount")
                        .HasColumnType("Money");

                    b.Property<decimal?>("MasterInstallment")
                        .HasColumnType("Money");

                    b.Property<decimal?>("MasterInstallmentAmount")
                        .HasColumnType("Money");

                    b.Property<decimal?>("MasterNormalInstallment")
                        .HasColumnType("Money");

                    b.Property<decimal?>("MasterSellingPrice")
                        .HasColumnType("Money");

                    b.Property<string>("MasterSpecialInstallmentAmounts")
                        .HasMaxLength(1000);

                    b.Property<string>("MasterSpecialInstallments")
                        .HasMaxLength(1000);

                    b.Property<decimal?>("NormalInstallment")
                        .HasColumnType("Money");

                    b.Property<Guid?>("PriceListWorkflowStageMasterCenterID");

                    b.Property<Guid?>("ProjectID");

                    b.Property<Guid?>("QuotationID");

                    b.Property<string>("RejectComment")
                        .HasMaxLength(5000);

                    b.Property<Guid?>("RoleID");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("Money");

                    b.Property<string>("SpecialInstallmentAmounts")
                        .HasMaxLength(1000);

                    b.Property<string>("SpecialInstallments")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("UnitID");

                    b.Property<Guid?>("UnitStatusMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ApprovedByUserID");

                    b.HasIndex("BookingID");

                    b.HasIndex("ChangePromotionWorkflowID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("PriceListWorkflowStageMasterCenterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("QuotationID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UnitStatusMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("PriceListWorkflow","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.Quotation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ContractDate");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("IssueDate");

                    b.Property<Guid?>("ProjectID");

                    b.Property<string>("QuotationNo")
                        .HasMaxLength(100);

                    b.Property<Guid?>("QuotationStatusMasterCenterID");

                    b.Property<DateTime?>("TransferOwnershipDate");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("QuotationStatusMasterCenterID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Quotation","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.QuotationCompare", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("QuotationCompare","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.QuotationUnitPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("FromPriceListID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("QuotationID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FromPriceListID");

                    b.HasIndex("QuotationID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("QuotationUnitPrice","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.QuotationUnitPriceItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<int?>("Installment");

                    b.Property<decimal?>("InstallmentAmount")
                        .HasColumnType("Money");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsToBePay");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterPriceItemID");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<decimal?>("PricePerUnitAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("PriceTypeMasterCenterID");

                    b.Property<double?>("PriceUnitAmount");

                    b.Property<Guid?>("PriceUnitMasterCenterID");

                    b.Property<Guid>("QuotationUnitPriceID");

                    b.Property<string>("SpecialInstallmentAmounts")
                        .HasMaxLength(1000);

                    b.Property<string>("SpecialInstallments")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterPriceItemID");

                    b.HasIndex("PriceTypeMasterCenterID");

                    b.HasIndex("PriceUnitMasterCenterID");

                    b.HasIndex("QuotationUnitPriceID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("QuotationUnitPriceItem","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.SignContractWorkflow", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActionByRoleID");

                    b.Property<Guid?>("ActionByUserID");

                    b.Property<DateTime?>("ActionDate");

                    b.Property<Guid?>("AgreementID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Remark");

                    b.Property<Guid?>("SignContractActionMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ActionByRoleID");

                    b.HasIndex("ActionByUserID");

                    b.HasIndex("AgreementID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("SignContractActionMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("SignContractWorkflow","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TitledeedReceive", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime?>("FIProceedDate");

                    b.Property<string>("FIStatus");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("LCProceedDate");

                    b.Property<string>("LCStatus");

                    b.Property<string>("Status");

                    b.Property<Guid>("TitledeedDetailID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("TitledeedDetailID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TitledeedReceive","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TitledeedReceiveHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActorUserID");

                    b.Property<string>("ChangedStatus");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("PreviousStatus");

                    b.Property<DateTime>("ProceedDate");

                    b.Property<Guid>("TitledeedReceiveID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ActorUserID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("TitledeedReceiveID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TitledeedReceiveHistory","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.Transfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualTransferDate");

                    b.Property<Guid?>("AgreementID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LCID");

                    b.Property<DateTime?>("ScheduleTransferDate");

                    b.Property<string>("TransferNo");

                    b.Property<Guid?>("UnitID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AgreementID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("LCID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Transfer","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferAgreementOwner", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<Guid?>("FromAgreementOwnerID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ToAgreementOwnerID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FromAgreementOwnerID");

                    b.HasIndex("ToAgreementOwnerID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferAgreementOwner","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferCash", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("PayDate");

                    b.Property<int>("PayTo");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("Money");

                    b.Property<Guid>("TransferID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("TransferID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferCash","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferCheque", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BankBranchID");

                    b.Property<Guid?>("BankID");

                    b.Property<string>("ChequeNo");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("PayDate");

                    b.Property<int>("PayTo");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("Money");

                    b.Property<Guid>("TransferID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BankBranchID");

                    b.HasIndex("BankID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("TransferID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferCheque","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferDocument", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsRejected");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<Guid>("TransferID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("TransferID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferDocument","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferOwner", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContactID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("TransferID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("TransferID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferOwner","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferUnit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgreementID");

                    b.Property<DateTime?>("ApproveDate");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("NewUnitID");

                    b.Property<Guid?>("OldUnitID");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AgreementID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("NewUnitID");

                    b.HasIndex("OldUnitID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TransferUnit","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.UnitPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookingID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("UnitPriceStageMasterCenterID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UnitPriceStageMasterCenterID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("UnitPrice","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.UnitPriceInstallment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime?>("DueDate");

                    b.Property<Guid?>("InstallmentOfUnitPriceItemID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool?>("IsPaid");

                    b.Property<bool>("IsSellerPay");

                    b.Property<bool>("IsSpecialInstallment");

                    b.Property<bool>("IsUsed");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("PayDate");

                    b.Property<int>("Period");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("InstallmentOfUnitPriceItemID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("UnitPriceInstallment","SAL");
                });

            modelBuilder.Entity("Database.Models.SAL.UnitPriceItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime?>("DueDate");

                    b.Property<Guid?>("FromMasterPriceListItemID");

                    b.Property<int?>("Installment");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool?>("IsPaid");

                    b.Property<bool>("IsToBePay");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("MasterPriceItemID");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<DateTime?>("PayDate");

                    b.Property<decimal?>("PricePerUnitAmount")
                        .HasColumnType("Money");

                    b.Property<Guid?>("PriceTypeMasterCenterID");

                    b.Property<double?>("PriceUnitAmount");

                    b.Property<Guid?>("PriceUnitMasterCenterID");

                    b.Property<Guid>("UnitPriceID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MasterPriceItemID");

                    b.HasIndex("PriceTypeMasterCenterID");

                    b.HasIndex("PriceUnitMasterCenterID");

                    b.HasIndex("UnitPriceID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("UnitPriceItem","SAL");
                });

            modelBuilder.Entity("Database.Models.USR.AuthorizeRule", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("HasAuthorize");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentRuleID");

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ParentRuleID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("AuthorizeRule","USR");
                });

            modelBuilder.Entity("Database.Models.USR.AuthorizeRuleByRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorizeRuleID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("RoleID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("AuthorizeRuleID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("AuthorizeRuleByRole","USR");
                });

            modelBuilder.Entity("Database.Models.USR.FavoriteMenu", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("MenuID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("MenuID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("UserID");

                    b.ToTable("FavoriteMenu","USR");
                });

            modelBuilder.Entity("Database.Models.USR.MyTask", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("Detail");

                    b.Property<DateTime?>("DueDate");

                    b.Property<Guid?>("FromUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<Guid>("TaskTypeID");

                    b.Property<string>("Topic");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FromUserID");

                    b.HasIndex("TaskTypeID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("UserID");

                    b.ToTable("MyTask","USR");
                });

            modelBuilder.Entity("Database.Models.USR.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid>("UserID");

                    b.HasKey("Token");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("UserID");

                    b.ToTable("RefreshToken","USR");
                });

            modelBuilder.Entity("Database.Models.USR.Role", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int?>("RefID");

                    b.Property<Guid?>("RoleGroupID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("RoleGroupID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("Role","USR");
                });

            modelBuilder.Entity("Database.Models.USR.RoleGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("RoleGroup","USR");
                });

            modelBuilder.Entity("Database.Models.USR.TaskType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("TaskType","USR");
                });

            modelBuilder.Entity("Database.Models.USR.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientID")
                        .HasMaxLength(100);

                    b.Property<string>("ClientSecret")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(1000);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("EmployeeNo")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsClient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("LastActivityTime");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<string>("LastName")
                        .HasMaxLength(1000);

                    b.Property<string>("LineId")
                        .HasMaxLength(100);

                    b.Property<string>("LineQRCode")
                        .HasMaxLength(1000);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(1000);

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(100);

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("ReportToUserID");

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("User","USR");
                });

            modelBuilder.Entity("Database.Models.USR.UserAuthorizeProject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAuthorizeProject","USR");
                });

            modelBuilder.Entity("Database.Models.USR.UserBackgroundJob", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Params");

                    b.Property<double>("Progress");

                    b.Property<string>("ResponseMessage");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("UserBackgroundJob","USR");
                });

            modelBuilder.Entity("Database.Models.USR.UserDefaultProject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("ProjectID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserDefaultProject","USR");
                });

            modelBuilder.Entity("Database.Models.USR.UserRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("RoleID");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRole","USR");
                });

            modelBuilder.Entity("Database.Models.WFL.Workflow", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Memo");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<bool?>("Result");

                    b.Property<string>("TemplateName");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid>("WorkflowTypeID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WorkflowTypeID");

                    b.ToTable("Workflow","WFL");
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowApprover", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApproverID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Memo");

                    b.Property<bool?>("Result");

                    b.Property<Guid?>("RoleID");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid>("WorkflowStepID");

                    b.HasKey("ID");

                    b.HasIndex("ApproverID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WorkflowStepID");

                    b.ToTable("WorkflowApprover","WFL");
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowApproverTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApproverID");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("RoleID");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid>("WorkflowStepTemplateID");

                    b.HasKey("ID");

                    b.HasIndex("ApproverID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WorkflowStepTemplateID");

                    b.ToTable("WorkflowApproverTemplate","WFL");
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowStep", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApproveCondition");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<bool?>("Result");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid>("WorkflowID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WorkflowID");

                    b.ToTable("WorkflowStep","WFL");
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowStepTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApproveCondition");

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid>("WorkflowTemplateID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WorkflowTemplateID");

                    b.ToTable("WorkflowStepTemplate","WFL");
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.Property<Guid>("WorkflowTypeID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.HasIndex("WorkflowTypeID");

                    b.ToTable("WorkflowTemplate","WFL");
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<Guid?>("CreatedByUserID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFromMigration");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Name");

                    b.Property<string>("Ref1");

                    b.Property<string>("Ref2");

                    b.Property<string>("Ref3");

                    b.Property<string>("Ref4");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UpdatedByUserID");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("UpdatedByUserID");

                    b.ToTable("WorkflowType","WFL");
                });

            modelBuilder.Entity("Database.Models.ACC.CalendarLock", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.ACC.CalendarLockHistory", b =>
                {
                    b.HasOne("Database.Models.ACC.CalendarLock", "CalendarLocks")
                        .WithMany()
                        .HasForeignKey("CalendarLockID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Database.Models.ACC.GLDetail", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.ACC.GLExport", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLAccount", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.ACC.PostGLFormatTextFile", "FormatTextFile")
                        .WithMany()
                        .HasForeignKey("FormatTextFileID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLChartOfAccount", b =>
                {
                    b.HasOne("Database.Models.MST.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.MST.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLDepositAccount", b =>
                {
                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.MST.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLFormatTextFile", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.ACC.PostGLHouseType", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculateOther", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "LCUser")
                        .WithMany()
                        .HasForeignKey("LCUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculatePerMonth", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "LCAtProject")
                        .WithMany()
                        .HasForeignKey("LCAtProjectID");

                    b.HasOne("Database.Models.USR.User", "LCClosedDealUser")
                        .WithMany()
                        .HasForeignKey("LCClosedDealUserID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculateSale", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "LCAtProject")
                        .WithMany()
                        .HasForeignKey("LCAtProjectID");

                    b.HasOne("Database.Models.USR.User", "LCClosedDeal")
                        .WithMany()
                        .HasForeignKey("LCClosedDealID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.CalculateTransfer", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "LCCTransfer")
                        .WithMany()
                        .HasForeignKey("LCCTransferID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.ChangeLCSale", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("ContractID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.AgentEmployee", "NewAgentEmployee")
                        .WithMany()
                        .HasForeignKey("NewAgentEmployeeID");

                    b.HasOne("Database.Models.MST.Agent", "NewAgent")
                        .WithMany()
                        .HasForeignKey("NewAgentID");

                    b.HasOne("Database.Models.USR.User", "NewProjectSaleUser")
                        .WithMany()
                        .HasForeignKey("NewProjectSaleUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "NewSaleOfficerType")
                        .WithMany()
                        .HasForeignKey("NewSaleOfficerTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "NewSaleUser")
                        .WithMany()
                        .HasForeignKey("NewSaleUserID");

                    b.HasOne("Database.Models.MST.AgentEmployee", "OldAgentEmployee")
                        .WithMany()
                        .HasForeignKey("OldAgentEmployeeID");

                    b.HasOne("Database.Models.MST.Agent", "OldAgent")
                        .WithMany()
                        .HasForeignKey("OldAgentID");

                    b.HasOne("Database.Models.USR.User", "OldProjectSaleUser")
                        .WithMany()
                        .HasForeignKey("OldProjectSaleUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "OldSaleOfficerType")
                        .WithMany()
                        .HasForeignKey("OldSaleOfficerTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "OldSaleUser")
                        .WithMany()
                        .HasForeignKey("OldSaleUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.ChangeLCTransfer", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "NewLCTransfer")
                        .WithMany()
                        .HasForeignKey("NewLCTransferID");

                    b.HasOne("Database.Models.USR.User", "OldLCTransfer")
                        .WithMany()
                        .HasForeignKey("OldLCTransferID");

                    b.HasOne("Database.Models.SAL.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.DeductMoney", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "SaleUser")
                        .WithMany()
                        .HasForeignKey("SaleUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.GeneralSetting", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.IncreaseMoney", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "SaleUser")
                        .WithMany()
                        .HasForeignKey("SaleUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingAgent", b =>
                {
                    b.HasOne("Database.Models.MST.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingFixSale", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingFixSaleModel", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingFixTransfer", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingFixTransferModel", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingSale", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CMS.RateSettingTransfer", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.ActivityTask", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "OverdueStatus")
                        .WithMany()
                        .HasForeignKey("ActivityTaskOverdueStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "Status")
                        .WithMany()
                        .HasForeignKey("ActivityTaskStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "Topic")
                        .WithMany()
                        .HasForeignKey("ActivityTaskTopicMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "Type")
                        .WithMany()
                        .HasForeignKey("ActivityTaskTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.LeadActivity", "LeadActivity")
                        .WithMany()
                        .HasForeignKey("LeadActivityID");

                    b.HasOne("Database.Models.CTM.OpportunityActivity", "OpportunityActivity")
                        .WithMany()
                        .HasForeignKey("OpportunityActivityID");

                    b.HasOne("Database.Models.USR.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.CTM.RevisitActivity", "RevisitActivity")
                        .WithMany()
                        .HasForeignKey("RevisitActivityID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.ActivityTaskUpdateOverdueJob", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.Contact", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "ContactTitleEN")
                        .WithMany()
                        .HasForeignKey("ContactTitleENMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ContactTitleTH")
                        .WithMany()
                        .HasForeignKey("ContactTitleTHMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderMasterCenterID");

                    b.HasOne("Database.Models.CTM.Opportunity", "LastOpportunity")
                        .WithMany()
                        .HasForeignKey("LastOpportunityID");

                    b.HasOne("Database.Models.MST.MasterCenter", "National")
                        .WithMany()
                        .HasForeignKey("NationalMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactAddress", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "ContactAddressType")
                        .WithMany()
                        .HasForeignKey("ContactAddressTypeMasterCenterID");

                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.HasOne("Database.Models.MST.SubDistrict", "SubDistrict")
                        .WithMany()
                        .HasForeignKey("SubDistrictID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactAddressProject", b =>
                {
                    b.HasOne("Database.Models.CTM.ContactAddress", "ContactAddress")
                        .WithMany()
                        .HasForeignKey("ContactAddressID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactEmail", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.ContactPhone", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany("ContactPhones")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PhoneType")
                        .WithMany()
                        .HasForeignKey("PhoneTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.Lead", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "Advertisement")
                        .WithMany()
                        .HasForeignKey("AdvertisementMasterCenterID");

                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.LeadActivityStatus", "CurrentLeadActivityStatus")
                        .WithMany()
                        .HasForeignKey("CurrentLeadActivityStatusID");

                    b.HasOne("Database.Models.MST.MasterCenter", "LeadStatus")
                        .WithMany()
                        .HasForeignKey("LeadStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "LeadType")
                        .WithMany()
                        .HasForeignKey("LeadTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadActivity", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "ConvenientTime")
                        .WithMany()
                        .HasForeignKey("ConvenientTimeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "LeadActivityType")
                        .WithMany()
                        .HasForeignKey("LeadActivityTypeMasterCenterID");

                    b.HasOne("Database.Models.CTM.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.CTM.LeadActivityStatus", "LeadActivityStatus")
                        .WithMany()
                        .HasForeignKey("StatusID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadActivityStatus", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "LeadActivityFollowUpType")
                        .WithMany()
                        .HasForeignKey("LeadActivityFollowUpTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "LeadActivityStatusType")
                        .WithMany()
                        .HasForeignKey("LeadActivityStatusTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadAssign", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadID");

                    b.HasOne("Database.Models.USR.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadScoring", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadID");

                    b.HasOne("Database.Models.CTM.LeadScoringType", "LeadScoringType")
                        .WithMany()
                        .HasForeignKey("LeadScoringTypeID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadScoringType", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.LeadSyncJob", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.Opportunity", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "EstimateSalesOpportunity")
                        .WithMany()
                        .HasForeignKey("EstimateSalesOpportunityMasterCenterID");

                    b.HasOne("Database.Models.CTM.OpportunityActivity", "LastOpportunityActivity")
                        .WithMany()
                        .HasForeignKey("LastOpportunityActivityID");

                    b.HasOne("Database.Models.USR.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.MST.MasterCenter", "SalesOpportunity")
                        .WithMany()
                        .HasForeignKey("SalesOpportunityMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "StatusQuestionaire")
                        .WithMany()
                        .HasForeignKey("StatusQuestionaireMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.OpportunityActivity", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "ConvenientTime")
                        .WithMany()
                        .HasForeignKey("ConvenientTimeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "OpportunityActivityType")
                        .WithMany()
                        .HasForeignKey("OpportunityActivityTypeMasterCenterID");

                    b.HasOne("Database.Models.CTM.Opportunity", "Opportunity")
                        .WithMany()
                        .HasForeignKey("OpportunityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.OpportunityActivityResult", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.OpportunityActivity", "OpportunityAcitivity")
                        .WithMany()
                        .HasForeignKey("OpportunityAcitivityID");

                    b.HasOne("Database.Models.CTM.OpportunityActivityStatus", "OpportunityAcitivityStatus")
                        .WithMany()
                        .HasForeignKey("StatusID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.OpportunityActivityStatus", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "WalkActivityStatusType")
                        .WithMany()
                        .HasForeignKey("WalkActivityStatusTypeMasterCenterId");
                });

            modelBuilder.Entity("Database.Models.CTM.OpportunityAssign", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.Opportunity", "Opportunity")
                        .WithMany()
                        .HasForeignKey("OpportunityID");

                    b.HasOne("Database.Models.USR.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.ProjectVisitCounterSetting", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.RevisitActivity", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "ConvenientTime")
                        .WithMany()
                        .HasForeignKey("ConvenientTimeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.Opportunity", "Opportunity")
                        .WithMany()
                        .HasForeignKey("OpportunityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "RevisitActivityType")
                        .WithMany()
                        .HasForeignKey("RevisitActivityTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.RevisitActivityResult", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.RevisitActivity", "RevisitActivity")
                        .WithMany()
                        .HasForeignKey("RevisitAcitivityID");

                    b.HasOne("Database.Models.CTM.RevisitActivityStatus", "RevisitActivityStatus")
                        .WithMany()
                        .HasForeignKey("StatusID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.RevisitActivityStatus", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.CTM.Visitor", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ContactStatus")
                        .WithMany()
                        .HasForeignKey("ContactStatusMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PersonalVisitCardType")
                        .WithMany()
                        .HasForeignKey("PersonalVisitCardTypeMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.MST.MasterCenter", "RefVisitorRelation")
                        .WithMany()
                        .HasForeignKey("RefVisitorRelationMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "SalesOpportunity")
                        .WithMany()
                        .HasForeignKey("SalesOpportunityMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "VisitBy")
                        .WithMany()
                        .HasForeignKey("VisitByMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "WalkStatus")
                        .WithMany()
                        .HasForeignKey("VisitorWalkStatusMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "WelcomeLCUser")
                        .WithMany()
                        .HasForeignKey("WelcomeLCUserID");
                });

            modelBuilder.Entity("Database.Models.DBO.JobTransaction", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.DBO.MergeContactResult", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.BillPaymentDetail", b =>
                {
                    b.HasOne("Database.Models.FIN.BillPaymentHeader", "BillPayment")
                        .WithMany()
                        .HasForeignKey("BillPaymentHeaderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "BillPaymentStatus")
                        .WithMany()
                        .HasForeignKey("BillPaymentStatusID");

                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.BillPaymentHeader", b =>
                {
                    b.HasOne("Database.Models.MST.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");

                    b.HasOne("Database.Models.MST.MasterCenter", "BillPaymentImportType")
                        .WithMany()
                        .HasForeignKey("BillPaymentImportTypeID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.CustomerWallet", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.CustomerWalletTransaction", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.CustomerWallet", "CustomerWallet")
                        .WithMany()
                        .HasForeignKey("CustomerWalletID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentTypeItem")
                        .WithMany()
                        .HasForeignKey("PaymentTypeItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.DepositDetail", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.DepositHeader", "DepositHeader")
                        .WithMany()
                        .HasForeignKey("DepositHeaderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.DepositHeader", b =>
                {
                    b.HasOne("Database.Models.MST.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.DepositHeader", "ReferentDepositHeader")
                        .WithMany()
                        .HasForeignKey("ReferentID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitApprovalForm", b =>
                {
                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "DirectApprovalFormStatus")
                        .WithMany()
                        .HasForeignKey("DirectApprovalFormStatusID");

                    b.HasOne("Database.Models.MST.MasterCenter", "DirectApprovalFormType")
                        .WithMany()
                        .HasForeignKey("DirectApprovalFormTypeID");

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitExportDetail", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.DirectCreditDebitApprovalForm", "DirectCreditDebitApprovalForm")
                        .WithMany()
                        .HasForeignKey("DirectCreditDebitApprovalFormID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.FIN.DirectCreditDebitExportHeader", "DirectCreditDebitExportHeader")
                        .WithMany()
                        .HasForeignKey("DirectCreditDebitExportHeaderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.SAL.UnitPriceInstallment", "UnitPriceInstallment")
                        .WithMany()
                        .HasForeignKey("UnitPriceInstallmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.DirectCreditDebitExportHeader", b =>
                {
                    b.HasOne("Database.Models.MST.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.BankAccount", "DirectFormType")
                        .WithMany()
                        .HasForeignKey("DirectFormTypeID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.Payment", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentBankTransfer", b =>
                {
                    b.HasOne("Database.Models.MST.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.FIN.UnknownPayment", "UnknownPayment")
                        .WithMany()
                        .HasForeignKey("UnknownPaymentID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentBillPayment", b =>
                {
                    b.HasOne("Database.Models.FIN.BillPaymentDetail", "BillPaymentTransaction")
                        .WithMany()
                        .HasForeignKey("BillPaymentTransactionID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentCashierCheque", b =>
                {
                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.Company", "PayToCompany")
                        .WithMany()
                        .HasForeignKey("PayToCompanyID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentCreditCard", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "CreditCardPaymentType")
                        .WithMany()
                        .HasForeignKey("CreditCardPaymentTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "CreditCardType")
                        .WithMany()
                        .HasForeignKey("CreditCardTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.EDC", "EDC")
                        .WithMany()
                        .HasForeignKey("EDCID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentCustomerWallet", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.CustomerWalletTransaction", "CustomerWalletTransaction")
                        .WithMany()
                        .HasForeignKey("CustomerWalletTransactionID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentDebitCard", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.EDC", "EDC")
                        .WithMany()
                        .HasForeignKey("EDCID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentDirectCreditDebit", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentForeignBankTransfer", b =>
                {
                    b.HasOne("Database.Models.MST.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.Bank", "ForeignBank")
                        .WithMany()
                        .HasForeignKey("ForeignBankID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ForeignTransferType")
                        .WithMany()
                        .HasForeignKey("ForeignTransferTypeMasterCenterID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.FIN.UnknownPayment", "UnknownPayment")
                        .WithMany()
                        .HasForeignKey("UnknownPaymentID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterPriceItem", "MasterPriceItem")
                        .WithMany()
                        .HasForeignKey("MasterPriceItemID");

                    b.HasOne("Database.Models.FIN.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.SAL.UnitPriceInstallment", "UnitPriceInstallment")
                        .WithMany()
                        .HasForeignKey("UnitPriceInstallmentID");

                    b.HasOne("Database.Models.SAL.UnitPriceItem", "UnitPriceItem")
                        .WithMany()
                        .HasForeignKey("UnitPriceItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentMethod", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "PaymentMethodType")
                        .WithMany()
                        .HasForeignKey("PaymentMethodTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentMethodToItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.PaymentItem", "PaymentItem")
                        .WithMany()
                        .HasForeignKey("PaymentItemID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentPersonalCheque", b =>
                {
                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.Company", "PayToCompany")
                        .WithMany()
                        .HasForeignKey("PayToCompanyID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.PaymentQRCode", b =>
                {
                    b.HasOne("Database.Models.MST.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.Receipt", b =>
                {
                    b.HasOne("Database.Models.MST.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptHeader", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID");

                    b.HasOne("Database.Models.CTM.Contact", "SendToContact")
                        .WithMany()
                        .HasForeignKey("SendToContactID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptSendEmailHistory", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.ReceiptHeader", "ReceiptHeader")
                        .WithMany()
                        .HasForeignKey("ReceiptHeaderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptSendPrintingHistory", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.ReceiptHeader", "ReceiptHeader")
                        .WithMany()
                        .HasForeignKey("ReceiptHeaderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptTempDetail", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.PaymentItem", "PaymentItem")
                        .WithMany()
                        .HasForeignKey("PaymentItemID");

                    b.HasOne("Database.Models.FIN.ReceiptTempHeader", "ReceiptTempHeader")
                        .WithMany()
                        .HasForeignKey("ReceiptTempHeaderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.ReceiptTempHeader", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.UnknownPayment", b =>
                {
                    b.HasOne("Database.Models.MST.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");

                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "UnknowPaymentStatus")
                        .WithMany()
                        .HasForeignKey("UnknowPaymentStatusID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.UnknownPaymentReverse", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.UnknownPayment", "UnknownPayment")
                        .WithMany()
                        .HasForeignKey("UnknownPaymentID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.FIN.UnknownPaymentReverseDetail", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.FIN.UnknownPaymentReverse", "UnknownPaymentReverse")
                        .WithMany()
                        .HasForeignKey("UnknownPaymentReverseID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.LET.DownPaymentLetter", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.LET.TransferLetter", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.Agent", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.HasOne("Database.Models.MST.SubDistrict", "SubDistrict")
                        .WithMany()
                        .HasForeignKey("SubDistrictID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.AgentEmployee", b =>
                {
                    b.HasOne("Database.Models.MST.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.BG", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.BOConfiguration", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.Bank", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.BankAccount", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "BankAccountType")
                        .WithMany()
                        .HasForeignKey("BankAccountTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.MST.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "GLAccountType")
                        .WithMany()
                        .HasForeignKey("GLAccountTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.BankBranch", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany("BankBranches")
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.HasOne("Database.Models.MST.SubDistrict", "SubDistrict")
                        .WithMany()
                        .HasForeignKey("SubDistrictID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.Brand", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "UnitNumberFormat")
                        .WithMany()
                        .HasForeignKey("UnitNumberFormatMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.CancelReason", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "CancelApproveFlow")
                        .WithMany()
                        .HasForeignKey("CancelApproveFlowMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "GroupOfCancelReason")
                        .WithMany()
                        .HasForeignKey("GroupOfCancelReasonMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.CancelReturnSetting", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.Company", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.HasOne("Database.Models.MST.SubDistrict", "SubDistrict")
                        .WithMany()
                        .HasForeignKey("SubDistrictID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.Country", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.District", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.EDC", b =>
                {
                    b.HasOne("Database.Models.MST.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.MST.MasterCenter", "CardMachineStatus")
                        .WithMany()
                        .HasForeignKey("CardMachineStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "CardMachineType")
                        .WithMany()
                        .HasForeignKey("CardMachineTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.EDCFee", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "CreditCardPaymentType")
                        .WithMany()
                        .HasForeignKey("CreditCardPaymentTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "CreditCardType")
                        .WithMany()
                        .HasForeignKey("CreditCardTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PaymentCardType")
                        .WithMany()
                        .HasForeignKey("PaymentCardTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.ErrorMessage", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.LandOffice", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.LegalEntity", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "BankAccountType")
                        .WithMany()
                        .HasForeignKey("BankAccountTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.MasterCenter", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenterGroup", "MasterCenterGroup")
                        .WithMany()
                        .HasForeignKey("MasterCenterGroupKey");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.MasterCenterGroup", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.MasterPriceItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PaymentReceiver")
                        .WithMany()
                        .HasForeignKey("PaymentReceiverMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PriceType")
                        .WithMany()
                        .HasForeignKey("PriceTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.Menu", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MenuArea", "MenuArea")
                        .WithMany()
                        .HasForeignKey("MenuAreaID");

                    b.HasOne("Database.Models.MST.Menu", "ParentMenu")
                        .WithMany()
                        .HasForeignKey("ParentMenuID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.MenuArea", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.Province", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.RunningNumberCounter", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.SubBG", b =>
                {
                    b.HasOne("Database.Models.MST.BG", "BG")
                        .WithMany("SubBGs")
                        .HasForeignKey("BGID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.SubDistrict", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany("SubDistricts")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.LandOffice", "LandOffice")
                        .WithMany("SubDistricts")
                        .HasForeignKey("LandOfficeID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.MST.TypeOfRealEstate", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "RealEstateCategory")
                        .WithMany()
                        .HasForeignKey("RealEstateCategoryMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.NTF.EmailNotification", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.NTF.MobileInstallation", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.NTF.MobileNotification", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.NTF.NotificationTemplate", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.NTF.SmsNotification", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.NTF.WebNotification", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.OST.ContactStory", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.OST.ContactStoryGroup", "ContactStoryGroup")
                        .WithMany()
                        .HasForeignKey("ContactStoryGroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.OST.ContactStoryType", "ContactStoryType")
                        .WithMany()
                        .HasForeignKey("ContactStoryTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.OST.ContactStoryGroup", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.OST.ContactStoryType", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.OST.UnitStory", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.OST.UnitStoryGroup", "UnitStoryGroup")
                        .WithMany()
                        .HasForeignKey("UnitStoryGroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.OST.UnitStoryType", "UnitStoryType")
                        .WithMany()
                        .HasForeignKey("UnitStoryTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.OST.UnitStoryGroup", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.OST.UnitStoryType", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.Address", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Database.Models.MST.SubDistrict", "HouseSubDistrict")
                        .WithMany()
                        .HasForeignKey("HouseSubDistrictID");

                    b.HasOne("Database.Models.MST.LandOffice", "LandOffice")
                        .WithMany()
                        .HasForeignKey("LandOfficeID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ProjectAddressType")
                        .WithMany()
                        .HasForeignKey("ProjectAddressTypeMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.HasOne("Database.Models.MST.SubDistrict", "SubDistrict")
                        .WithMany()
                        .HasForeignKey("SubDistrictID");

                    b.HasOne("Database.Models.MST.SubDistrict", "TitledeedSubDistrict")
                        .WithMany()
                        .HasForeignKey("TitledeedSubDistrictID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.AgreementConfig", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.LegalEntity", "LegalEntity")
                        .WithMany()
                        .HasForeignKey("LegalEntityID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetMinPrice", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "BudgetMinPriceType")
                        .WithMany()
                        .HasForeignKey("BudgetMinPriceTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetMinPriceUnit", b =>
                {
                    b.HasOne("Database.Models.PRJ.BudgetMinPrice", "BudgetMinPrice")
                        .WithMany()
                        .HasForeignKey("BudgetMinPriceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetPromotion", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "BudgetPromotionType")
                        .WithMany()
                        .HasForeignKey("BudgetPromotionTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetPromotionSyncItem", b =>
                {
                    b.HasOne("Database.Models.PRJ.BudgetPromotionSyncJob", "BudgetPromotionSyncJob")
                        .WithMany()
                        .HasForeignKey("BudgetPromotionSyncJobID");

                    b.HasOne("Database.Models.MST.MasterCenter", "BudgetPromotionSyncStatus")
                        .WithMany()
                        .HasForeignKey("BudgetPromotionSyncStatusMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.BudgetPromotion", "SaleBudgetPromotion")
                        .WithMany()
                        .HasForeignKey("SaleBudgetPromotionID");

                    b.HasOne("Database.Models.PRJ.BudgetPromotion", "TransferBudgetPromotion")
                        .WithMany()
                        .HasForeignKey("TransferBudgetPromotionID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetPromotionSyncItemResult", b =>
                {
                    b.HasOne("Database.Models.PRJ.BudgetPromotionSyncItem", "BudgetPromotionSyncItem")
                        .WithMany()
                        .HasForeignKey("BudgetPromotionSyncItemID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.BudgetPromotionSyncJob", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.Floor", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Tower", "Tower")
                        .WithMany()
                        .HasForeignKey("TowerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.FloorPlanImage", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.HighRiseFee", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "CalculateParkArea")
                        .WithMany()
                        .HasForeignKey("CalculateParkAreaMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Tower", "Tower")
                        .WithMany()
                        .HasForeignKey("TowerID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.LowRiseBuildingPriceFee", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.LowRiseFee", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.LowRiseFenceFee", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.LandOffice", "LandOffice")
                        .WithMany()
                        .HasForeignKey("LandOfficeID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.TypeOfRealEstate", "TypeOfRealEstate")
                        .WithMany()
                        .HasForeignKey("TypeOfRealEstateID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.MinPrice", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "DocType")
                        .WithMany()
                        .HasForeignKey("DocTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "MinPriceType")
                        .WithMany()
                        .HasForeignKey("MinPriceTypeMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.Model", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ModelShortName")
                        .WithMany()
                        .HasForeignKey("ModelShortNameMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ModelType")
                        .WithMany()
                        .HasForeignKey("ModelTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ModelUnitType")
                        .WithMany()
                        .HasForeignKey("ModelUnitTypeMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.TypeOfRealEstate", "TypeOfRealEstate")
                        .WithMany()
                        .HasForeignKey("TypeOfRealEstateID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.OtherUnitInfoTag", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.UnitOtherUnitInfoTag", "UnitTag")
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.PriceList", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.PriceListItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterPriceItem", "MasterPriceItem")
                        .WithMany()
                        .HasForeignKey("MasterPriceItemID");

                    b.HasOne("Database.Models.PRJ.PriceList", "PriceList")
                        .WithMany("PriceListItems")
                        .HasForeignKey("PriceListID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "PriceType")
                        .WithMany()
                        .HasForeignKey("PriceTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PriceUnit")
                        .WithMany()
                        .HasForeignKey("PriceUnitMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.PriceListItemTemplate", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterPriceItem", "MasterPriceItem")
                        .WithMany()
                        .HasForeignKey("MasterPriceItemID");

                    b.HasOne("Database.Models.PRJ.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.Project", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "AgreementDataStatus")
                        .WithMany()
                        .HasForeignKey("AgreementDataStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.BG", "BG")
                        .WithMany("Projects")
                        .HasForeignKey("BGID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.MST.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandID");

                    b.HasOne("Database.Models.MST.MasterCenter", "BudgetProDataStatus")
                        .WithMany()
                        .HasForeignKey("BudgetProDataStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "GeneralDataStatus")
                        .WithMany()
                        .HasForeignKey("GeneralDataStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "MinPriceDataStatus")
                        .WithMany()
                        .HasForeignKey("MinPriceDataStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ModelDataStatus")
                        .WithMany()
                        .HasForeignKey("ModelDataStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.Bank", "MortgageBank")
                        .WithMany()
                        .HasForeignKey("MortgageBankID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PictureDataStatus")
                        .WithMany()
                        .HasForeignKey("PictureDataStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PriceListDataStatus")
                        .WithMany()
                        .HasForeignKey("PriceListDataStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.SubBG", "SubBG")
                        .WithMany("Projects")
                        .HasForeignKey("SubBGID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.MST.MasterCenter", "TitleDeedDataStatus")
                        .WithMany()
                        .HasForeignKey("TitleDeedDataStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "TowerDataStatus")
                        .WithMany()
                        .HasForeignKey("TowerDataStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "TransferFeeDataStatus")
                        .WithMany()
                        .HasForeignKey("TransferFeeDataStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "UnitDataStatus")
                        .WithMany()
                        .HasForeignKey("UnitDataStatusMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "WaiveDataStatus")
                        .WithMany()
                        .HasForeignKey("WaiveDataStatusMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.PRJ.RoomPlanImage", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.RoundFee", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "BusinessTaxRoundFormula")
                        .WithMany()
                        .HasForeignKey("BusinessTaxRoundFormulaMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "IncomeTaxRoundFormula")
                        .WithMany()
                        .HasForeignKey("IncomeTaxRoundFormulaMasterCenterID");

                    b.HasOne("Database.Models.MST.LandOffice", "LandOffice")
                        .WithMany()
                        .HasForeignKey("LandOfficeID");

                    b.HasOne("Database.Models.MST.MasterCenter", "LocalTaxRoundFormula")
                        .WithMany()
                        .HasForeignKey("LocalTaxRoundFormulaMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "TransferFeeRoundFormula")
                        .WithMany()
                        .HasForeignKey("TransferFeeRoundFormulaMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.SAPWBSProSyncJob", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.TitledeedDetail", b =>
                {
                    b.HasOne("Database.Models.PRJ.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "LandStatus")
                        .WithMany()
                        .HasForeignKey("LandStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PreferStatus")
                        .WithMany()
                        .HasForeignKey("PreferStatusMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany("TitledeedDetails")
                        .HasForeignKey("UnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.TitledeedDetailHistory", b =>
                {
                    b.HasOne("Database.Models.PRJ.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "LandStatusMasterCenter")
                        .WithMany()
                        .HasForeignKey("LandStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PreferStatus")
                        .WithMany()
                        .HasForeignKey("PreferStatusMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.PRJ.TitledeedDetail", "TitledeedDetail")
                        .WithMany()
                        .HasForeignKey("TitledeedDetailID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.Tower", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.Unit", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.WaterElectricMeterPrice", "ElectricMeterPrice")
                        .WithMany()
                        .HasForeignKey("ElectricMeterPriceID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ElectrictMeterStatus")
                        .WithMany()
                        .HasForeignKey("ElectricMeterStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ElectricMeterTopic")
                        .WithMany()
                        .HasForeignKey("ElectricMeterTopicMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorID");

                    b.HasOne("Database.Models.MST.District", "HouseDistrict")
                        .WithMany()
                        .HasForeignKey("HouseDistrictID");

                    b.HasOne("Database.Models.MST.Province", "HouseProvince")
                        .WithMany()
                        .HasForeignKey("HouseProvinceID");

                    b.HasOne("Database.Models.MST.SubDistrict", "HouseSubDistrict")
                        .WithMany()
                        .HasForeignKey("HouseSubDistrictID");

                    b.HasOne("Database.Models.MST.LandOffice", "LandOffice")
                        .WithMany()
                        .HasForeignKey("LandOfficeID");

                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.PRJ.Tower", "Tower")
                        .WithMany()
                        .HasForeignKey("TowerID");

                    b.HasOne("Database.Models.MST.MasterCenter", "UnitDirection")
                        .WithMany()
                        .HasForeignKey("UnitDirectionMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "UnitStatus")
                        .WithMany()
                        .HasForeignKey("UnitStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.PRJ.WaterElectricMeterPrice", "WaterMeterPrice")
                        .WithMany()
                        .HasForeignKey("WaterMeterPriceID");

                    b.HasOne("Database.Models.MST.MasterCenter", "WaterMeterStatus")
                        .WithMany()
                        .HasForeignKey("WaterMeterStatusMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "WaterMeterTopic")
                        .WithMany()
                        .HasForeignKey("WaterMeterTopicMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.PRJ.UnitOtherUnitInfoTag", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.WaiveQC", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRJ.WaterElectricMeterPrice", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingCreditCardItem", b =>
                {
                    b.HasOne("Database.Models.PRM.BookingPromotion", "BookingPromotion")
                        .WithMany()
                        .HasForeignKey("BookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterBookingCreditCardItem", "MasterBookingCreditCardItem")
                        .WithMany()
                        .HasForeignKey("MasterBookingCreditCardItemID");

                    b.HasOne("Database.Models.PRM.QuotationBookingPromotionFreeItem", "QuotationBookingCreditCardItem")
                        .WithMany()
                        .HasForeignKey("QuotationBookingPromotionFreeItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotion", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "BookingPromotionStage")
                        .WithMany()
                        .HasForeignKey("BookingPromotionStageMasterCenterID");

                    b.HasOne("Database.Models.PRM.ChangePromotionWorkflow", "ChangePromotionWorkflow")
                        .WithMany()
                        .HasForeignKey("ChangePromotionWorkflowID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterBookingPromotion", "MasterPromotion")
                        .WithMany()
                        .HasForeignKey("MasterBookingPromotionID");

                    b.HasOne("Database.Models.USR.User", "PresentByUser")
                        .WithMany()
                        .HasForeignKey("PresentByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionDelivery", b =>
                {
                    b.HasOne("Database.Models.PRM.BookingPromotion", "BookingPromotion")
                        .WithMany()
                        .HasForeignKey("BookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionDeliveryItem", b =>
                {
                    b.HasOne("Database.Models.PRM.BookingPromotionDelivery", "BookingPromotionDelivery")
                        .WithMany()
                        .HasForeignKey("BookingPromotionDeliveryID");

                    b.HasOne("Database.Models.PRM.BookingPromotionItem", "BookingPromotionItem")
                        .WithMany()
                        .HasForeignKey("BookingPromotionItemID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionExpense", b =>
                {
                    b.HasOne("Database.Models.PRM.BookingPromotion", "BookingPromotion")
                        .WithMany()
                        .HasForeignKey("BookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ExpenseReponsibleBy")
                        .WithMany()
                        .HasForeignKey("ExpenseReponsibleByMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterPriceItem", "MasterPriceItem")
                        .WithMany()
                        .HasForeignKey("MasterPriceItemID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PaymentReceiver")
                        .WithMany()
                        .HasForeignKey("PaymentReceiverMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionFreeItem", b =>
                {
                    b.HasOne("Database.Models.PRM.BookingPromotion", "BookingPromotion")
                        .WithMany()
                        .HasForeignKey("BookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterBookingPromotionFreeItem", "MasterBookingPromotionFreeItem")
                        .WithMany()
                        .HasForeignKey("MasterBookingPromotionFreeItemID");

                    b.HasOne("Database.Models.PRM.QuotationBookingPromotionFreeItem", "QuotationBookingPromotionFreeItem")
                        .WithMany()
                        .HasForeignKey("QuotationBookingPromotionFreeItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionItem", b =>
                {
                    b.HasOne("Database.Models.PRM.BookingPromotion", "BookingPromotion")
                        .WithMany()
                        .HasForeignKey("BookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterBookingPromotionItem", "MasterPromotionItem")
                        .WithMany()
                        .HasForeignKey("MasterBookingPromotionItemID");

                    b.HasOne("Database.Models.PRM.QuotationBookingPromotionItem", "QuotationBookingPromotionItem")
                        .WithMany()
                        .HasForeignKey("QuotationBookingPromotionItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionRequest", b =>
                {
                    b.HasOne("Database.Models.PRM.BookingPromotion", "BookingPromotion")
                        .WithMany()
                        .HasForeignKey("BookingPromotionID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionRequestItem", b =>
                {
                    b.HasOne("Database.Models.PRM.BookingPromotionItem", "BookingPromotionItem")
                        .WithMany()
                        .HasForeignKey("BookingPromotionItemID");

                    b.HasOne("Database.Models.PRM.BookingPromotionRequest", "BookingPromotionRequest")
                        .WithMany()
                        .HasForeignKey("BookingPromotionRequestID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.BookingPromotionStockReceiveItem", b =>
                {
                    b.HasOne("Database.Models.PRM.BookingPromotionRequest", "BookingPromotionRequest")
                        .WithMany()
                        .HasForeignKey("BookingPromotionRequestID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.ChangePromotionWorkflow", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PromotionType")
                        .WithMany()
                        .HasForeignKey("PromotionTypeMasterCenterID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.MappingAgreement", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterBookingCreditCardItem", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.EDCFee", "EDCFee")
                        .WithMany()
                        .HasForeignKey("EDCFeeID");

                    b.HasOne("Database.Models.PRM.MasterBookingPromotion", "MasterBookingPromotion")
                        .WithMany()
                        .HasForeignKey("MasterBookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "PromotionItemStatus")
                        .WithMany()
                        .HasForeignKey("PromotionItemStatusMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterBookingHouseModelFreeItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterBookingPromotionFreeItem", "MasterBookingPromotionFreeItem")
                        .WithMany()
                        .HasForeignKey("MasterBookingPromotionFreeItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterBookingHouseModelItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterBookingPromotionItem", "MasterBookingPromotionItem")
                        .WithMany()
                        .HasForeignKey("MasterBookingPromotionItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterBookingPromotion", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PromotionStatus")
                        .WithMany()
                        .HasForeignKey("PromotionStatusMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterBookingPromotionFreeItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterBookingPromotion", "MasterBookingPromotion")
                        .WithMany()
                        .HasForeignKey("MasterBookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "WhenPromotionReceive")
                        .WithMany()
                        .HasForeignKey("WhenPromotionReceiveMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterBookingPromotionItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterBookingPromotion", "MasterBookingPromotion")
                        .WithMany()
                        .HasForeignKey("MasterBookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "PromotionItemStatus")
                        .WithMany()
                        .HasForeignKey("PromotionItemStatusMasterCenterID");

                    b.HasOne("Database.Models.PRM.PromotionMaterialItem", "PromotionMaterialItem")
                        .WithMany()
                        .HasForeignKey("PromotionMaterialItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "WhenPromotionReceive")
                        .WithMany()
                        .HasForeignKey("WhenPromotionReceiveMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterPreSaleHouseModelItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterPreSalePromotionItem", "MasterPreSalePromotionItem")
                        .WithMany()
                        .HasForeignKey("MasterPreSalePromotionItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterPreSalePromotion", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PromotionStatus")
                        .WithMany()
                        .HasForeignKey("PromotionStatusMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterPreSalePromotionItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterPreSalePromotion", "MasterPreSalePromotion")
                        .WithMany("Items")
                        .HasForeignKey("MasterPreSalePromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "PromotionItemStatus")
                        .WithMany()
                        .HasForeignKey("PromotionItemStatusMasterCenterID");

                    b.HasOne("Database.Models.PRM.PromotionMaterialItem", "PromotionMaterialItem")
                        .WithMany()
                        .HasForeignKey("PromotionMaterialItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "WhenPromotionReceive")
                        .WithMany()
                        .HasForeignKey("WhenPromotionReceiveMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterTransferCreditCardItem", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.EDCFee", "EDCFee")
                        .WithMany()
                        .HasForeignKey("EDCFeeID");

                    b.HasOne("Database.Models.PRM.MasterTransferPromotion", "MasterTransferPromotion")
                        .WithMany()
                        .HasForeignKey("MasterTransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "PromotionItemStatus")
                        .WithMany()
                        .HasForeignKey("PromotionItemStatusMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterTransferHouseModelFreeItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterTransferPromotionFreeItem", "MasterTransferPromotionFreeItem")
                        .WithMany()
                        .HasForeignKey("MasterTransferPromotionFreeItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterTransferHouseModelItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterTransferPromotionItem", "MasterTransferPromotionItem")
                        .WithMany()
                        .HasForeignKey("MasterTransferPromotionItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterTransferPromotion", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PromotionStatus")
                        .WithMany()
                        .HasForeignKey("PromotionStatusMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterTransferPromotionFreeItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterTransferPromotion", "MasterTransferPromotion")
                        .WithMany()
                        .HasForeignKey("MasterTransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "WhenPromotionReceive")
                        .WithMany()
                        .HasForeignKey("WhenPromotionReceiveMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.PRM.MasterTransferPromotionItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterTransferPromotion", "MasterTransferPromotion")
                        .WithMany()
                        .HasForeignKey("MasterTransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "PromotionItemStatus")
                        .WithMany()
                        .HasForeignKey("PromotionItemStatusMasterCenterID");

                    b.HasOne("Database.Models.PRM.PromotionMaterialItem", "PromotionMaterialItem")
                        .WithMany()
                        .HasForeignKey("PromotionMaterialItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "WhenPromotionReceive")
                        .WithMany()
                        .HasForeignKey("WhenPromotionReceiveMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.PRM.PRCancelJob", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PRCancelJobItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.PRCancelJob", "PRCancelJob")
                        .WithMany()
                        .HasForeignKey("PRCancelJobID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PRCancelJobStatus")
                        .WithMany()
                        .HasForeignKey("PRCancelJobStatusMasterCenterID");

                    b.HasOne("Database.Models.PRM.PreSalePromotionRequestItem", "PreSalePromotionRequestItem")
                        .WithMany()
                        .HasForeignKey("PreSalePromotionRequestItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PRCancelJobItemResult", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.PRCancelJobItem", "PRCancelJobItem")
                        .WithMany()
                        .HasForeignKey("PRCancelJobItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PRRequestJob", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PRRequestJobItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.PRRequestJob", "PRRequestJob")
                        .WithMany()
                        .HasForeignKey("PRRequestJobID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PRRequestJobStatus")
                        .WithMany()
                        .HasForeignKey("PRRequestJobStatusMasterCenterID");

                    b.HasOne("Database.Models.PRM.PreSalePromotionRequestItem", "PreSalePromotionRequestItem")
                        .WithMany()
                        .HasForeignKey("PreSalePromotionRequestItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PRRequestJobItemResult", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.PRRequestJobItem", "PRRequestJobItem")
                        .WithMany()
                        .HasForeignKey("PRRequestJobItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PreSalePromotion", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterPreSalePromotion", "MasterPromotion")
                        .WithMany()
                        .HasForeignKey("MasterPreSalePromotionID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PreSalePromotionItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterPreSalePromotionItem", "MasterPreSalePromotionItem")
                        .WithMany()
                        .HasForeignKey("MasterPreSalePromotionItemID");

                    b.HasOne("Database.Models.PRM.PreSalePromotion", "PreSalePromotion")
                        .WithMany()
                        .HasForeignKey("PreSalePromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRM.PreSalePromotionRequestItem", "PreSalePromotionRequestItem")
                        .WithMany()
                        .HasForeignKey("PreSalePromotionRequestItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PreSalePromotionRequest", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterPreSalePromotion", "MasterPreSalePromotion")
                        .WithMany()
                        .HasForeignKey("MasterPreSalePromotionID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "PromotionRequestPRStatus")
                        .WithMany()
                        .HasForeignKey("PromotionRequestPRStatusMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PreSalePromotionRequestItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterPreSalePromotionItem", "MasterPreSalePromotionItem")
                        .WithMany()
                        .HasForeignKey("MasterPreSalePromotionItemID");

                    b.HasOne("Database.Models.PRM.PreSalePromotionRequestUnit", "PreSalePromotionRequestUnit")
                        .WithMany("PreSalePromotionRequestItems")
                        .HasForeignKey("PreSalePromotionRequestUnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PreSalePromotionRequestUnit", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.PreSalePromotionRequest", "PreSalePromotionRequest")
                        .WithMany("RequestUnits")
                        .HasForeignKey("PreSalePromotionRequestID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "PromotionRequestPRJobType")
                        .WithMany()
                        .HasForeignKey("PromotionRequestPRJobTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "SAPPRStatus")
                        .WithMany()
                        .HasForeignKey("SAPPRStatusMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionMaterial", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.PromotionMaterialGroup", "PromotionMaterialGroup")
                        .WithMany()
                        .HasForeignKey("PromotionMaterialGroupID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionMaterialAddPrice", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.PromotionMaterialGroup", "PromotionMaterialGroup")
                        .WithMany()
                        .HasForeignKey("PromotionMaterialGroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionMaterialGroup", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionMaterialItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "MaterialItemStatus")
                        .WithMany()
                        .HasForeignKey("MaterialItemStatusMasterCenterID");

                    b.HasOne("Database.Models.PRM.PromotionMaterial", "PromotionMaterial")
                        .WithMany()
                        .HasForeignKey("PromotionMaterialID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "WhenPromotionReceive")
                        .WithMany()
                        .HasForeignKey("WhenPromotionReceiveMasterCenterID");
                });

            modelBuilder.Entity("Database.Models.PRM.PromotionVatRate", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationBookingCreditCardItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterBookingCreditCardItem", "MasterBookingCreditCardItem")
                        .WithMany()
                        .HasForeignKey("MasterBookingCreditCardItemID");

                    b.HasOne("Database.Models.PRM.QuotationBookingPromotion", "QuotationBookingPromotion")
                        .WithMany()
                        .HasForeignKey("QuotationBookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationBookingPromotion", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterBookingPromotion", "MasterPromotion")
                        .WithMany()
                        .HasForeignKey("MasterBookingPromotionID");

                    b.HasOne("Database.Models.SAL.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationBookingPromotionFreeItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterBookingPromotionFreeItem", "MasterPromotionFreeItem")
                        .WithMany()
                        .HasForeignKey("MasterBookingPromotionFreeItemID");

                    b.HasOne("Database.Models.PRM.QuotationBookingPromotion", "QuotationBookingPromotion")
                        .WithMany()
                        .HasForeignKey("QuotationBookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationBookingPromotionItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterBookingPromotionItem", "MasterPromotionItem")
                        .WithMany()
                        .HasForeignKey("MasterBookingPromotionItemID");

                    b.HasOne("Database.Models.PRM.QuotationBookingPromotion", "QuotationBookingPromotion")
                        .WithMany()
                        .HasForeignKey("QuotationBookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationPromotionExpense", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ExpenseReponsibleBy")
                        .WithMany()
                        .HasForeignKey("ExpenseReponsibleByMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterPriceItem", "MasterPriceItem")
                        .WithMany()
                        .HasForeignKey("MasterPriceItemID");

                    b.HasOne("Database.Models.PRM.QuotationBookingPromotion", "QuotationBookingPromotion")
                        .WithMany()
                        .HasForeignKey("QuotationBookingPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationTransferCreditCardItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterTransferCreditCardItem", "MasterTransferCreditCardItem")
                        .WithMany()
                        .HasForeignKey("MasterTransferCreditCardItemID");

                    b.HasOne("Database.Models.PRM.QuotationTransferPromotion", "QuotationTransferPromotion")
                        .WithMany()
                        .HasForeignKey("QuotationTransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationTransferPromotion", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterTransferPromotion", "MasterPromotion")
                        .WithMany()
                        .HasForeignKey("MasterTransferPromotionID");

                    b.HasOne("Database.Models.SAL.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationTransferPromotionFreeItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterTransferPromotionFreeItem", "MasterPromotionFreeItem")
                        .WithMany()
                        .HasForeignKey("MasterTransferPromotionFreeItemID");

                    b.HasOne("Database.Models.PRM.QuotationTransferPromotion", "QuotationTransferPromotion")
                        .WithMany()
                        .HasForeignKey("QuotationTransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.QuotationTransferPromotionItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterTransferPromotionItem", "MasterPromotionItem")
                        .WithMany()
                        .HasForeignKey("MasterTransferPromotionItemID");

                    b.HasOne("Database.Models.PRM.QuotationTransferPromotion", "QuotationTransferPromotion")
                        .WithMany()
                        .HasForeignKey("QuotationTransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.SAPMaterialSyncJob", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.SAP_ZRFCMM01", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.SAP_ZRFCMM02", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferCreditCardItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterTransferCreditCardItem", "MasterTransferCreditCardItem")
                        .WithMany()
                        .HasForeignKey("MasterTransferCreditCardItemID");

                    b.HasOne("Database.Models.PRM.QuotationTransferPromotionFreeItem", "QuotationTransferCreditCardItem")
                        .WithMany()
                        .HasForeignKey("QuotationTransferPromotionFreeItemID");

                    b.HasOne("Database.Models.PRM.TransferPromotion", "TransferPromotion")
                        .WithMany()
                        .HasForeignKey("TransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotion", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.PRM.ChangePromotionWorkflow", "ChangePromotionWorkflow")
                        .WithMany()
                        .HasForeignKey("ChangePromotionWorkflowID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterTransferPromotion", "MasterPromotion")
                        .WithMany()
                        .HasForeignKey("MasterTransferPromotionID");

                    b.HasOne("Database.Models.USR.User", "PresentByUser")
                        .WithMany()
                        .HasForeignKey("PresentByUserID");

                    b.HasOne("Database.Models.USR.User", "Unlocked3PercentTransferDiscountBy")
                        .WithMany()
                        .HasForeignKey("Unlocked3PercentTransferDiscountByUserID");

                    b.HasOne("Database.Models.USR.User", "UnlockedTransferDiscountBy")
                        .WithMany()
                        .HasForeignKey("UnlockedTransferDiscountByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionDelivery", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.TransferPromotion", "TransferPromotion")
                        .WithMany()
                        .HasForeignKey("TransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionDeliveryItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.TransferPromotionDelivery", "TransferPromotionDelivery")
                        .WithMany()
                        .HasForeignKey("TransferPromotionDeliveryID");

                    b.HasOne("Database.Models.PRM.TransferPromotionItem", "TransferPromotionItem")
                        .WithMany()
                        .HasForeignKey("TransferPromotionItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionExpense", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ExpenseReponsibleBy")
                        .WithMany()
                        .HasForeignKey("ExpenseReponsibleByMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterPriceItem", "MasterPriceItem")
                        .WithMany()
                        .HasForeignKey("MasterPriceItemID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PaymentReceiver")
                        .WithMany()
                        .HasForeignKey("PaymentReceiverMasterCenterID");

                    b.HasOne("Database.Models.PRM.TransferPromotion", "TransferPromotion")
                        .WithMany()
                        .HasForeignKey("TransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionFreeItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterTransferPromotionFreeItem", "MasterTransferPromotionFreeItem")
                        .WithMany()
                        .HasForeignKey("MasterTransferPromotionFreeItemID");

                    b.HasOne("Database.Models.PRM.QuotationTransferPromotionFreeItem", "QuotationTransferPromotionFreeItem")
                        .WithMany()
                        .HasForeignKey("QuotationTransferPromotionFreeItemID");

                    b.HasOne("Database.Models.PRM.TransferPromotion", "TransferPromotion")
                        .WithMany()
                        .HasForeignKey("TransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.MasterTransferPromotionItem", "MasterPromotionItem")
                        .WithMany()
                        .HasForeignKey("MasterTransferPromotionItemID");

                    b.HasOne("Database.Models.PRM.QuotationTransferPromotionItem", "QuotationTransferPromotionItem")
                        .WithMany()
                        .HasForeignKey("QuotationTransferPromotionItemID");

                    b.HasOne("Database.Models.PRM.TransferPromotion", "TransferPromotion")
                        .WithMany()
                        .HasForeignKey("TransferPromotionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionRequest", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.TransferPromotion", "TransferPromotion")
                        .WithMany()
                        .HasForeignKey("TransferPromotionID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionRequestItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.TransferPromotionItem", "TransferPromotionItem")
                        .WithMany()
                        .HasForeignKey("TransferPromotionItemID");

                    b.HasOne("Database.Models.PRM.TransferPromotionRequest", "TransferPromotionRequest")
                        .WithMany()
                        .HasForeignKey("TransferPromotionRequestID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.PRM.TransferPromotionStockReceiveItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRM.TransferPromotionRequest", "TransferPromotionRequest")
                        .WithMany()
                        .HasForeignKey("TransferPromotionRequestID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.Agreement", b =>
                {
                    b.HasOne("Database.Models.MST.MasterCenter", "AgreementStatus")
                        .WithMany()
                        .HasForeignKey("AgreementStatusMasterCenterID");

                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "HighRiseConstructionStatus")
                        .WithMany()
                        .HasForeignKey("HighRiseConstructionStatusMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "PrintApprovedBy")
                        .WithMany()
                        .HasForeignKey("PrintApprovedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "SignContractRequestUser")
                        .WithMany()
                        .HasForeignKey("SignContractRequestUserID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementFile", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementOwner", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.SAL.ChangeAgreementOwnerWorkflow", "ChangeAgreementOwnerWorkflow")
                        .WithMany()
                        .HasForeignKey("ChangeAgreementOwnerWorkflowID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ContactTitleEN")
                        .WithMany()
                        .HasForeignKey("ContactTitleENMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ContactTitleTH")
                        .WithMany()
                        .HasForeignKey("ContactTitleTHMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.Contact", "FromContact")
                        .WithMany()
                        .HasForeignKey("FromContactID");

                    b.HasOne("Database.Models.MST.MasterCenter", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "National")
                        .WithMany()
                        .HasForeignKey("NationalMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementOwnerAddress", b =>
                {
                    b.HasOne("Database.Models.SAL.AgreementOwner", "AgreementOwner")
                        .WithMany()
                        .HasForeignKey("AgreementOwnerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "ContactAddressType")
                        .WithMany()
                        .HasForeignKey("ContactAddressTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Database.Models.CTM.ContactAddress", "FromContactAddress")
                        .WithMany()
                        .HasForeignKey("FromContactAddressID");

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.HasOne("Database.Models.MST.SubDistrict", "SubDistrict")
                        .WithMany()
                        .HasForeignKey("SubDistrictID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementOwnerEmail", b =>
                {
                    b.HasOne("Database.Models.SAL.AgreementOwner", "AgreementOwner")
                        .WithMany()
                        .HasForeignKey("AgreementOwnerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.ContactEmail", "FromContactEmail")
                        .WithMany()
                        .HasForeignKey("FromContactEmailID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.AgreementOwnerPhone", b =>
                {
                    b.HasOne("Database.Models.SAL.AgreementOwner", "AgreementOwner")
                        .WithMany()
                        .HasForeignKey("AgreementOwnerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.ContactPhone", "FromContactPhone")
                        .WithMany()
                        .HasForeignKey("FromContactPhoneID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PhoneType")
                        .WithMany()
                        .HasForeignKey("PhoneTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.Booking", b =>
                {
                    b.HasOne("Database.Models.MST.AgentEmployee", "AgentEmployee")
                        .WithMany()
                        .HasForeignKey("AgentEmployeeID");

                    b.HasOne("Database.Models.MST.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentID");

                    b.HasOne("Database.Models.MST.MasterCenter", "BookingStatus")
                        .WithMany()
                        .HasForeignKey("BookingStatusMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Unit", "ChangeFromBooking")
                        .WithMany()
                        .HasForeignKey("ChangeFromBookingID");

                    b.HasOne("Database.Models.PRJ.Unit", "ChangeToBooking")
                        .WithMany()
                        .HasForeignKey("ChangeToBookingID");

                    b.HasOne("Database.Models.USR.User", "ChangeUnitByUser")
                        .WithMany()
                        .HasForeignKey("ChangeUnitByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "CreateBookingFrom")
                        .WithMany()
                        .HasForeignKey("CreateBookingFromID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "ProjectSaleUser")
                        .WithMany()
                        .HasForeignKey("ProjectSaleUserID");

                    b.HasOne("Database.Models.SAL.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationID");

                    b.HasOne("Database.Models.CTM.Contact", "ReferContact")
                        .WithMany()
                        .HasForeignKey("ReferContactID");

                    b.HasOne("Database.Models.MST.MasterCenter", "SaleOfficerType")
                        .WithMany()
                        .HasForeignKey("SaleOfficerTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "SaleUser")
                        .WithMany()
                        .HasForeignKey("SaleUserID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.BookingOwner", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ContactTitleEN")
                        .WithMany()
                        .HasForeignKey("ContactTitleENMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ContactTitleTH")
                        .WithMany()
                        .HasForeignKey("ContactTitleTHMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.Contact", "FromContact")
                        .WithMany()
                        .HasForeignKey("FromContactID");

                    b.HasOne("Database.Models.MST.MasterCenter", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "National")
                        .WithMany()
                        .HasForeignKey("NationalMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.BookingOwnerAddress", b =>
                {
                    b.HasOne("Database.Models.SAL.BookingOwner", "BookingOwner")
                        .WithMany()
                        .HasForeignKey("BookingOwnerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.MST.MasterCenter", "ContactAddressType")
                        .WithMany()
                        .HasForeignKey("ContactAddressTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("Database.Models.CTM.ContactAddress", "FromContactAddress")
                        .WithMany()
                        .HasForeignKey("FromContactAddressID");

                    b.HasOne("Database.Models.MST.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.HasOne("Database.Models.MST.SubDistrict", "SubDistrict")
                        .WithMany()
                        .HasForeignKey("SubDistrictID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.BookingOwnerEmail", b =>
                {
                    b.HasOne("Database.Models.SAL.BookingOwner", "BookingOwner")
                        .WithMany()
                        .HasForeignKey("BookingOwnerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.ContactEmail", "FromContactEmail")
                        .WithMany()
                        .HasForeignKey("FromContactEmailID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.BookingOwnerPhone", b =>
                {
                    b.HasOne("Database.Models.SAL.BookingOwner", "BookingOwner")
                        .WithMany()
                        .HasForeignKey("BookingOwnerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.CTM.ContactPhone", "FromContactPhone")
                        .WithMany()
                        .HasForeignKey("FromContactPhoneID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PhoneType")
                        .WithMany()
                        .HasForeignKey("PhoneTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.CancelMemo", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID");

                    b.HasOne("Database.Models.MST.Bank", "ReturnBank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.HasOne("Database.Models.USR.User", "CancelByUser")
                        .WithMany()
                        .HasForeignKey("CancelByUserID");

                    b.HasOne("Database.Models.MST.CancelReason", "CancelReason")
                        .WithMany()
                        .HasForeignKey("CancelReasonID");

                    b.HasOne("Database.Models.MST.MasterCenter", "CancelReturn")
                        .WithMany()
                        .HasForeignKey("CancelReturnMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.BankBranch", "ReturnBankBranch")
                        .WithMany()
                        .HasForeignKey("ReturnBankBranchID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.ChangeAgreementOwnerFile", b =>
                {
                    b.HasOne("Database.Models.SAL.ChangeAgreementOwnerWorkflow", "ChangeAgreementOwnerWorkflow")
                        .WithMany()
                        .HasForeignKey("ChangeAgreementOwnerWorkflowID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.ChangeAgreementOwnerWorkflow", b =>
                {
                    b.HasOne("Database.Models.USR.Role", "ApproverRole")
                        .WithMany()
                        .HasForeignKey("ApproverRoleID");

                    b.HasOne("Database.Models.USR.User", "ApproverUser")
                        .WithMany()
                        .HasForeignKey("ApproverUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "ChangeAgreementOwnerType")
                        .WithMany()
                        .HasForeignKey("ChangeAgreementOwnerTypeMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.Role", "RequestApproverRole")
                        .WithMany()
                        .HasForeignKey("RequestApproverRoleID");

                    b.HasOne("Database.Models.USR.User", "RequestApproverUser")
                        .WithMany()
                        .HasForeignKey("RequestApproverUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.ChangeUnitFile", b =>
                {
                    b.HasOne("Database.Models.SAL.ChangeUnitWorkflow", "ChangeUnitWorkflow")
                        .WithMany()
                        .HasForeignKey("ChangeUnitWorkflowID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.ChangeUnitWorkflow", b =>
                {
                    b.HasOne("Database.Models.USR.Role", "ApproverRole")
                        .WithMany()
                        .HasForeignKey("ApproverRoleID");

                    b.HasOne("Database.Models.USR.User", "ApproverUser")
                        .WithMany()
                        .HasForeignKey("ApproverUserID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.SAL.Booking", "FromAgreement")
                        .WithMany()
                        .HasForeignKey("FromAgreementID");

                    b.HasOne("Database.Models.SAL.Booking", "FromBooking")
                        .WithMany()
                        .HasForeignKey("FromBookingID");

                    b.HasOne("Database.Models.USR.Role", "RequestApproverRole")
                        .WithMany()
                        .HasForeignKey("RequestApproverRoleID");

                    b.HasOne("Database.Models.USR.User", "RequestApproverUser")
                        .WithMany()
                        .HasForeignKey("RequestApproverUserID");

                    b.HasOne("Database.Models.SAL.Booking", "ToAgreement")
                        .WithMany()
                        .HasForeignKey("ToAgreementID");

                    b.HasOne("Database.Models.SAL.Booking", "ToBooking")
                        .WithMany()
                        .HasForeignKey("ToBookingID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.MinPriceBudgetApproval", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.SAL.MinPriceBudgetWorkflow", "MinPriceBudgetWorkflow")
                        .WithMany()
                        .HasForeignKey("MinPriceBudgetWorkflowID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Database.Models.SAL.MinPriceBudgetWorkflow", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.HasOne("Database.Models.PRM.BookingPromotion", "BookingPromotion")
                        .WithMany()
                        .HasForeignKey("BookingPromotionID");

                    b.HasOne("Database.Models.MST.MasterCenter", "BudgetPromotionType")
                        .WithMany()
                        .HasForeignKey("BudgetPromotionTypeMasterCenterID");

                    b.HasOne("Database.Models.PRM.ChangePromotionWorkflow", "ChangePromotionWorkflow")
                        .WithMany()
                        .HasForeignKey("ChangePromotionWorkflowID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.BudgetPromotion", "FromMasterBudgetPromotion")
                        .WithMany()
                        .HasForeignKey("FromMasterBudgetPromotionID");

                    b.HasOne("Database.Models.PRJ.MinPrice", "FromMasterMinPrice")
                        .WithMany()
                        .HasForeignKey("FromMasterMinPriceID");

                    b.HasOne("Database.Models.MST.MasterCenter", "MinPriceBudgetWorkflowStage")
                        .WithMany()
                        .HasForeignKey("MinPriceBudgetWorkflowStageMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "MinPriceWorkflowType")
                        .WithMany()
                        .HasForeignKey("MinPriceWorkflowTypeMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.PRM.TransferPromotion", "TransferPromotion")
                        .WithMany()
                        .HasForeignKey("TransferPromotionID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.MortgageWithBank", b =>
                {
                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.PriceListWorkflow", b =>
                {
                    b.HasOne("Database.Models.USR.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserID");

                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.HasOne("Database.Models.PRM.ChangePromotionWorkflow", "ChangePromotionWorkflow")
                        .WithMany()
                        .HasForeignKey("ChangePromotionWorkflowID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PriceListWorkflowStage")
                        .WithMany()
                        .HasForeignKey("PriceListWorkflowStageMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.SAL.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationID");

                    b.HasOne("Database.Models.USR.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");

                    b.HasOne("Database.Models.MST.MasterCenter", "UnitStatus")
                        .WithMany()
                        .HasForeignKey("UnitStatusMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.Quotation", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.MST.MasterCenter", "QuotationStatus")
                        .WithMany()
                        .HasForeignKey("QuotationStatusMasterCenterID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.QuotationCompare", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.QuotationUnitPrice", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.PriceList", "FromPriceList")
                        .WithMany()
                        .HasForeignKey("FromPriceListID");

                    b.HasOne("Database.Models.SAL.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.QuotationUnitPriceItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterPriceItem", "MasterPriceItem")
                        .WithMany()
                        .HasForeignKey("MasterPriceItemID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PriceType")
                        .WithMany()
                        .HasForeignKey("PriceTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PriceUnit")
                        .WithMany()
                        .HasForeignKey("PriceUnitMasterCenterID");

                    b.HasOne("Database.Models.SAL.QuotationUnitPrice", "QuotationUnitPrice")
                        .WithMany()
                        .HasForeignKey("QuotationUnitPriceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.SignContractWorkflow", b =>
                {
                    b.HasOne("Database.Models.USR.Role", "ActionByRole")
                        .WithMany()
                        .HasForeignKey("ActionByRoleID");

                    b.HasOne("Database.Models.USR.User", "ActionBy")
                        .WithMany()
                        .HasForeignKey("ActionByUserID");

                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "SignContractAction")
                        .WithMany()
                        .HasForeignKey("SignContractActionMasterCenterID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.TitledeedReceive", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.TitledeedDetail", "TitledeedDetail")
                        .WithMany()
                        .HasForeignKey("TitledeedDetailID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.TitledeedReceiveHistory", b =>
                {
                    b.HasOne("Database.Models.USR.User", "ActorUser")
                        .WithMany()
                        .HasForeignKey("ActorUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.SAL.TitledeedReceive", "TitledeedReceive")
                        .WithMany()
                        .HasForeignKey("TitledeedReceiveID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.Transfer", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "LC")
                        .WithMany()
                        .HasForeignKey("LCID");

                    b.HasOne("Database.Models.PRJ.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferAgreementOwner", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.SAL.AgreementOwner", "FromAgreementOwner")
                        .WithMany()
                        .HasForeignKey("FromAgreementOwnerID");

                    b.HasOne("Database.Models.SAL.AgreementOwner", "ToAgreementOwner")
                        .WithMany()
                        .HasForeignKey("ToAgreementOwnerID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferCash", b =>
                {
                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.SAL.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferCheque", b =>
                {
                    b.HasOne("Database.Models.MST.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchID");

                    b.HasOne("Database.Models.MST.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.SAL.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferDocument", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.SAL.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferOwner", b =>
                {
                    b.HasOne("Database.Models.CTM.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.SAL.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.TransferUnit", b =>
                {
                    b.HasOne("Database.Models.SAL.Agreement", "Agreement")
                        .WithMany()
                        .HasForeignKey("AgreementID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Unit", "NewUnit")
                        .WithMany()
                        .HasForeignKey("NewUnitID");

                    b.HasOne("Database.Models.PRJ.Unit", "OldUnit")
                        .WithMany()
                        .HasForeignKey("OldUnitID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.UnitPrice", b =>
                {
                    b.HasOne("Database.Models.SAL.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterCenter", "UnitPriceStage")
                        .WithMany()
                        .HasForeignKey("UnitPriceStageMasterCenterID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.UnitPriceInstallment", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.SAL.UnitPriceItem", "InstallmentOfUnitPriceItem")
                        .WithMany()
                        .HasForeignKey("InstallmentOfUnitPriceItemID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.SAL.UnitPriceItem", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.MasterPriceItem", "MasterPriceItem")
                        .WithMany()
                        .HasForeignKey("MasterPriceItemID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PriceType")
                        .WithMany()
                        .HasForeignKey("PriceTypeMasterCenterID");

                    b.HasOne("Database.Models.MST.MasterCenter", "PriceUnit")
                        .WithMany()
                        .HasForeignKey("PriceUnitMasterCenterID");

                    b.HasOne("Database.Models.SAL.UnitPrice", "UnitPrice")
                        .WithMany()
                        .HasForeignKey("UnitPriceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.USR.AuthorizeRule", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.AuthorizeRule", "ParentRule")
                        .WithMany()
                        .HasForeignKey("ParentRuleID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.USR.AuthorizeRuleByRole", b =>
                {
                    b.HasOne("Database.Models.USR.AuthorizeRule", "AuthorizeRule")
                        .WithMany()
                        .HasForeignKey("AuthorizeRuleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.USR.FavoriteMenu", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.MST.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.USR.MyTask", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserID");

                    b.HasOne("Database.Models.USR.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Database.Models.USR.RefreshToken", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.USR.Role", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.RoleGroup", "RoleGroup")
                        .WithMany()
                        .HasForeignKey("RoleGroupID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.USR.RoleGroup", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.USR.TaskType", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.USR.User", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.USR.UserAuthorizeProject", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany("UserAuthorizeProjects")
                        .HasForeignKey("ProjectID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany("UserAuthorizeProjects")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.USR.UserBackgroundJob", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });

            modelBuilder.Entity("Database.Models.USR.UserDefaultProject", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.PRJ.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.USR.UserRole", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.USR.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.WFL.Workflow", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.WFL.WorkflowType", "WorkflowType")
                        .WithMany()
                        .HasForeignKey("WorkflowTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowApprover", b =>
                {
                    b.HasOne("Database.Models.USR.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.WFL.WorkflowStep", "WorkflowStep")
                        .WithMany()
                        .HasForeignKey("WorkflowStepID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowApproverTemplate", b =>
                {
                    b.HasOne("Database.Models.USR.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverID");

                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.WFL.WorkflowStepTemplate", "WorkflowStepTemplate")
                        .WithMany()
                        .HasForeignKey("WorkflowStepTemplateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowStep", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.WFL.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowStepTemplate", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.WFL.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkflowTemplateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowTemplate", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");

                    b.HasOne("Database.Models.WFL.WorkflowType", "WorkflowType")
                        .WithMany()
                        .HasForeignKey("WorkflowTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Models.WFL.WorkflowType", b =>
                {
                    b.HasOne("Database.Models.USR.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");

                    b.HasOne("Database.Models.USR.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserID");
                });
#pragma warning restore 612, 618
        }
    }
}
